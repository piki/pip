This file contains any messages produced by compilers while
running configure, to aid debugging if configure makes a mistake.

It was created by configure, which was
generated by GNU Autoconf 2.61.  Invocation command line was

  $ ./configure 

## --------- ##
## Platform. ##
## --------- ##

hostname = parstripe
uname -m = x86_64
uname -r = 2.6.31-16-generic
uname -s = Linux
uname -v = #53-Ubuntu SMP Tue Dec 8 04:02:15 UTC 2009

/usr/bin/uname -p = unknown
/bin/uname -X     = unknown

/bin/arch              = unknown
/usr/bin/arch -k       = unknown
/usr/convex/getsysinfo = unknown
/usr/bin/hostinfo      = unknown
/bin/machine           = unknown
/usr/bin/oslevel       = unknown
/bin/universe          = unknown

PATH: /home/patrick/bin
PATH: /usr/local/sbin
PATH: /usr/local/bin
PATH: /usr/sbin
PATH: /usr/bin
PATH: /sbin
PATH: /bin
PATH: /usr/games
PATH: /sbin
PATH: /usr/sbin
PATH: /home/patrick/compile/android-sdk-linux/tools


## ----------- ##
## Core tests. ##
## ----------- ##

configure:1857: checking for gcc
configure:1884: result: g++ -m32
configure:2122: checking for C compiler version
configure:2129: g++ -m32 --version >&5
g++ (Ubuntu 4.4.1-4ubuntu8) 4.4.1
Copyright (C) 2009 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

configure:2132: $? = 0
configure:2139: g++ -m32 -v >&5
Using built-in specs.
Target: x86_64-linux-gnu
Configured with: ../src/configure -v --with-pkgversion='Ubuntu 4.4.1-4ubuntu8' --with-bugurl=file:///usr/share/doc/gcc-4.4/README.Bugs --enable-languages=c,c++,fortran,objc,obj-c++ --prefix=/usr --enable-shared --enable-multiarch --enable-linker-build-id --with-system-zlib --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --with-gxx-include-dir=/usr/include/c++/4.4 --program-suffix=-4.4 --enable-nls --enable-clocale=gnu --enable-libstdcxx-debug --enable-objc-gc --disable-werror --with-arch-32=i486 --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu
Thread model: posix
gcc version 4.4.1 (Ubuntu 4.4.1-4ubuntu8) 
configure:2142: $? = 0
configure:2149: g++ -m32 -V >&5
g++: argument to '-V' missing

configure:2152: $? = 1
configure:2175: checking for C compiler default output file name
configure:2202: g++ -m32    conftest.c  >&5
configure:2205: $? = 0
configure:2243: result: a.out
configure:2260: checking whether the C compiler works
configure:2270: ./a.out
configure:2273: $? = 0
configure:2290: result: yes
configure:2297: checking whether we are cross compiling
configure:2299: result: no
configure:2302: checking for suffix of executables
configure:2309: g++ -m32 -o conftest    conftest.c  >&5
configure:2312: $? = 0
configure:2336: result: 
configure:2342: checking for suffix of object files
configure:2368: g++ -m32 -c   conftest.c >&5
configure:2371: $? = 0
configure:2394: result: o
configure:2398: checking whether we are using the GNU C compiler
configure:2427: g++ -m32 -c   conftest.c >&5
configure:2433: $? = 0
configure:2450: result: yes
configure:2455: checking whether g++ -m32 accepts -g
configure:2485: g++ -m32 -c -g  conftest.c >&5
configure:2491: $? = 0
configure:2590: result: yes
configure:2607: checking for g++ -m32 option to accept ISO C89
configure:2681: g++ -m32  -c -g -O2  conftest.c >&5
conftest.c:15: error: 'p' was not declared in this scope
conftest.c:15: error: 'i' was not declared in this scope
conftest.c:15: error: initializer expression list treated as compound expression
conftest.c:16: error: expected ',' or ';' before 'char'
conftest.c:18: error: expected unqualified-id before '{' token
conftest.c: In function 'int main()':
conftest.c:54: error: cannot convert 'char*' to 'char* (*)(char**, int)' for argument '1' to 'char* f(char* (*)(char**, int), char**, ...)'
conftest.c:54: error: cannot convert 'char*' to 'char* (*)(char**, int)' for argument '1' to 'char* f(char* (*)(char**, int), char**, ...)'
configure:2687: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| /* end confdefs.h.  */
| #include <stdarg.h>
| #include <stdio.h>
| #include <sys/types.h>
| #include <sys/stat.h>
| /* Most of the following tests are stolen from RCS 5.7's src/conf.sh.  */
| struct buf { int x; };
| FILE * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (p, i)
|      char **p;
|      int i;
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not '\xHH' hex character constants.
|    These don't provoke an error unfortunately, instead are silently treated
|    as 'x'.  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously '\x00'!='x' always comes out true, for an
|    array size at least.  It's necessary to write '\x00'==0 to get something
|    that's true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, FILE *(*)(struct buf *, struct stat *, int), int, int);
| int argc;
| char **argv;
| int
| main ()
| {
| return f (e, argv, 0) != argv[0]  ||  f (e, argv, 1) != argv[1];
|   ;
|   return 0;
| }
configure:2681: g++ -m32 -qlanglvl=extc89 -c -g -O2  conftest.c >&5
g++: unrecognized option '-qlanglvl=extc89'
conftest.c:15: error: 'p' was not declared in this scope
conftest.c:15: error: 'i' was not declared in this scope
conftest.c:15: error: initializer expression list treated as compound expression
conftest.c:16: error: expected ',' or ';' before 'char'
conftest.c:18: error: expected unqualified-id before '{' token
conftest.c: In function 'int main()':
conftest.c:54: error: cannot convert 'char*' to 'char* (*)(char**, int)' for argument '1' to 'char* f(char* (*)(char**, int), char**, ...)'
conftest.c:54: error: cannot convert 'char*' to 'char* (*)(char**, int)' for argument '1' to 'char* f(char* (*)(char**, int), char**, ...)'
configure:2687: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| /* end confdefs.h.  */
| #include <stdarg.h>
| #include <stdio.h>
| #include <sys/types.h>
| #include <sys/stat.h>
| /* Most of the following tests are stolen from RCS 5.7's src/conf.sh.  */
| struct buf { int x; };
| FILE * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (p, i)
|      char **p;
|      int i;
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not '\xHH' hex character constants.
|    These don't provoke an error unfortunately, instead are silently treated
|    as 'x'.  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously '\x00'!='x' always comes out true, for an
|    array size at least.  It's necessary to write '\x00'==0 to get something
|    that's true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, FILE *(*)(struct buf *, struct stat *, int), int, int);
| int argc;
| char **argv;
| int
| main ()
| {
| return f (e, argv, 0) != argv[0]  ||  f (e, argv, 1) != argv[1];
|   ;
|   return 0;
| }
configure:2681: g++ -m32 -qlanglvl=ansi -c -g -O2  conftest.c >&5
g++: unrecognized option '-qlanglvl=ansi'
conftest.c:15: error: 'p' was not declared in this scope
conftest.c:15: error: 'i' was not declared in this scope
conftest.c:15: error: initializer expression list treated as compound expression
conftest.c:16: error: expected ',' or ';' before 'char'
conftest.c:18: error: expected unqualified-id before '{' token
conftest.c: In function 'int main()':
conftest.c:54: error: cannot convert 'char*' to 'char* (*)(char**, int)' for argument '1' to 'char* f(char* (*)(char**, int), char**, ...)'
conftest.c:54: error: cannot convert 'char*' to 'char* (*)(char**, int)' for argument '1' to 'char* f(char* (*)(char**, int), char**, ...)'
configure:2687: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| /* end confdefs.h.  */
| #include <stdarg.h>
| #include <stdio.h>
| #include <sys/types.h>
| #include <sys/stat.h>
| /* Most of the following tests are stolen from RCS 5.7's src/conf.sh.  */
| struct buf { int x; };
| FILE * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (p, i)
|      char **p;
|      int i;
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not '\xHH' hex character constants.
|    These don't provoke an error unfortunately, instead are silently treated
|    as 'x'.  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously '\x00'!='x' always comes out true, for an
|    array size at least.  It's necessary to write '\x00'==0 to get something
|    that's true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, FILE *(*)(struct buf *, struct stat *, int), int, int);
| int argc;
| char **argv;
| int
| main ()
| {
| return f (e, argv, 0) != argv[0]  ||  f (e, argv, 1) != argv[1];
|   ;
|   return 0;
| }
configure:2681: g++ -m32 -std -c -g -O2  conftest.c >&5
cc1plus: error: unrecognized command line option "-std"
configure:2687: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| /* end confdefs.h.  */
| #include <stdarg.h>
| #include <stdio.h>
| #include <sys/types.h>
| #include <sys/stat.h>
| /* Most of the following tests are stolen from RCS 5.7's src/conf.sh.  */
| struct buf { int x; };
| FILE * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (p, i)
|      char **p;
|      int i;
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not '\xHH' hex character constants.
|    These don't provoke an error unfortunately, instead are silently treated
|    as 'x'.  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously '\x00'!='x' always comes out true, for an
|    array size at least.  It's necessary to write '\x00'==0 to get something
|    that's true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, FILE *(*)(struct buf *, struct stat *, int), int, int);
| int argc;
| char **argv;
| int
| main ()
| {
| return f (e, argv, 0) != argv[0]  ||  f (e, argv, 1) != argv[1];
|   ;
|   return 0;
| }
configure:2681: g++ -m32 -Ae -c -g -O2  conftest.c >&5
<command-line>: error: missing '(' after predicate
conftest.c:15: error: 'p' was not declared in this scope
conftest.c:15: error: 'i' was not declared in this scope
conftest.c:15: error: initializer expression list treated as compound expression
conftest.c:16: error: expected ',' or ';' before 'char'
conftest.c:18: error: expected unqualified-id before '{' token
conftest.c: In function 'int main()':
conftest.c:54: error: cannot convert 'char*' to 'char* (*)(char**, int)' for argument '1' to 'char* f(char* (*)(char**, int), char**, ...)'
conftest.c:54: error: cannot convert 'char*' to 'char* (*)(char**, int)' for argument '1' to 'char* f(char* (*)(char**, int), char**, ...)'
configure:2687: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| /* end confdefs.h.  */
| #include <stdarg.h>
| #include <stdio.h>
| #include <sys/types.h>
| #include <sys/stat.h>
| /* Most of the following tests are stolen from RCS 5.7's src/conf.sh.  */
| struct buf { int x; };
| FILE * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (p, i)
|      char **p;
|      int i;
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not '\xHH' hex character constants.
|    These don't provoke an error unfortunately, instead are silently treated
|    as 'x'.  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously '\x00'!='x' always comes out true, for an
|    array size at least.  It's necessary to write '\x00'==0 to get something
|    that's true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, FILE *(*)(struct buf *, struct stat *, int), int, int);
| int argc;
| char **argv;
| int
| main ()
| {
| return f (e, argv, 0) != argv[0]  ||  f (e, argv, 1) != argv[1];
|   ;
|   return 0;
| }
configure:2681: g++ -m32 -Aa -D_HPUX_SOURCE -c -g -O2  conftest.c >&5
<command-line>: error: missing '(' after predicate
conftest.c:15: error: 'p' was not declared in this scope
conftest.c:15: error: 'i' was not declared in this scope
conftest.c:15: error: initializer expression list treated as compound expression
conftest.c:16: error: expected ',' or ';' before 'char'
conftest.c:18: error: expected unqualified-id before '{' token
conftest.c: In function 'int main()':
conftest.c:54: error: cannot convert 'char*' to 'char* (*)(char**, int)' for argument '1' to 'char* f(char* (*)(char**, int), char**, ...)'
conftest.c:54: error: cannot convert 'char*' to 'char* (*)(char**, int)' for argument '1' to 'char* f(char* (*)(char**, int), char**, ...)'
configure:2687: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| /* end confdefs.h.  */
| #include <stdarg.h>
| #include <stdio.h>
| #include <sys/types.h>
| #include <sys/stat.h>
| /* Most of the following tests are stolen from RCS 5.7's src/conf.sh.  */
| struct buf { int x; };
| FILE * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (p, i)
|      char **p;
|      int i;
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not '\xHH' hex character constants.
|    These don't provoke an error unfortunately, instead are silently treated
|    as 'x'.  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously '\x00'!='x' always comes out true, for an
|    array size at least.  It's necessary to write '\x00'==0 to get something
|    that's true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, FILE *(*)(struct buf *, struct stat *, int), int, int);
| int argc;
| char **argv;
| int
| main ()
| {
| return f (e, argv, 0) != argv[0]  ||  f (e, argv, 1) != argv[1];
|   ;
|   return 0;
| }
configure:2681: g++ -m32 -Xc -D__EXTENSIONS__ -c -g -O2  conftest.c >&5
g++: unrecognized option '-Xc'
conftest.c:15: error: 'p' was not declared in this scope
conftest.c:15: error: 'i' was not declared in this scope
conftest.c:15: error: initializer expression list treated as compound expression
conftest.c:16: error: expected ',' or ';' before 'char'
conftest.c:18: error: expected unqualified-id before '{' token
conftest.c: In function 'int main()':
conftest.c:54: error: cannot convert 'char*' to 'char* (*)(char**, int)' for argument '1' to 'char* f(char* (*)(char**, int), char**, ...)'
conftest.c:54: error: cannot convert 'char*' to 'char* (*)(char**, int)' for argument '1' to 'char* f(char* (*)(char**, int), char**, ...)'
configure:2687: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| /* end confdefs.h.  */
| #include <stdarg.h>
| #include <stdio.h>
| #include <sys/types.h>
| #include <sys/stat.h>
| /* Most of the following tests are stolen from RCS 5.7's src/conf.sh.  */
| struct buf { int x; };
| FILE * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (p, i)
|      char **p;
|      int i;
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not '\xHH' hex character constants.
|    These don't provoke an error unfortunately, instead are silently treated
|    as 'x'.  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously '\x00'!='x' always comes out true, for an
|    array size at least.  It's necessary to write '\x00'==0 to get something
|    that's true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, FILE *(*)(struct buf *, struct stat *, int), int, int);
| int argc;
| char **argv;
| int
| main ()
| {
| return f (e, argv, 0) != argv[0]  ||  f (e, argv, 1) != argv[1];
|   ;
|   return 0;
| }
configure:2713: result: unsupported
configure:2786: checking for g++
configure:2802: found /usr/bin/g++
configure:2813: result: g++
configure:2844: checking for C++ compiler version
configure:2851: g++ --version >&5
g++ (Ubuntu 4.4.1-4ubuntu8) 4.4.1
Copyright (C) 2009 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

configure:2854: $? = 0
configure:2861: g++ -v >&5
Using built-in specs.
Target: x86_64-linux-gnu
Configured with: ../src/configure -v --with-pkgversion='Ubuntu 4.4.1-4ubuntu8' --with-bugurl=file:///usr/share/doc/gcc-4.4/README.Bugs --enable-languages=c,c++,fortran,objc,obj-c++ --prefix=/usr --enable-shared --enable-multiarch --enable-linker-build-id --with-system-zlib --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --with-gxx-include-dir=/usr/include/c++/4.4 --program-suffix=-4.4 --enable-nls --enable-clocale=gnu --enable-libstdcxx-debug --enable-objc-gc --disable-werror --with-arch-32=i486 --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu
Thread model: posix
gcc version 4.4.1 (Ubuntu 4.4.1-4ubuntu8) 
configure:2864: $? = 0
configure:2871: g++ -V >&5
g++: '-V' option must have argument
configure:2874: $? = 1
configure:2877: checking whether we are using the GNU C++ compiler
configure:2906: g++ -c   conftest.cpp >&5
configure:2912: $? = 0
configure:2929: result: yes
configure:2934: checking whether g++ accepts -g
configure:2964: g++ -c -g  conftest.cpp >&5
configure:2970: $? = 0
configure:3069: result: yes
configure:3097: checking how to run the C++ preprocessor
configure:3133: g++ -E  conftest.cpp
configure:3139: $? = 0
configure:3170: g++ -E  conftest.cpp
conftest.cpp:8:28: error: ac_nonexistent.h: No such file or directory
configure:3176: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| /* end confdefs.h.  */
| #include <ac_nonexistent.h>
configure:3209: result: g++ -E
configure:3238: g++ -E  conftest.cpp
configure:3244: $? = 0
configure:3275: g++ -E  conftest.cpp
conftest.cpp:8:28: error: ac_nonexistent.h: No such file or directory
configure:3281: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| /* end confdefs.h.  */
| #include <ac_nonexistent.h>
configure:3362: checking for a BSD-compatible install
configure:3418: result: /usr/bin/install -c
configure:3472: checking for ranlib
configure:3488: found /usr/bin/ranlib
configure:3499: result: ranlib
configure:3535: checking for bison
configure:3553: found /usr/bin/bison
configure:3566: result: /usr/bin/bison
configure:3579: checking for flex
configure:3595: found /usr/bin/flex
configure:3606: result: flex
configure:3643: flex conftest.l
configure:3646: $? = 0
configure:3648: checking lex output file root
configure:3664: result: lex.yy
configure:3669: checking lex library
configure:3688: g++ -o conftest -g -O2   conftest.cpp   >&5
conftest.l: In function 'int yylex()':
conftest.l:6: error: 'input' was not declared in this scope
configure:3694: $? = 1
configure: failed program was:
| 
| #line 3 "lex.yy.c"
| 
| #define  YY_INT_ALIGNED short int
| 
| /* A lexical scanner generated by flex */
| 
| #define FLEX_SCANNER
| #define YY_FLEX_MAJOR_VERSION 2
| #define YY_FLEX_MINOR_VERSION 5
| #define YY_FLEX_SUBMINOR_VERSION 35
| #if YY_FLEX_SUBMINOR_VERSION > 0
| #define FLEX_BETA
| #endif
| 
| /* First, we deal with  platform-specific or compiler-specific issues. */
| 
| /* begin standard C headers. */
| #include <stdio.h>
| #include <string.h>
| #include <errno.h>
| #include <stdlib.h>
| 
| /* end standard C headers. */
| 
| /* flex integer type definitions */
| 
| #ifndef FLEXINT_H
| #define FLEXINT_H
| 
| /* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */
| 
| #if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
| 
| /* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
|  * if you want the limit (max/min) macros for int types. 
|  */
| #ifndef __STDC_LIMIT_MACROS
| #define __STDC_LIMIT_MACROS 1
| #endif
| 
| #include <inttypes.h>
| typedef int8_t flex_int8_t;
| typedef uint8_t flex_uint8_t;
| typedef int16_t flex_int16_t;
| typedef uint16_t flex_uint16_t;
| typedef int32_t flex_int32_t;
| typedef uint32_t flex_uint32_t;
| #else
| typedef signed char flex_int8_t;
| typedef short int flex_int16_t;
| typedef int flex_int32_t;
| typedef unsigned char flex_uint8_t; 
| typedef unsigned short int flex_uint16_t;
| typedef unsigned int flex_uint32_t;
| 
| /* Limits of integral types. */
| #ifndef INT8_MIN
| #define INT8_MIN               (-128)
| #endif
| #ifndef INT16_MIN
| #define INT16_MIN              (-32767-1)
| #endif
| #ifndef INT32_MIN
| #define INT32_MIN              (-2147483647-1)
| #endif
| #ifndef INT8_MAX
| #define INT8_MAX               (127)
| #endif
| #ifndef INT16_MAX
| #define INT16_MAX              (32767)
| #endif
| #ifndef INT32_MAX
| #define INT32_MAX              (2147483647)
| #endif
| #ifndef UINT8_MAX
| #define UINT8_MAX              (255U)
| #endif
| #ifndef UINT16_MAX
| #define UINT16_MAX             (65535U)
| #endif
| #ifndef UINT32_MAX
| #define UINT32_MAX             (4294967295U)
| #endif
| 
| #endif /* ! C99 */
| 
| #endif /* ! FLEXINT_H */
| 
| #ifdef __cplusplus
| 
| /* The "const" storage-class-modifier is valid. */
| #define YY_USE_CONST
| 
| #else	/* ! __cplusplus */
| 
| /* C99 requires __STDC__ to be defined as 1. */
| #if defined (__STDC__)
| 
| #define YY_USE_CONST
| 
| #endif	/* defined (__STDC__) */
| #endif	/* ! __cplusplus */
| 
| #ifdef YY_USE_CONST
| #define yyconst const
| #else
| #define yyconst
| #endif
| 
| /* Returned upon end-of-file. */
| #define YY_NULL 0
| 
| /* Promotes a possibly negative, possibly signed char to an unsigned
|  * integer for use as an array index.  If the signed char is negative,
|  * we want to instead treat it as an 8-bit unsigned char, hence the
|  * double cast.
|  */
| #define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
| 
| /* Enter a start condition.  This macro really ought to take a parameter,
|  * but we do it the disgusting crufty way forced on us by the ()-less
|  * definition of BEGIN.
|  */
| #define BEGIN (yy_start) = 1 + 2 *
| 
| /* Translate the current start state into a value that can be later handed
|  * to BEGIN to return to the state.  The YYSTATE alias is for lex
|  * compatibility.
|  */
| #define YY_START (((yy_start) - 1) / 2)
| #define YYSTATE YY_START
| 
| /* Action number for EOF rule of a given start state. */
| #define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
| 
| /* Special action meaning "start processing a new file". */
| #define YY_NEW_FILE yyrestart(yyin  )
| 
| #define YY_END_OF_BUFFER_CHAR 0
| 
| /* Size of default input buffer. */
| #ifndef YY_BUF_SIZE
| #ifdef __ia64__
| /* On IA-64, the buffer size is 16k, not 8k.
|  * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
|  * Ditto for the __ia64__ case accordingly.
|  */
| #define YY_BUF_SIZE 32768
| #else
| #define YY_BUF_SIZE 16384
| #endif /* __ia64__ */
| #endif
| 
| /* The state buf must be large enough to hold one state per character in the main buffer.
|  */
| #define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))
| 
| #ifndef YY_TYPEDEF_YY_BUFFER_STATE
| #define YY_TYPEDEF_YY_BUFFER_STATE
| typedef struct yy_buffer_state *YY_BUFFER_STATE;
| #endif
| 
| extern int yyleng;
| 
| extern FILE *yyin, *yyout;
| 
| #define EOB_ACT_CONTINUE_SCAN 0
| #define EOB_ACT_END_OF_FILE 1
| #define EOB_ACT_LAST_MATCH 2
| 
|     #define YY_LESS_LINENO(n)
|     
| /* Return all but the first "n" matched characters back to the input stream. */
| #define yyless(n) \
| 	do \
| 		{ \
| 		/* Undo effects of setting up yytext. */ \
|         int yyless_macro_arg = (n); \
|         YY_LESS_LINENO(yyless_macro_arg);\
| 		*yy_cp = (yy_hold_char); \
| 		YY_RESTORE_YY_MORE_OFFSET \
| 		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
| 		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
| 		} \
| 	while ( 0 )
| 
| #define unput(c) yyunput( c, (yytext_ptr)  )
| 
| #ifndef YY_TYPEDEF_YY_SIZE_T
| #define YY_TYPEDEF_YY_SIZE_T
| typedef size_t yy_size_t;
| #endif
| 
| #ifndef YY_STRUCT_YY_BUFFER_STATE
| #define YY_STRUCT_YY_BUFFER_STATE
| struct yy_buffer_state
| 	{
| 	FILE *yy_input_file;
| 
| 	char *yy_ch_buf;		/* input buffer */
| 	char *yy_buf_pos;		/* current position in input buffer */
| 
| 	/* Size of input buffer in bytes, not including room for EOB
| 	 * characters.
| 	 */
| 	yy_size_t yy_buf_size;
| 
| 	/* Number of characters read into yy_ch_buf, not including EOB
| 	 * characters.
| 	 */
| 	int yy_n_chars;
| 
| 	/* Whether we "own" the buffer - i.e., we know we created it,
| 	 * and can realloc() it to grow it, and should free() it to
| 	 * delete it.
| 	 */
| 	int yy_is_our_buffer;
| 
| 	/* Whether this is an "interactive" input source; if so, and
| 	 * if we're using stdio for input, then we want to use getc()
| 	 * instead of fread(), to make sure we stop fetching input after
| 	 * each newline.
| 	 */
| 	int yy_is_interactive;
| 
| 	/* Whether we're considered to be at the beginning of a line.
| 	 * If so, '^' rules will be active on the next match, otherwise
| 	 * not.
| 	 */
| 	int yy_at_bol;
| 
|     int yy_bs_lineno; /**< The line count. */
|     int yy_bs_column; /**< The column count. */
|     
| 	/* Whether to try to fill the input buffer when we reach the
| 	 * end of it.
| 	 */
| 	int yy_fill_buffer;
| 
| 	int yy_buffer_status;
| 
| #define YY_BUFFER_NEW 0
| #define YY_BUFFER_NORMAL 1
| 	/* When an EOF's been seen but there's still some text to process
| 	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
| 	 * shouldn't try reading from the input source any more.  We might
| 	 * still have a bunch of tokens to match, though, because of
| 	 * possible backing-up.
| 	 *
| 	 * When we actually see the EOF, we change the status to "new"
| 	 * (via yyrestart()), so that the user can continue scanning by
| 	 * just pointing yyin at a new input file.
| 	 */
| #define YY_BUFFER_EOF_PENDING 2
| 
| 	};
| #endif /* !YY_STRUCT_YY_BUFFER_STATE */
| 
| /* Stack of input buffers. */
| static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
| static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
| static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */
| 
| /* We provide macros for accessing buffer states in case in the
|  * future we want to put the buffer states in a more general
|  * "scanner state".
|  *
|  * Returns the top of the stack, or NULL.
|  */
| #define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
|                           ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
|                           : NULL)
| 
| /* Same as previous macro, but useful when we know that the buffer stack is not
|  * NULL or when we need an lvalue. For internal use only.
|  */
| #define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]
| 
| /* yy_hold_char holds the character lost when yytext is formed. */
| static char yy_hold_char;
| static int yy_n_chars;		/* number of characters read into yy_ch_buf */
| int yyleng;
| 
| /* Points to current character in buffer. */
| static char *yy_c_buf_p = (char *) 0;
| static int yy_init = 0;		/* whether we need to initialize */
| static int yy_start = 0;	/* start state number */
| 
| /* Flag which is used to allow yywrap()'s to do buffer switches
|  * instead of setting up a fresh yyin.  A bit of a hack ...
|  */
| static int yy_did_buffer_switch_on_eof;
| 
| void yyrestart (FILE *input_file  );
| void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
| YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
| void yy_delete_buffer (YY_BUFFER_STATE b  );
| void yy_flush_buffer (YY_BUFFER_STATE b  );
| void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
| void yypop_buffer_state (void );
| 
| static void yyensure_buffer_stack (void );
| static void yy_load_buffer_state (void );
| static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );
| 
| #define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )
| 
| YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
| YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
| YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );
| 
| void *yyalloc (yy_size_t  );
| void *yyrealloc (void *,yy_size_t  );
| void yyfree (void *  );
| 
| #define yy_new_buffer yy_create_buffer
| 
| #define yy_set_interactive(is_interactive) \
| 	{ \
| 	if ( ! YY_CURRENT_BUFFER ){ \
|         yyensure_buffer_stack (); \
| 		YY_CURRENT_BUFFER_LVALUE =    \
|             yy_create_buffer(yyin,YY_BUF_SIZE ); \
| 	} \
| 	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
| 	}
| 
| #define yy_set_bol(at_bol) \
| 	{ \
| 	if ( ! YY_CURRENT_BUFFER ){\
|         yyensure_buffer_stack (); \
| 		YY_CURRENT_BUFFER_LVALUE =    \
|             yy_create_buffer(yyin,YY_BUF_SIZE ); \
| 	} \
| 	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
| 	}
| 
| #define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)
| 
| /* Begin user sect3 */
| 
| typedef unsigned char YY_CHAR;
| 
| FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
| 
| typedef int yy_state_type;
| 
| extern int yylineno;
| 
| int yylineno = 1;
| 
| extern char *yytext;
| #define yytext_ptr yytext
| 
| static yy_state_type yy_get_previous_state (void );
| static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
| static int yy_get_next_buffer (void );
| static void yy_fatal_error (yyconst char msg[]  );
| 
| /* Done after the current pattern has been matched and before the
|  * corresponding action - sets up yytext.
|  */
| #define YY_DO_BEFORE_ACTION \
| 	(yytext_ptr) = yy_bp; \
| 	(yytext_ptr) -= (yy_more_len); \
| 	yyleng = (size_t) (yy_cp - (yytext_ptr)); \
| 	(yy_hold_char) = *yy_cp; \
| 	*yy_cp = '\0'; \
| 	(yy_c_buf_p) = yy_cp;
| 
| #define YY_NUM_RULES 8
| #define YY_END_OF_BUFFER 9
| /* This struct is not used in this scanner,
|    but its presence is necessary. */
| struct yy_trans_info
| 	{
| 	flex_int32_t yy_verify;
| 	flex_int32_t yy_nxt;
| 	};
| static yyconst flex_int16_t yy_acclist[23] =
|     {   0,
|         9,    7,    8,    8,    1,    7,    8,    2,    7,    8,
|         3,    7,    8,    4,    7,    8,    5,    7,    8,    6,
|         7,    8
|     } ;
| 
| static yyconst flex_int16_t yy_accept[14] =
|     {   0,
|         1,    1,    1,    2,    4,    5,    8,   11,   14,   17,
|        20,   23,   23
|     } ;
| 
| static yyconst flex_int32_t yy_ec[256] =
|     {   0,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    3,    4,    5,    6,
| 
|         7,    8,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
| 
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1
|     } ;
| 
| static yyconst flex_int32_t yy_meta[9] =
|     {   0,
|         1,    1,    1,    1,    1,    1,    1,    1
|     } ;
| 
| static yyconst flex_int16_t yy_base[13] =
|     {   0,
|         0,    0,    9,   10,   10,   10,   10,   10,   10,   10,
|        10,   10
|     } ;
| 
| static yyconst flex_int16_t yy_def[13] =
|     {   0,
|        12,    1,   12,   12,   12,   12,   12,   12,   12,   12,
|        12,    0
|     } ;
| 
| static yyconst flex_int16_t yy_nxt[19] =
|     {   0,
|         4,    5,    6,    7,    8,    9,   10,   11,   12,    3,
|        12,   12,   12,   12,   12,   12,   12,   12
|     } ;
| 
| static yyconst flex_int16_t yy_chk[19] =
|     {   0,
|         1,    1,    1,    1,    1,    1,    1,    1,    3,   12,
|        12,   12,   12,   12,   12,   12,   12,   12
|     } ;
| 
| extern int yy_flex_debug;
| int yy_flex_debug = 0;
| 
| static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
| static char *yy_full_match;
| static int yy_lp;
| #define REJECT \
| { \
| *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
| yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
| ++(yy_lp); \
| goto find_rule; \
| }
| 
| static int yy_more_flag = 0;
| static int yy_more_len = 0;
| #define yymore() ((yy_more_flag) = 1)
| #define YY_MORE_ADJ (yy_more_len)
| #define YY_RESTORE_YY_MORE_OFFSET
| char *yytext;
| #line 1 "conftest.l"
| #line 477 "lex.yy.c"
| 
| #define INITIAL 0
| 
| #ifndef YY_NO_UNISTD_H
| /* Special case for "unistd.h", since it is non-ANSI. We include it way
|  * down here because we want the user's section 1 to have been scanned first.
|  * The user has a chance to override it with an option.
|  */
| #include <unistd.h>
| #endif
| 
| #ifndef YY_EXTRA_TYPE
| #define YY_EXTRA_TYPE void *
| #endif
| 
| static int yy_init_globals (void );
| 
| /* Accessor methods to globals.
|    These are made visible to non-reentrant scanners for convenience. */
| 
| int yylex_destroy (void );
| 
| int yyget_debug (void );
| 
| void yyset_debug (int debug_flag  );
| 
| YY_EXTRA_TYPE yyget_extra (void );
| 
| void yyset_extra (YY_EXTRA_TYPE user_defined  );
| 
| FILE *yyget_in (void );
| 
| void yyset_in  (FILE * in_str  );
| 
| FILE *yyget_out (void );
| 
| void yyset_out  (FILE * out_str  );
| 
| int yyget_leng (void );
| 
| char *yyget_text (void );
| 
| int yyget_lineno (void );
| 
| void yyset_lineno (int line_number  );
| 
| /* Macros after this point can all be overridden by user definitions in
|  * section 1.
|  */
| 
| #ifndef YY_SKIP_YYWRAP
| #ifdef __cplusplus
| extern "C" int yywrap (void );
| #else
| extern int yywrap (void );
| #endif
| #endif
| 
|     static void yyunput (int c,char *buf_ptr  );
|     
| #ifndef yytext_ptr
| static void yy_flex_strncpy (char *,yyconst char *,int );
| #endif
| 
| #ifdef YY_NEED_STRLEN
| static int yy_flex_strlen (yyconst char * );
| #endif
| 
| #ifndef YY_NO_INPUT
| 
| #ifdef __cplusplus
| static int yyinput (void );
| #else
| static int input (void );
| #endif
| 
| #endif
| 
| /* Amount of stuff to slurp up with each read. */
| #ifndef YY_READ_BUF_SIZE
| #ifdef __ia64__
| /* On IA-64, the buffer size is 16k, not 8k */
| #define YY_READ_BUF_SIZE 16384
| #else
| #define YY_READ_BUF_SIZE 8192
| #endif /* __ia64__ */
| #endif
| 
| /* Copy whatever the last rule matched to the standard output. */
| #ifndef ECHO
| /* This used to be an fputs(), but since the string might contain NUL's,
|  * we now use fwrite().
|  */
| #define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
| #endif
| 
| /* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
|  * is returned in "result".
|  */
| #ifndef YY_INPUT
| #define YY_INPUT(buf,result,max_size) \
| 	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
| 		{ \
| 		int c = '*'; \
| 		size_t n; \
| 		for ( n = 0; n < max_size && \
| 			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
| 			buf[n] = (char) c; \
| 		if ( c == '\n' ) \
| 			buf[n++] = (char) c; \
| 		if ( c == EOF && ferror( yyin ) ) \
| 			YY_FATAL_ERROR( "input in flex scanner failed" ); \
| 		result = n; \
| 		} \
| 	else \
| 		{ \
| 		errno=0; \
| 		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
| 			{ \
| 			if( errno != EINTR) \
| 				{ \
| 				YY_FATAL_ERROR( "input in flex scanner failed" ); \
| 				break; \
| 				} \
| 			errno=0; \
| 			clearerr(yyin); \
| 			} \
| 		}\
| \
| 
| #endif
| 
| /* No semi-colon after return; correct usage is to write "yyterminate();" -
|  * we don't want an extra ';' after the "return" because that will cause
|  * some compilers to complain about unreachable statements.
|  */
| #ifndef yyterminate
| #define yyterminate() return YY_NULL
| #endif
| 
| /* Number of entries by which start-condition stack grows. */
| #ifndef YY_START_STACK_INCR
| #define YY_START_STACK_INCR 25
| #endif
| 
| /* Report a fatal error. */
| #ifndef YY_FATAL_ERROR
| #define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
| #endif
| 
| /* end tables serialization structures and prototypes */
| 
| /* Default declaration of generated scanner - a define so the user can
|  * easily add parameters.
|  */
| #ifndef YY_DECL
| #define YY_DECL_IS_OURS 1
| 
| extern int yylex (void);
| 
| #define YY_DECL int yylex (void)
| #endif /* !YY_DECL */
| 
| /* Code executed at the beginning of each rule, after yytext and yyleng
|  * have been set up.
|  */
| #ifndef YY_USER_ACTION
| #define YY_USER_ACTION
| #endif
| 
| /* Code executed at the end of each rule. */
| #ifndef YY_BREAK
| #define YY_BREAK break;
| #endif
| 
| #define YY_RULE_SETUP \
| 	YY_USER_ACTION
| 
| /** The main scanner function which does all the work.
|  */
| YY_DECL
| {
| 	register yy_state_type yy_current_state;
| 	register char *yy_cp, *yy_bp;
| 	register int yy_act;
|     
| #line 1 "conftest.l"
| 
| #line 666 "lex.yy.c"
| 
| 	if ( !(yy_init) )
| 		{
| 		(yy_init) = 1;
| 
| #ifdef YY_USER_INIT
| 		YY_USER_INIT;
| #endif
| 
|         /* Create the reject buffer large enough to save one state per allowed character. */
|         if ( ! (yy_state_buf) )
|             (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
|             if ( ! (yy_state_buf) )
|                 YY_FATAL_ERROR( "out of dynamic memory in yylex()" );
| 
| 		if ( ! (yy_start) )
| 			(yy_start) = 1;	/* first start state */
| 
| 		if ( ! yyin )
| 			yyin = stdin;
| 
| 		if ( ! yyout )
| 			yyout = stdout;
| 
| 		if ( ! YY_CURRENT_BUFFER ) {
| 			yyensure_buffer_stack ();
| 			YY_CURRENT_BUFFER_LVALUE =
| 				yy_create_buffer(yyin,YY_BUF_SIZE );
| 		}
| 
| 		yy_load_buffer_state( );
| 		}
| 
| 	while ( 1 )		/* loops until end-of-file is reached */
| 		{
| 		(yy_more_len) = 0;
| 		if ( (yy_more_flag) )
| 			{
| 			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
| 			(yy_more_flag) = 0;
| 			}
| 		yy_cp = (yy_c_buf_p);
| 
| 		/* Support of yytext. */
| 		*yy_cp = (yy_hold_char);
| 
| 		/* yy_bp points to the position in yy_ch_buf of the start of
| 		 * the current run.
| 		 */
| 		yy_bp = yy_cp;
| 
| 		yy_current_state = (yy_start);
| 
| 		(yy_state_ptr) = (yy_state_buf);
| 		*(yy_state_ptr)++ = yy_current_state;
| 
| yy_match:
| 		do
| 			{
| 			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
| 			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
| 				{
| 				yy_current_state = (int) yy_def[yy_current_state];
| 				if ( yy_current_state >= 13 )
| 					yy_c = yy_meta[(unsigned int) yy_c];
| 				}
| 			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
| 			*(yy_state_ptr)++ = yy_current_state;
| 			++yy_cp;
| 			}
| 		while ( yy_base[yy_current_state] != 10 );
| 
| yy_find_action:
| 		yy_current_state = *--(yy_state_ptr);
| 		(yy_lp) = yy_accept[yy_current_state];
| find_rule: /* we branch to this label when backing up */
| 		for ( ; ; ) /* until we find what rule we matched */
| 			{
| 			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
| 				{
| 				yy_act = yy_acclist[(yy_lp)];
| 					{
| 					(yy_full_match) = yy_cp;
| 					break;
| 					}
| 				}
| 			--yy_cp;
| 			yy_current_state = *--(yy_state_ptr);
| 			(yy_lp) = yy_accept[yy_current_state];
| 			}
| 
| 		YY_DO_BEFORE_ACTION;
| 
| do_action:	/* This label is used only to access EOF actions. */
| 
| 		switch ( yy_act )
| 	{ /* beginning of action switch */
| case 1:
| YY_RULE_SETUP
| #line 2 "conftest.l"
| { ECHO; }
| 	YY_BREAK
| case 2:
| YY_RULE_SETUP
| #line 3 "conftest.l"
| { REJECT; }
| 	YY_BREAK
| case 3:
| YY_RULE_SETUP
| #line 4 "conftest.l"
| { yymore (); }
| 	YY_BREAK
| case 4:
| YY_RULE_SETUP
| #line 5 "conftest.l"
| { yyless (1); }
| 	YY_BREAK
| case 5:
| YY_RULE_SETUP
| #line 6 "conftest.l"
| { yyless (input () != 0); }
| 	YY_BREAK
| case 6:
| YY_RULE_SETUP
| #line 7 "conftest.l"
| { unput (yytext[0]); }
| 	YY_BREAK
| case 7:
| YY_RULE_SETUP
| #line 8 "conftest.l"
| { BEGIN INITIAL; }
| 	YY_BREAK
| case 8:
| YY_RULE_SETUP
| #line 9 "conftest.l"
| ECHO;
| 	YY_BREAK
| #line 804 "lex.yy.c"
| 			case YY_STATE_EOF(INITIAL):
| 				yyterminate();
| 
| 	case YY_END_OF_BUFFER:
| 		{
| 		/* Amount of text matched not including the EOB char. */
| 		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;
| 
| 		/* Undo the effects of YY_DO_BEFORE_ACTION. */
| 		*yy_cp = (yy_hold_char);
| 		YY_RESTORE_YY_MORE_OFFSET
| 
| 		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
| 			{
| 			/* We're scanning a new file or input source.  It's
| 			 * possible that this happened because the user
| 			 * just pointed yyin at a new source and called
| 			 * yylex().  If so, then we have to assure
| 			 * consistency between YY_CURRENT_BUFFER and our
| 			 * globals.  Here is the right place to do so, because
| 			 * this is the first action (other than possibly a
| 			 * back-up) that will match for the new input source.
| 			 */
| 			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
| 			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
| 			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
| 			}
| 
| 		/* Note that here we test for yy_c_buf_p "<=" to the position
| 		 * of the first EOB in the buffer, since yy_c_buf_p will
| 		 * already have been incremented past the NUL character
| 		 * (since all states make transitions on EOB to the
| 		 * end-of-buffer state).  Contrast this with the test
| 		 * in input().
| 		 */
| 		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
| 			{ /* This was really a NUL. */
| 			yy_state_type yy_next_state;
| 
| 			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;
| 
| 			yy_current_state = yy_get_previous_state(  );
| 
| 			/* Okay, we're now positioned to make the NUL
| 			 * transition.  We couldn't have
| 			 * yy_get_previous_state() go ahead and do it
| 			 * for us because it doesn't know how to deal
| 			 * with the possibility of jamming (and we don't
| 			 * want to build jamming into it because then it
| 			 * will run more slowly).
| 			 */
| 
| 			yy_next_state = yy_try_NUL_trans( yy_current_state );
| 
| 			yy_bp = (yytext_ptr) + YY_MORE_ADJ;
| 
| 			if ( yy_next_state )
| 				{
| 				/* Consume the NUL. */
| 				yy_cp = ++(yy_c_buf_p);
| 				yy_current_state = yy_next_state;
| 				goto yy_match;
| 				}
| 
| 			else
| 				{
| 				yy_cp = (yy_c_buf_p);
| 				goto yy_find_action;
| 				}
| 			}
| 
| 		else switch ( yy_get_next_buffer(  ) )
| 			{
| 			case EOB_ACT_END_OF_FILE:
| 				{
| 				(yy_did_buffer_switch_on_eof) = 0;
| 
| 				if ( yywrap( ) )
| 					{
| 					/* Note: because we've taken care in
| 					 * yy_get_next_buffer() to have set up
| 					 * yytext, we can now set up
| 					 * yy_c_buf_p so that if some total
| 					 * hoser (like flex itself) wants to
| 					 * call the scanner after we return the
| 					 * YY_NULL, it'll still work - another
| 					 * YY_NULL will get returned.
| 					 */
| 					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;
| 
| 					yy_act = YY_STATE_EOF(YY_START);
| 					goto do_action;
| 					}
| 
| 				else
| 					{
| 					if ( ! (yy_did_buffer_switch_on_eof) )
| 						YY_NEW_FILE;
| 					}
| 				break;
| 				}
| 
| 			case EOB_ACT_CONTINUE_SCAN:
| 				(yy_c_buf_p) =
| 					(yytext_ptr) + yy_amount_of_matched_text;
| 
| 				yy_current_state = yy_get_previous_state(  );
| 
| 				yy_cp = (yy_c_buf_p);
| 				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
| 				goto yy_match;
| 
| 			case EOB_ACT_LAST_MATCH:
| 				(yy_c_buf_p) =
| 				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];
| 
| 				yy_current_state = yy_get_previous_state(  );
| 
| 				yy_cp = (yy_c_buf_p);
| 				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
| 				goto yy_find_action;
| 			}
| 		break;
| 		}
| 
| 	default:
| 		YY_FATAL_ERROR(
| 			"fatal flex scanner internal error--no action found" );
| 	} /* end of action switch */
| 		} /* end of scanning one token */
| } /* end of yylex */
| 
| /* yy_get_next_buffer - try to read in a new buffer
|  *
|  * Returns a code representing an action:
|  *	EOB_ACT_LAST_MATCH -
|  *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
|  *	EOB_ACT_END_OF_FILE - end of file
|  */
| static int yy_get_next_buffer (void)
| {
|     	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
| 	register char *source = (yytext_ptr);
| 	register int number_to_move, i;
| 	int ret_val;
| 
| 	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
| 		YY_FATAL_ERROR(
| 		"fatal flex scanner internal error--end of buffer missed" );
| 
| 	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
| 		{ /* Don't try to fill the buffer, so this is an EOF. */
| 		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
| 			{
| 			/* We matched a single character, the EOB, so
| 			 * treat this as a final EOF.
| 			 */
| 			return EOB_ACT_END_OF_FILE;
| 			}
| 
| 		else
| 			{
| 			/* We matched some text prior to the EOB, first
| 			 * process it.
| 			 */
| 			return EOB_ACT_LAST_MATCH;
| 			}
| 		}
| 
| 	/* Try to read more data. */
| 
| 	/* First move last chars to start of buffer. */
| 	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;
| 
| 	for ( i = 0; i < number_to_move; ++i )
| 		*(dest++) = *(source++);
| 
| 	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
| 		/* don't do the read, it's not guaranteed to return an EOF,
| 		 * just force an EOF
| 		 */
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;
| 
| 	else
| 		{
| 			int num_to_read =
| 			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
| 
| 		while ( num_to_read <= 0 )
| 			{ /* Not enough room in the buffer - grow it. */
| 
| 			YY_FATAL_ERROR(
| "input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
| 
| 			}
| 
| 		if ( num_to_read > YY_READ_BUF_SIZE )
| 			num_to_read = YY_READ_BUF_SIZE;
| 
| 		/* Read in more data. */
| 		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
| 			(yy_n_chars), (size_t) num_to_read );
| 
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
| 		}
| 
| 	if ( (yy_n_chars) == 0 )
| 		{
| 		if ( number_to_move == YY_MORE_ADJ )
| 			{
| 			ret_val = EOB_ACT_END_OF_FILE;
| 			yyrestart(yyin  );
| 			}
| 
| 		else
| 			{
| 			ret_val = EOB_ACT_LAST_MATCH;
| 			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
| 				YY_BUFFER_EOF_PENDING;
| 			}
| 		}
| 
| 	else
| 		ret_val = EOB_ACT_CONTINUE_SCAN;
| 
| 	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
| 		/* Extend the array by 50%, plus the number we really need. */
| 		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
| 		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
| 		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
| 			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
| 	}
| 
| 	(yy_n_chars) += number_to_move;
| 	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
| 	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;
| 
| 	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];
| 
| 	return ret_val;
| }
| 
| /* yy_get_previous_state - get the state just before the EOB char was reached */
| 
|     static yy_state_type yy_get_previous_state (void)
| {
| 	register yy_state_type yy_current_state;
| 	register char *yy_cp;
|     
| 	yy_current_state = (yy_start);
| 
| 	(yy_state_ptr) = (yy_state_buf);
| 	*(yy_state_ptr)++ = yy_current_state;
| 
| 	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
| 		{
| 		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
| 		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
| 			{
| 			yy_current_state = (int) yy_def[yy_current_state];
| 			if ( yy_current_state >= 13 )
| 				yy_c = yy_meta[(unsigned int) yy_c];
| 			}
| 		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
| 		*(yy_state_ptr)++ = yy_current_state;
| 		}
| 
| 	return yy_current_state;
| }
| 
| /* yy_try_NUL_trans - try to make a transition on the NUL character
|  *
|  * synopsis
|  *	next_state = yy_try_NUL_trans( current_state );
|  */
|     static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
| {
| 	register int yy_is_jam;
|     
| 	register YY_CHAR yy_c = 1;
| 	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
| 		{
| 		yy_current_state = (int) yy_def[yy_current_state];
| 		if ( yy_current_state >= 13 )
| 			yy_c = yy_meta[(unsigned int) yy_c];
| 		}
| 	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
| 	yy_is_jam = (yy_current_state == 12);
| 	if ( ! yy_is_jam )
| 		*(yy_state_ptr)++ = yy_current_state;
| 
| 	return yy_is_jam ? 0 : yy_current_state;
| }
| 
|     static void yyunput (int c, register char * yy_bp )
| {
| 	register char *yy_cp;
|     
|     yy_cp = (yy_c_buf_p);
| 
| 	/* undo effects of setting up yytext */
| 	*yy_cp = (yy_hold_char);
| 
| 	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
| 		{ /* need to shift things up to make room */
| 		/* +2 for EOB chars. */
| 		register int number_to_move = (yy_n_chars) + 2;
| 		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
| 					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
| 		register char *source =
| 				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];
| 
| 		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
| 			*--dest = *--source;
| 
| 		yy_cp += (int) (dest - source);
| 		yy_bp += (int) (dest - source);
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
| 			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;
| 
| 		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
| 			YY_FATAL_ERROR( "flex scanner push-back overflow" );
| 		}
| 
| 	*--yy_cp = (char) c;
| 
| 	(yytext_ptr) = yy_bp;
| 	(yy_hold_char) = *yy_cp;
| 	(yy_c_buf_p) = yy_cp;
| }
| 
| #ifndef YY_NO_INPUT
| #ifdef __cplusplus
|     static int yyinput (void)
| #else
|     static int input  (void)
| #endif
| 
| {
| 	int c;
|     
| 	*(yy_c_buf_p) = (yy_hold_char);
| 
| 	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
| 		{
| 		/* yy_c_buf_p now points to the character we want to return.
| 		 * If this occurs *before* the EOB characters, then it's a
| 		 * valid NUL; if not, then we've hit the end of the buffer.
| 		 */
| 		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
| 			/* This was really a NUL. */
| 			*(yy_c_buf_p) = '\0';
| 
| 		else
| 			{ /* need more input */
| 			int offset = (yy_c_buf_p) - (yytext_ptr);
| 			++(yy_c_buf_p);
| 
| 			switch ( yy_get_next_buffer(  ) )
| 				{
| 				case EOB_ACT_LAST_MATCH:
| 					/* This happens because yy_g_n_b()
| 					 * sees that we've accumulated a
| 					 * token and flags that we need to
| 					 * try matching the token before
| 					 * proceeding.  But for input(),
| 					 * there's no matching to consider.
| 					 * So convert the EOB_ACT_LAST_MATCH
| 					 * to EOB_ACT_END_OF_FILE.
| 					 */
| 
| 					/* Reset buffer status. */
| 					yyrestart(yyin );
| 
| 					/*FALLTHROUGH*/
| 
| 				case EOB_ACT_END_OF_FILE:
| 					{
| 					if ( yywrap( ) )
| 						return EOF;
| 
| 					if ( ! (yy_did_buffer_switch_on_eof) )
| 						YY_NEW_FILE;
| #ifdef __cplusplus
| 					return yyinput();
| #else
| 					return input();
| #endif
| 					}
| 
| 				case EOB_ACT_CONTINUE_SCAN:
| 					(yy_c_buf_p) = (yytext_ptr) + offset;
| 					break;
| 				}
| 			}
| 		}
| 
| 	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
| 	*(yy_c_buf_p) = '\0';	/* preserve yytext */
| 	(yy_hold_char) = *++(yy_c_buf_p);
| 
| 	return c;
| }
| #endif	/* ifndef YY_NO_INPUT */
| 
| /** Immediately switch to a different input stream.
|  * @param input_file A readable stream.
|  * 
|  * @note This function does not reset the start condition to @c INITIAL .
|  */
|     void yyrestart  (FILE * input_file )
| {
|     
| 	if ( ! YY_CURRENT_BUFFER ){
|         yyensure_buffer_stack ();
| 		YY_CURRENT_BUFFER_LVALUE =
|             yy_create_buffer(yyin,YY_BUF_SIZE );
| 	}
| 
| 	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
| 	yy_load_buffer_state( );
| }
| 
| /** Switch to a different input buffer.
|  * @param new_buffer The new input buffer.
|  * 
|  */
|     void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
| {
|     
| 	/* TODO. We should be able to replace this entire function body
| 	 * with
| 	 *		yypop_buffer_state();
| 	 *		yypush_buffer_state(new_buffer);
|      */
| 	yyensure_buffer_stack ();
| 	if ( YY_CURRENT_BUFFER == new_buffer )
| 		return;
| 
| 	if ( YY_CURRENT_BUFFER )
| 		{
| 		/* Flush out information for old buffer. */
| 		*(yy_c_buf_p) = (yy_hold_char);
| 		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
| 		}
| 
| 	YY_CURRENT_BUFFER_LVALUE = new_buffer;
| 	yy_load_buffer_state( );
| 
| 	/* We don't actually know whether we did this switch during
| 	 * EOF (yywrap()) processing, but the only time this flag
| 	 * is looked at is after yywrap() is called, so it's safe
| 	 * to go ahead and always set it.
| 	 */
| 	(yy_did_buffer_switch_on_eof) = 1;
| }
| 
| static void yy_load_buffer_state  (void)
| {
|     	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
| 	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
| 	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
| 	(yy_hold_char) = *(yy_c_buf_p);
| }
| 
| /** Allocate and initialize an input buffer state.
|  * @param file A readable stream.
|  * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
|  * 
|  * @return the allocated buffer state.
|  */
|     YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
| {
| 	YY_BUFFER_STATE b;
|     
| 	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
| 	if ( ! b )
| 		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
| 
| 	b->yy_buf_size = size;
| 
| 	/* yy_ch_buf has to be 2 characters longer than the size given because
| 	 * we need to put in 2 end-of-buffer characters.
| 	 */
| 	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
| 	if ( ! b->yy_ch_buf )
| 		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
| 
| 	b->yy_is_our_buffer = 1;
| 
| 	yy_init_buffer(b,file );
| 
| 	return b;
| }
| 
| /** Destroy the buffer.
|  * @param b a buffer created with yy_create_buffer()
|  * 
|  */
|     void yy_delete_buffer (YY_BUFFER_STATE  b )
| {
|     
| 	if ( ! b )
| 		return;
| 
| 	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
| 		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;
| 
| 	if ( b->yy_is_our_buffer )
| 		yyfree((void *) b->yy_ch_buf  );
| 
| 	yyfree((void *) b  );
| }
| 
| #ifndef __cplusplus
| extern int isatty (int );
| #endif /* __cplusplus */
|     
| /* Initializes or reinitializes a buffer.
|  * This function is sometimes called more than once on the same buffer,
|  * such as during a yyrestart() or at EOF.
|  */
|     static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
| 
| {
| 	int oerrno = errno;
|     
| 	yy_flush_buffer(b );
| 
| 	b->yy_input_file = file;
| 	b->yy_fill_buffer = 1;
| 
|     /* If b is the current buffer, then yy_init_buffer was _probably_
|      * called from yyrestart() or through yy_get_next_buffer.
|      * In that case, we don't want to reset the lineno or column.
|      */
|     if (b != YY_CURRENT_BUFFER){
|         b->yy_bs_lineno = 1;
|         b->yy_bs_column = 0;
|     }
| 
|         b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
|     
| 	errno = oerrno;
| }
| 
| /** Discard all buffered characters. On the next scan, YY_INPUT will be called.
|  * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
|  * 
|  */
|     void yy_flush_buffer (YY_BUFFER_STATE  b )
| {
|     	if ( ! b )
| 		return;
| 
| 	b->yy_n_chars = 0;
| 
| 	/* We always need two end-of-buffer characters.  The first causes
| 	 * a transition to the end-of-buffer state.  The second causes
| 	 * a jam in that state.
| 	 */
| 	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
| 	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
| 
| 	b->yy_buf_pos = &b->yy_ch_buf[0];
| 
| 	b->yy_at_bol = 1;
| 	b->yy_buffer_status = YY_BUFFER_NEW;
| 
| 	if ( b == YY_CURRENT_BUFFER )
| 		yy_load_buffer_state( );
| }
| 
| /** Pushes the new state onto the stack. The new state becomes
|  *  the current state. This function will allocate the stack
|  *  if necessary.
|  *  @param new_buffer The new state.
|  *  
|  */
| void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
| {
|     	if (new_buffer == NULL)
| 		return;
| 
| 	yyensure_buffer_stack();
| 
| 	/* This block is copied from yy_switch_to_buffer. */
| 	if ( YY_CURRENT_BUFFER )
| 		{
| 		/* Flush out information for old buffer. */
| 		*(yy_c_buf_p) = (yy_hold_char);
| 		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
| 		}
| 
| 	/* Only push if top exists. Otherwise, replace top. */
| 	if (YY_CURRENT_BUFFER)
| 		(yy_buffer_stack_top)++;
| 	YY_CURRENT_BUFFER_LVALUE = new_buffer;
| 
| 	/* copied from yy_switch_to_buffer. */
| 	yy_load_buffer_state( );
| 	(yy_did_buffer_switch_on_eof) = 1;
| }
| 
| /** Removes and deletes the top of the stack, if present.
|  *  The next element becomes the new top.
|  *  
|  */
| void yypop_buffer_state (void)
| {
|     	if (!YY_CURRENT_BUFFER)
| 		return;
| 
| 	yy_delete_buffer(YY_CURRENT_BUFFER );
| 	YY_CURRENT_BUFFER_LVALUE = NULL;
| 	if ((yy_buffer_stack_top) > 0)
| 		--(yy_buffer_stack_top);
| 
| 	if (YY_CURRENT_BUFFER) {
| 		yy_load_buffer_state( );
| 		(yy_did_buffer_switch_on_eof) = 1;
| 	}
| }
| 
| /* Allocates the stack if it does not exist.
|  *  Guarantees space for at least one push.
|  */
| static void yyensure_buffer_stack (void)
| {
| 	int num_to_alloc;
|     
| 	if (!(yy_buffer_stack)) {
| 
| 		/* First allocation is just for 2 elements, since we don't know if this
| 		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
| 		 * immediate realloc on the next call.
|          */
| 		num_to_alloc = 1;
| 		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
| 								(num_to_alloc * sizeof(struct yy_buffer_state*)
| 								);
| 		if ( ! (yy_buffer_stack) )
| 			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
| 								  
| 		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
| 				
| 		(yy_buffer_stack_max) = num_to_alloc;
| 		(yy_buffer_stack_top) = 0;
| 		return;
| 	}
| 
| 	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){
| 
| 		/* Increase the buffer to prepare for a possible push. */
| 		int grow_size = 8 /* arbitrary grow size */;
| 
| 		num_to_alloc = (yy_buffer_stack_max) + grow_size;
| 		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
| 								((yy_buffer_stack),
| 								num_to_alloc * sizeof(struct yy_buffer_state*)
| 								);
| 		if ( ! (yy_buffer_stack) )
| 			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
| 
| 		/* zero only the new slots.*/
| 		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
| 		(yy_buffer_stack_max) = num_to_alloc;
| 	}
| }
| 
| /** Setup the input buffer state to scan directly from a user-specified character buffer.
|  * @param base the character buffer
|  * @param size the size in bytes of the character buffer
|  * 
|  * @return the newly allocated buffer state object. 
|  */
| YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
| {
| 	YY_BUFFER_STATE b;
|     
| 	if ( size < 2 ||
| 	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
| 	     base[size-1] != YY_END_OF_BUFFER_CHAR )
| 		/* They forgot to leave room for the EOB's. */
| 		return 0;
| 
| 	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
| 	if ( ! b )
| 		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
| 
| 	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
| 	b->yy_buf_pos = b->yy_ch_buf = base;
| 	b->yy_is_our_buffer = 0;
| 	b->yy_input_file = 0;
| 	b->yy_n_chars = b->yy_buf_size;
| 	b->yy_is_interactive = 0;
| 	b->yy_at_bol = 1;
| 	b->yy_fill_buffer = 0;
| 	b->yy_buffer_status = YY_BUFFER_NEW;
| 
| 	yy_switch_to_buffer(b  );
| 
| 	return b;
| }
| 
| /** Setup the input buffer state to scan a string. The next call to yylex() will
|  * scan from a @e copy of @a str.
|  * @param yystr a NUL-terminated string to scan
|  * 
|  * @return the newly allocated buffer state object.
|  * @note If you want to scan bytes that may contain NUL values, then use
|  *       yy_scan_bytes() instead.
|  */
| YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
| {
|     
| 	return yy_scan_bytes(yystr,strlen(yystr) );
| }
| 
| /** Setup the input buffer state to scan the given bytes. The next call to yylex() will
|  * scan from a @e copy of @a bytes.
|  * @param yybytes the byte buffer to scan
|  * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
|  * 
|  * @return the newly allocated buffer state object.
|  */
| YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
| {
| 	YY_BUFFER_STATE b;
| 	char *buf;
| 	yy_size_t n;
| 	int i;
|     
| 	/* Get memory for full buffer, including space for trailing EOB's. */
| 	n = _yybytes_len + 2;
| 	buf = (char *) yyalloc(n  );
| 	if ( ! buf )
| 		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
| 
| 	for ( i = 0; i < _yybytes_len; ++i )
| 		buf[i] = yybytes[i];
| 
| 	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;
| 
| 	b = yy_scan_buffer(buf,n );
| 	if ( ! b )
| 		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
| 
| 	/* It's okay to grow etc. this buffer, and we should throw it
| 	 * away when we're done.
| 	 */
| 	b->yy_is_our_buffer = 1;
| 
| 	return b;
| }
| 
| #ifndef YY_EXIT_FAILURE
| #define YY_EXIT_FAILURE 2
| #endif
| 
| static void yy_fatal_error (yyconst char* msg )
| {
|     	(void) fprintf( stderr, "%s\n", msg );
| 	exit( YY_EXIT_FAILURE );
| }
| 
| /* Redefine yyless() so it works in section 3 code. */
| 
| #undef yyless
| #define yyless(n) \
| 	do \
| 		{ \
| 		/* Undo effects of setting up yytext. */ \
|         int yyless_macro_arg = (n); \
|         YY_LESS_LINENO(yyless_macro_arg);\
| 		yytext[yyleng] = (yy_hold_char); \
| 		(yy_c_buf_p) = yytext + yyless_macro_arg; \
| 		(yy_hold_char) = *(yy_c_buf_p); \
| 		*(yy_c_buf_p) = '\0'; \
| 		yyleng = yyless_macro_arg; \
| 		} \
| 	while ( 0 )
| 
| /* Accessor  methods (get/set functions) to struct members. */
| 
| /** Get the current line number.
|  * 
|  */
| int yyget_lineno  (void)
| {
|         
|     return yylineno;
| }
| 
| /** Get the input stream.
|  * 
|  */
| FILE *yyget_in  (void)
| {
|         return yyin;
| }
| 
| /** Get the output stream.
|  * 
|  */
| FILE *yyget_out  (void)
| {
|         return yyout;
| }
| 
| /** Get the length of the current token.
|  * 
|  */
| int yyget_leng  (void)
| {
|         return yyleng;
| }
| 
| /** Get the current token.
|  * 
|  */
| 
| char *yyget_text  (void)
| {
|         return yytext;
| }
| 
| /** Set the current line number.
|  * @param line_number
|  * 
|  */
| void yyset_lineno (int  line_number )
| {
|     
|     yylineno = line_number;
| }
| 
| /** Set the input stream. This does not discard the current
|  * input buffer.
|  * @param in_str A readable stream.
|  * 
|  * @see yy_switch_to_buffer
|  */
| void yyset_in (FILE *  in_str )
| {
|         yyin = in_str ;
| }
| 
| void yyset_out (FILE *  out_str )
| {
|         yyout = out_str ;
| }
| 
| int yyget_debug  (void)
| {
|         return yy_flex_debug;
| }
| 
| void yyset_debug (int  bdebug )
| {
|         yy_flex_debug = bdebug ;
| }
| 
| static int yy_init_globals (void)
| {
|         /* Initialization is the same as for the non-reentrant scanner.
|      * This function is called from yylex_destroy(), so don't allocate here.
|      */
| 
|     (yy_buffer_stack) = 0;
|     (yy_buffer_stack_top) = 0;
|     (yy_buffer_stack_max) = 0;
|     (yy_c_buf_p) = (char *) 0;
|     (yy_init) = 0;
|     (yy_start) = 0;
| 
|     (yy_state_buf) = 0;
|     (yy_state_ptr) = 0;
|     (yy_full_match) = 0;
|     (yy_lp) = 0;
| 
| /* Defined in main.c */
| #ifdef YY_STDINIT
|     yyin = stdin;
|     yyout = stdout;
| #else
|     yyin = (FILE *) 0;
|     yyout = (FILE *) 0;
| #endif
| 
|     /* For future reference: Set errno on error, since we are called by
|      * yylex_init()
|      */
|     return 0;
| }
| 
| /* yylex_destroy is for both reentrant and non-reentrant scanners. */
| int yylex_destroy  (void)
| {
|     
|     /* Pop the buffer stack, destroying each element. */
| 	while(YY_CURRENT_BUFFER){
| 		yy_delete_buffer(YY_CURRENT_BUFFER  );
| 		YY_CURRENT_BUFFER_LVALUE = NULL;
| 		yypop_buffer_state();
| 	}
| 
| 	/* Destroy the stack itself. */
| 	yyfree((yy_buffer_stack) );
| 	(yy_buffer_stack) = NULL;
| 
|     yyfree ( (yy_state_buf) );
|     (yy_state_buf)  = NULL;
| 
|     /* Reset the globals. This is important in a non-reentrant scanner so the next time
|      * yylex() is called, initialization will occur. */
|     yy_init_globals( );
| 
|     return 0;
| }
| 
| /*
|  * Internal utility routines.
|  */
| 
| #ifndef yytext_ptr
| static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
| {
| 	register int i;
| 	for ( i = 0; i < n; ++i )
| 		s1[i] = s2[i];
| }
| #endif
| 
| #ifdef YY_NEED_STRLEN
| static int yy_flex_strlen (yyconst char * s )
| {
| 	register int n;
| 	for ( n = 0; s[n]; ++n )
| 		;
| 
| 	return n;
| }
| #endif
| 
| void *yyalloc (yy_size_t  size )
| {
| 	return (void *) malloc( size );
| }
| 
| void *yyrealloc  (void * ptr, yy_size_t  size )
| {
| 	/* The cast to (char *) in the following accommodates both
| 	 * implementations that use char* generic pointers, and those
| 	 * that use void* generic pointers.  It works with the latter
| 	 * because both ANSI C and C++ allow castless assignment from
| 	 * any pointer type to void*, and deal with argument conversions
| 	 * as though doing an assignment.
| 	 */
| 	return (void *) realloc( (char *) ptr, size );
| }
| 
| void yyfree (void * ptr )
| {
| 	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
| }
| 
| #define YYTABLES_NAME "yytables"
| 
| #line 9 "conftest.l"
| 
| 
| #ifdef YYTEXT_POINTER
| extern char *yytext;
| #endif
| int
| main (void)
| {
|   return ! yylex () + ! yywrap ();
| }
configure:3688: g++ -o conftest -g -O2   conftest.cpp -lfl  >&5
conftest.l: In function 'int yylex()':
conftest.l:6: error: 'input' was not declared in this scope
configure:3694: $? = 1
configure: failed program was:
| 
| #line 3 "lex.yy.c"
| 
| #define  YY_INT_ALIGNED short int
| 
| /* A lexical scanner generated by flex */
| 
| #define FLEX_SCANNER
| #define YY_FLEX_MAJOR_VERSION 2
| #define YY_FLEX_MINOR_VERSION 5
| #define YY_FLEX_SUBMINOR_VERSION 35
| #if YY_FLEX_SUBMINOR_VERSION > 0
| #define FLEX_BETA
| #endif
| 
| /* First, we deal with  platform-specific or compiler-specific issues. */
| 
| /* begin standard C headers. */
| #include <stdio.h>
| #include <string.h>
| #include <errno.h>
| #include <stdlib.h>
| 
| /* end standard C headers. */
| 
| /* flex integer type definitions */
| 
| #ifndef FLEXINT_H
| #define FLEXINT_H
| 
| /* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */
| 
| #if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
| 
| /* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
|  * if you want the limit (max/min) macros for int types. 
|  */
| #ifndef __STDC_LIMIT_MACROS
| #define __STDC_LIMIT_MACROS 1
| #endif
| 
| #include <inttypes.h>
| typedef int8_t flex_int8_t;
| typedef uint8_t flex_uint8_t;
| typedef int16_t flex_int16_t;
| typedef uint16_t flex_uint16_t;
| typedef int32_t flex_int32_t;
| typedef uint32_t flex_uint32_t;
| #else
| typedef signed char flex_int8_t;
| typedef short int flex_int16_t;
| typedef int flex_int32_t;
| typedef unsigned char flex_uint8_t; 
| typedef unsigned short int flex_uint16_t;
| typedef unsigned int flex_uint32_t;
| 
| /* Limits of integral types. */
| #ifndef INT8_MIN
| #define INT8_MIN               (-128)
| #endif
| #ifndef INT16_MIN
| #define INT16_MIN              (-32767-1)
| #endif
| #ifndef INT32_MIN
| #define INT32_MIN              (-2147483647-1)
| #endif
| #ifndef INT8_MAX
| #define INT8_MAX               (127)
| #endif
| #ifndef INT16_MAX
| #define INT16_MAX              (32767)
| #endif
| #ifndef INT32_MAX
| #define INT32_MAX              (2147483647)
| #endif
| #ifndef UINT8_MAX
| #define UINT8_MAX              (255U)
| #endif
| #ifndef UINT16_MAX
| #define UINT16_MAX             (65535U)
| #endif
| #ifndef UINT32_MAX
| #define UINT32_MAX             (4294967295U)
| #endif
| 
| #endif /* ! C99 */
| 
| #endif /* ! FLEXINT_H */
| 
| #ifdef __cplusplus
| 
| /* The "const" storage-class-modifier is valid. */
| #define YY_USE_CONST
| 
| #else	/* ! __cplusplus */
| 
| /* C99 requires __STDC__ to be defined as 1. */
| #if defined (__STDC__)
| 
| #define YY_USE_CONST
| 
| #endif	/* defined (__STDC__) */
| #endif	/* ! __cplusplus */
| 
| #ifdef YY_USE_CONST
| #define yyconst const
| #else
| #define yyconst
| #endif
| 
| /* Returned upon end-of-file. */
| #define YY_NULL 0
| 
| /* Promotes a possibly negative, possibly signed char to an unsigned
|  * integer for use as an array index.  If the signed char is negative,
|  * we want to instead treat it as an 8-bit unsigned char, hence the
|  * double cast.
|  */
| #define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
| 
| /* Enter a start condition.  This macro really ought to take a parameter,
|  * but we do it the disgusting crufty way forced on us by the ()-less
|  * definition of BEGIN.
|  */
| #define BEGIN (yy_start) = 1 + 2 *
| 
| /* Translate the current start state into a value that can be later handed
|  * to BEGIN to return to the state.  The YYSTATE alias is for lex
|  * compatibility.
|  */
| #define YY_START (((yy_start) - 1) / 2)
| #define YYSTATE YY_START
| 
| /* Action number for EOF rule of a given start state. */
| #define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
| 
| /* Special action meaning "start processing a new file". */
| #define YY_NEW_FILE yyrestart(yyin  )
| 
| #define YY_END_OF_BUFFER_CHAR 0
| 
| /* Size of default input buffer. */
| #ifndef YY_BUF_SIZE
| #ifdef __ia64__
| /* On IA-64, the buffer size is 16k, not 8k.
|  * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
|  * Ditto for the __ia64__ case accordingly.
|  */
| #define YY_BUF_SIZE 32768
| #else
| #define YY_BUF_SIZE 16384
| #endif /* __ia64__ */
| #endif
| 
| /* The state buf must be large enough to hold one state per character in the main buffer.
|  */
| #define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))
| 
| #ifndef YY_TYPEDEF_YY_BUFFER_STATE
| #define YY_TYPEDEF_YY_BUFFER_STATE
| typedef struct yy_buffer_state *YY_BUFFER_STATE;
| #endif
| 
| extern int yyleng;
| 
| extern FILE *yyin, *yyout;
| 
| #define EOB_ACT_CONTINUE_SCAN 0
| #define EOB_ACT_END_OF_FILE 1
| #define EOB_ACT_LAST_MATCH 2
| 
|     #define YY_LESS_LINENO(n)
|     
| /* Return all but the first "n" matched characters back to the input stream. */
| #define yyless(n) \
| 	do \
| 		{ \
| 		/* Undo effects of setting up yytext. */ \
|         int yyless_macro_arg = (n); \
|         YY_LESS_LINENO(yyless_macro_arg);\
| 		*yy_cp = (yy_hold_char); \
| 		YY_RESTORE_YY_MORE_OFFSET \
| 		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
| 		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
| 		} \
| 	while ( 0 )
| 
| #define unput(c) yyunput( c, (yytext_ptr)  )
| 
| #ifndef YY_TYPEDEF_YY_SIZE_T
| #define YY_TYPEDEF_YY_SIZE_T
| typedef size_t yy_size_t;
| #endif
| 
| #ifndef YY_STRUCT_YY_BUFFER_STATE
| #define YY_STRUCT_YY_BUFFER_STATE
| struct yy_buffer_state
| 	{
| 	FILE *yy_input_file;
| 
| 	char *yy_ch_buf;		/* input buffer */
| 	char *yy_buf_pos;		/* current position in input buffer */
| 
| 	/* Size of input buffer in bytes, not including room for EOB
| 	 * characters.
| 	 */
| 	yy_size_t yy_buf_size;
| 
| 	/* Number of characters read into yy_ch_buf, not including EOB
| 	 * characters.
| 	 */
| 	int yy_n_chars;
| 
| 	/* Whether we "own" the buffer - i.e., we know we created it,
| 	 * and can realloc() it to grow it, and should free() it to
| 	 * delete it.
| 	 */
| 	int yy_is_our_buffer;
| 
| 	/* Whether this is an "interactive" input source; if so, and
| 	 * if we're using stdio for input, then we want to use getc()
| 	 * instead of fread(), to make sure we stop fetching input after
| 	 * each newline.
| 	 */
| 	int yy_is_interactive;
| 
| 	/* Whether we're considered to be at the beginning of a line.
| 	 * If so, '^' rules will be active on the next match, otherwise
| 	 * not.
| 	 */
| 	int yy_at_bol;
| 
|     int yy_bs_lineno; /**< The line count. */
|     int yy_bs_column; /**< The column count. */
|     
| 	/* Whether to try to fill the input buffer when we reach the
| 	 * end of it.
| 	 */
| 	int yy_fill_buffer;
| 
| 	int yy_buffer_status;
| 
| #define YY_BUFFER_NEW 0
| #define YY_BUFFER_NORMAL 1
| 	/* When an EOF's been seen but there's still some text to process
| 	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
| 	 * shouldn't try reading from the input source any more.  We might
| 	 * still have a bunch of tokens to match, though, because of
| 	 * possible backing-up.
| 	 *
| 	 * When we actually see the EOF, we change the status to "new"
| 	 * (via yyrestart()), so that the user can continue scanning by
| 	 * just pointing yyin at a new input file.
| 	 */
| #define YY_BUFFER_EOF_PENDING 2
| 
| 	};
| #endif /* !YY_STRUCT_YY_BUFFER_STATE */
| 
| /* Stack of input buffers. */
| static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
| static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
| static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */
| 
| /* We provide macros for accessing buffer states in case in the
|  * future we want to put the buffer states in a more general
|  * "scanner state".
|  *
|  * Returns the top of the stack, or NULL.
|  */
| #define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
|                           ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
|                           : NULL)
| 
| /* Same as previous macro, but useful when we know that the buffer stack is not
|  * NULL or when we need an lvalue. For internal use only.
|  */
| #define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]
| 
| /* yy_hold_char holds the character lost when yytext is formed. */
| static char yy_hold_char;
| static int yy_n_chars;		/* number of characters read into yy_ch_buf */
| int yyleng;
| 
| /* Points to current character in buffer. */
| static char *yy_c_buf_p = (char *) 0;
| static int yy_init = 0;		/* whether we need to initialize */
| static int yy_start = 0;	/* start state number */
| 
| /* Flag which is used to allow yywrap()'s to do buffer switches
|  * instead of setting up a fresh yyin.  A bit of a hack ...
|  */
| static int yy_did_buffer_switch_on_eof;
| 
| void yyrestart (FILE *input_file  );
| void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
| YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
| void yy_delete_buffer (YY_BUFFER_STATE b  );
| void yy_flush_buffer (YY_BUFFER_STATE b  );
| void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
| void yypop_buffer_state (void );
| 
| static void yyensure_buffer_stack (void );
| static void yy_load_buffer_state (void );
| static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );
| 
| #define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )
| 
| YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
| YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
| YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );
| 
| void *yyalloc (yy_size_t  );
| void *yyrealloc (void *,yy_size_t  );
| void yyfree (void *  );
| 
| #define yy_new_buffer yy_create_buffer
| 
| #define yy_set_interactive(is_interactive) \
| 	{ \
| 	if ( ! YY_CURRENT_BUFFER ){ \
|         yyensure_buffer_stack (); \
| 		YY_CURRENT_BUFFER_LVALUE =    \
|             yy_create_buffer(yyin,YY_BUF_SIZE ); \
| 	} \
| 	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
| 	}
| 
| #define yy_set_bol(at_bol) \
| 	{ \
| 	if ( ! YY_CURRENT_BUFFER ){\
|         yyensure_buffer_stack (); \
| 		YY_CURRENT_BUFFER_LVALUE =    \
|             yy_create_buffer(yyin,YY_BUF_SIZE ); \
| 	} \
| 	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
| 	}
| 
| #define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)
| 
| /* Begin user sect3 */
| 
| typedef unsigned char YY_CHAR;
| 
| FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
| 
| typedef int yy_state_type;
| 
| extern int yylineno;
| 
| int yylineno = 1;
| 
| extern char *yytext;
| #define yytext_ptr yytext
| 
| static yy_state_type yy_get_previous_state (void );
| static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
| static int yy_get_next_buffer (void );
| static void yy_fatal_error (yyconst char msg[]  );
| 
| /* Done after the current pattern has been matched and before the
|  * corresponding action - sets up yytext.
|  */
| #define YY_DO_BEFORE_ACTION \
| 	(yytext_ptr) = yy_bp; \
| 	(yytext_ptr) -= (yy_more_len); \
| 	yyleng = (size_t) (yy_cp - (yytext_ptr)); \
| 	(yy_hold_char) = *yy_cp; \
| 	*yy_cp = '\0'; \
| 	(yy_c_buf_p) = yy_cp;
| 
| #define YY_NUM_RULES 8
| #define YY_END_OF_BUFFER 9
| /* This struct is not used in this scanner,
|    but its presence is necessary. */
| struct yy_trans_info
| 	{
| 	flex_int32_t yy_verify;
| 	flex_int32_t yy_nxt;
| 	};
| static yyconst flex_int16_t yy_acclist[23] =
|     {   0,
|         9,    7,    8,    8,    1,    7,    8,    2,    7,    8,
|         3,    7,    8,    4,    7,    8,    5,    7,    8,    6,
|         7,    8
|     } ;
| 
| static yyconst flex_int16_t yy_accept[14] =
|     {   0,
|         1,    1,    1,    2,    4,    5,    8,   11,   14,   17,
|        20,   23,   23
|     } ;
| 
| static yyconst flex_int32_t yy_ec[256] =
|     {   0,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    3,    4,    5,    6,
| 
|         7,    8,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
| 
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1
|     } ;
| 
| static yyconst flex_int32_t yy_meta[9] =
|     {   0,
|         1,    1,    1,    1,    1,    1,    1,    1
|     } ;
| 
| static yyconst flex_int16_t yy_base[13] =
|     {   0,
|         0,    0,    9,   10,   10,   10,   10,   10,   10,   10,
|        10,   10
|     } ;
| 
| static yyconst flex_int16_t yy_def[13] =
|     {   0,
|        12,    1,   12,   12,   12,   12,   12,   12,   12,   12,
|        12,    0
|     } ;
| 
| static yyconst flex_int16_t yy_nxt[19] =
|     {   0,
|         4,    5,    6,    7,    8,    9,   10,   11,   12,    3,
|        12,   12,   12,   12,   12,   12,   12,   12
|     } ;
| 
| static yyconst flex_int16_t yy_chk[19] =
|     {   0,
|         1,    1,    1,    1,    1,    1,    1,    1,    3,   12,
|        12,   12,   12,   12,   12,   12,   12,   12
|     } ;
| 
| extern int yy_flex_debug;
| int yy_flex_debug = 0;
| 
| static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
| static char *yy_full_match;
| static int yy_lp;
| #define REJECT \
| { \
| *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
| yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
| ++(yy_lp); \
| goto find_rule; \
| }
| 
| static int yy_more_flag = 0;
| static int yy_more_len = 0;
| #define yymore() ((yy_more_flag) = 1)
| #define YY_MORE_ADJ (yy_more_len)
| #define YY_RESTORE_YY_MORE_OFFSET
| char *yytext;
| #line 1 "conftest.l"
| #line 477 "lex.yy.c"
| 
| #define INITIAL 0
| 
| #ifndef YY_NO_UNISTD_H
| /* Special case for "unistd.h", since it is non-ANSI. We include it way
|  * down here because we want the user's section 1 to have been scanned first.
|  * The user has a chance to override it with an option.
|  */
| #include <unistd.h>
| #endif
| 
| #ifndef YY_EXTRA_TYPE
| #define YY_EXTRA_TYPE void *
| #endif
| 
| static int yy_init_globals (void );
| 
| /* Accessor methods to globals.
|    These are made visible to non-reentrant scanners for convenience. */
| 
| int yylex_destroy (void );
| 
| int yyget_debug (void );
| 
| void yyset_debug (int debug_flag  );
| 
| YY_EXTRA_TYPE yyget_extra (void );
| 
| void yyset_extra (YY_EXTRA_TYPE user_defined  );
| 
| FILE *yyget_in (void );
| 
| void yyset_in  (FILE * in_str  );
| 
| FILE *yyget_out (void );
| 
| void yyset_out  (FILE * out_str  );
| 
| int yyget_leng (void );
| 
| char *yyget_text (void );
| 
| int yyget_lineno (void );
| 
| void yyset_lineno (int line_number  );
| 
| /* Macros after this point can all be overridden by user definitions in
|  * section 1.
|  */
| 
| #ifndef YY_SKIP_YYWRAP
| #ifdef __cplusplus
| extern "C" int yywrap (void );
| #else
| extern int yywrap (void );
| #endif
| #endif
| 
|     static void yyunput (int c,char *buf_ptr  );
|     
| #ifndef yytext_ptr
| static void yy_flex_strncpy (char *,yyconst char *,int );
| #endif
| 
| #ifdef YY_NEED_STRLEN
| static int yy_flex_strlen (yyconst char * );
| #endif
| 
| #ifndef YY_NO_INPUT
| 
| #ifdef __cplusplus
| static int yyinput (void );
| #else
| static int input (void );
| #endif
| 
| #endif
| 
| /* Amount of stuff to slurp up with each read. */
| #ifndef YY_READ_BUF_SIZE
| #ifdef __ia64__
| /* On IA-64, the buffer size is 16k, not 8k */
| #define YY_READ_BUF_SIZE 16384
| #else
| #define YY_READ_BUF_SIZE 8192
| #endif /* __ia64__ */
| #endif
| 
| /* Copy whatever the last rule matched to the standard output. */
| #ifndef ECHO
| /* This used to be an fputs(), but since the string might contain NUL's,
|  * we now use fwrite().
|  */
| #define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
| #endif
| 
| /* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
|  * is returned in "result".
|  */
| #ifndef YY_INPUT
| #define YY_INPUT(buf,result,max_size) \
| 	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
| 		{ \
| 		int c = '*'; \
| 		size_t n; \
| 		for ( n = 0; n < max_size && \
| 			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
| 			buf[n] = (char) c; \
| 		if ( c == '\n' ) \
| 			buf[n++] = (char) c; \
| 		if ( c == EOF && ferror( yyin ) ) \
| 			YY_FATAL_ERROR( "input in flex scanner failed" ); \
| 		result = n; \
| 		} \
| 	else \
| 		{ \
| 		errno=0; \
| 		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
| 			{ \
| 			if( errno != EINTR) \
| 				{ \
| 				YY_FATAL_ERROR( "input in flex scanner failed" ); \
| 				break; \
| 				} \
| 			errno=0; \
| 			clearerr(yyin); \
| 			} \
| 		}\
| \
| 
| #endif
| 
| /* No semi-colon after return; correct usage is to write "yyterminate();" -
|  * we don't want an extra ';' after the "return" because that will cause
|  * some compilers to complain about unreachable statements.
|  */
| #ifndef yyterminate
| #define yyterminate() return YY_NULL
| #endif
| 
| /* Number of entries by which start-condition stack grows. */
| #ifndef YY_START_STACK_INCR
| #define YY_START_STACK_INCR 25
| #endif
| 
| /* Report a fatal error. */
| #ifndef YY_FATAL_ERROR
| #define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
| #endif
| 
| /* end tables serialization structures and prototypes */
| 
| /* Default declaration of generated scanner - a define so the user can
|  * easily add parameters.
|  */
| #ifndef YY_DECL
| #define YY_DECL_IS_OURS 1
| 
| extern int yylex (void);
| 
| #define YY_DECL int yylex (void)
| #endif /* !YY_DECL */
| 
| /* Code executed at the beginning of each rule, after yytext and yyleng
|  * have been set up.
|  */
| #ifndef YY_USER_ACTION
| #define YY_USER_ACTION
| #endif
| 
| /* Code executed at the end of each rule. */
| #ifndef YY_BREAK
| #define YY_BREAK break;
| #endif
| 
| #define YY_RULE_SETUP \
| 	YY_USER_ACTION
| 
| /** The main scanner function which does all the work.
|  */
| YY_DECL
| {
| 	register yy_state_type yy_current_state;
| 	register char *yy_cp, *yy_bp;
| 	register int yy_act;
|     
| #line 1 "conftest.l"
| 
| #line 666 "lex.yy.c"
| 
| 	if ( !(yy_init) )
| 		{
| 		(yy_init) = 1;
| 
| #ifdef YY_USER_INIT
| 		YY_USER_INIT;
| #endif
| 
|         /* Create the reject buffer large enough to save one state per allowed character. */
|         if ( ! (yy_state_buf) )
|             (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
|             if ( ! (yy_state_buf) )
|                 YY_FATAL_ERROR( "out of dynamic memory in yylex()" );
| 
| 		if ( ! (yy_start) )
| 			(yy_start) = 1;	/* first start state */
| 
| 		if ( ! yyin )
| 			yyin = stdin;
| 
| 		if ( ! yyout )
| 			yyout = stdout;
| 
| 		if ( ! YY_CURRENT_BUFFER ) {
| 			yyensure_buffer_stack ();
| 			YY_CURRENT_BUFFER_LVALUE =
| 				yy_create_buffer(yyin,YY_BUF_SIZE );
| 		}
| 
| 		yy_load_buffer_state( );
| 		}
| 
| 	while ( 1 )		/* loops until end-of-file is reached */
| 		{
| 		(yy_more_len) = 0;
| 		if ( (yy_more_flag) )
| 			{
| 			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
| 			(yy_more_flag) = 0;
| 			}
| 		yy_cp = (yy_c_buf_p);
| 
| 		/* Support of yytext. */
| 		*yy_cp = (yy_hold_char);
| 
| 		/* yy_bp points to the position in yy_ch_buf of the start of
| 		 * the current run.
| 		 */
| 		yy_bp = yy_cp;
| 
| 		yy_current_state = (yy_start);
| 
| 		(yy_state_ptr) = (yy_state_buf);
| 		*(yy_state_ptr)++ = yy_current_state;
| 
| yy_match:
| 		do
| 			{
| 			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
| 			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
| 				{
| 				yy_current_state = (int) yy_def[yy_current_state];
| 				if ( yy_current_state >= 13 )
| 					yy_c = yy_meta[(unsigned int) yy_c];
| 				}
| 			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
| 			*(yy_state_ptr)++ = yy_current_state;
| 			++yy_cp;
| 			}
| 		while ( yy_base[yy_current_state] != 10 );
| 
| yy_find_action:
| 		yy_current_state = *--(yy_state_ptr);
| 		(yy_lp) = yy_accept[yy_current_state];
| find_rule: /* we branch to this label when backing up */
| 		for ( ; ; ) /* until we find what rule we matched */
| 			{
| 			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
| 				{
| 				yy_act = yy_acclist[(yy_lp)];
| 					{
| 					(yy_full_match) = yy_cp;
| 					break;
| 					}
| 				}
| 			--yy_cp;
| 			yy_current_state = *--(yy_state_ptr);
| 			(yy_lp) = yy_accept[yy_current_state];
| 			}
| 
| 		YY_DO_BEFORE_ACTION;
| 
| do_action:	/* This label is used only to access EOF actions. */
| 
| 		switch ( yy_act )
| 	{ /* beginning of action switch */
| case 1:
| YY_RULE_SETUP
| #line 2 "conftest.l"
| { ECHO; }
| 	YY_BREAK
| case 2:
| YY_RULE_SETUP
| #line 3 "conftest.l"
| { REJECT; }
| 	YY_BREAK
| case 3:
| YY_RULE_SETUP
| #line 4 "conftest.l"
| { yymore (); }
| 	YY_BREAK
| case 4:
| YY_RULE_SETUP
| #line 5 "conftest.l"
| { yyless (1); }
| 	YY_BREAK
| case 5:
| YY_RULE_SETUP
| #line 6 "conftest.l"
| { yyless (input () != 0); }
| 	YY_BREAK
| case 6:
| YY_RULE_SETUP
| #line 7 "conftest.l"
| { unput (yytext[0]); }
| 	YY_BREAK
| case 7:
| YY_RULE_SETUP
| #line 8 "conftest.l"
| { BEGIN INITIAL; }
| 	YY_BREAK
| case 8:
| YY_RULE_SETUP
| #line 9 "conftest.l"
| ECHO;
| 	YY_BREAK
| #line 804 "lex.yy.c"
| 			case YY_STATE_EOF(INITIAL):
| 				yyterminate();
| 
| 	case YY_END_OF_BUFFER:
| 		{
| 		/* Amount of text matched not including the EOB char. */
| 		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;
| 
| 		/* Undo the effects of YY_DO_BEFORE_ACTION. */
| 		*yy_cp = (yy_hold_char);
| 		YY_RESTORE_YY_MORE_OFFSET
| 
| 		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
| 			{
| 			/* We're scanning a new file or input source.  It's
| 			 * possible that this happened because the user
| 			 * just pointed yyin at a new source and called
| 			 * yylex().  If so, then we have to assure
| 			 * consistency between YY_CURRENT_BUFFER and our
| 			 * globals.  Here is the right place to do so, because
| 			 * this is the first action (other than possibly a
| 			 * back-up) that will match for the new input source.
| 			 */
| 			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
| 			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
| 			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
| 			}
| 
| 		/* Note that here we test for yy_c_buf_p "<=" to the position
| 		 * of the first EOB in the buffer, since yy_c_buf_p will
| 		 * already have been incremented past the NUL character
| 		 * (since all states make transitions on EOB to the
| 		 * end-of-buffer state).  Contrast this with the test
| 		 * in input().
| 		 */
| 		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
| 			{ /* This was really a NUL. */
| 			yy_state_type yy_next_state;
| 
| 			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;
| 
| 			yy_current_state = yy_get_previous_state(  );
| 
| 			/* Okay, we're now positioned to make the NUL
| 			 * transition.  We couldn't have
| 			 * yy_get_previous_state() go ahead and do it
| 			 * for us because it doesn't know how to deal
| 			 * with the possibility of jamming (and we don't
| 			 * want to build jamming into it because then it
| 			 * will run more slowly).
| 			 */
| 
| 			yy_next_state = yy_try_NUL_trans( yy_current_state );
| 
| 			yy_bp = (yytext_ptr) + YY_MORE_ADJ;
| 
| 			if ( yy_next_state )
| 				{
| 				/* Consume the NUL. */
| 				yy_cp = ++(yy_c_buf_p);
| 				yy_current_state = yy_next_state;
| 				goto yy_match;
| 				}
| 
| 			else
| 				{
| 				yy_cp = (yy_c_buf_p);
| 				goto yy_find_action;
| 				}
| 			}
| 
| 		else switch ( yy_get_next_buffer(  ) )
| 			{
| 			case EOB_ACT_END_OF_FILE:
| 				{
| 				(yy_did_buffer_switch_on_eof) = 0;
| 
| 				if ( yywrap( ) )
| 					{
| 					/* Note: because we've taken care in
| 					 * yy_get_next_buffer() to have set up
| 					 * yytext, we can now set up
| 					 * yy_c_buf_p so that if some total
| 					 * hoser (like flex itself) wants to
| 					 * call the scanner after we return the
| 					 * YY_NULL, it'll still work - another
| 					 * YY_NULL will get returned.
| 					 */
| 					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;
| 
| 					yy_act = YY_STATE_EOF(YY_START);
| 					goto do_action;
| 					}
| 
| 				else
| 					{
| 					if ( ! (yy_did_buffer_switch_on_eof) )
| 						YY_NEW_FILE;
| 					}
| 				break;
| 				}
| 
| 			case EOB_ACT_CONTINUE_SCAN:
| 				(yy_c_buf_p) =
| 					(yytext_ptr) + yy_amount_of_matched_text;
| 
| 				yy_current_state = yy_get_previous_state(  );
| 
| 				yy_cp = (yy_c_buf_p);
| 				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
| 				goto yy_match;
| 
| 			case EOB_ACT_LAST_MATCH:
| 				(yy_c_buf_p) =
| 				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];
| 
| 				yy_current_state = yy_get_previous_state(  );
| 
| 				yy_cp = (yy_c_buf_p);
| 				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
| 				goto yy_find_action;
| 			}
| 		break;
| 		}
| 
| 	default:
| 		YY_FATAL_ERROR(
| 			"fatal flex scanner internal error--no action found" );
| 	} /* end of action switch */
| 		} /* end of scanning one token */
| } /* end of yylex */
| 
| /* yy_get_next_buffer - try to read in a new buffer
|  *
|  * Returns a code representing an action:
|  *	EOB_ACT_LAST_MATCH -
|  *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
|  *	EOB_ACT_END_OF_FILE - end of file
|  */
| static int yy_get_next_buffer (void)
| {
|     	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
| 	register char *source = (yytext_ptr);
| 	register int number_to_move, i;
| 	int ret_val;
| 
| 	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
| 		YY_FATAL_ERROR(
| 		"fatal flex scanner internal error--end of buffer missed" );
| 
| 	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
| 		{ /* Don't try to fill the buffer, so this is an EOF. */
| 		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
| 			{
| 			/* We matched a single character, the EOB, so
| 			 * treat this as a final EOF.
| 			 */
| 			return EOB_ACT_END_OF_FILE;
| 			}
| 
| 		else
| 			{
| 			/* We matched some text prior to the EOB, first
| 			 * process it.
| 			 */
| 			return EOB_ACT_LAST_MATCH;
| 			}
| 		}
| 
| 	/* Try to read more data. */
| 
| 	/* First move last chars to start of buffer. */
| 	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;
| 
| 	for ( i = 0; i < number_to_move; ++i )
| 		*(dest++) = *(source++);
| 
| 	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
| 		/* don't do the read, it's not guaranteed to return an EOF,
| 		 * just force an EOF
| 		 */
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;
| 
| 	else
| 		{
| 			int num_to_read =
| 			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
| 
| 		while ( num_to_read <= 0 )
| 			{ /* Not enough room in the buffer - grow it. */
| 
| 			YY_FATAL_ERROR(
| "input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
| 
| 			}
| 
| 		if ( num_to_read > YY_READ_BUF_SIZE )
| 			num_to_read = YY_READ_BUF_SIZE;
| 
| 		/* Read in more data. */
| 		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
| 			(yy_n_chars), (size_t) num_to_read );
| 
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
| 		}
| 
| 	if ( (yy_n_chars) == 0 )
| 		{
| 		if ( number_to_move == YY_MORE_ADJ )
| 			{
| 			ret_val = EOB_ACT_END_OF_FILE;
| 			yyrestart(yyin  );
| 			}
| 
| 		else
| 			{
| 			ret_val = EOB_ACT_LAST_MATCH;
| 			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
| 				YY_BUFFER_EOF_PENDING;
| 			}
| 		}
| 
| 	else
| 		ret_val = EOB_ACT_CONTINUE_SCAN;
| 
| 	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
| 		/* Extend the array by 50%, plus the number we really need. */
| 		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
| 		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
| 		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
| 			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
| 	}
| 
| 	(yy_n_chars) += number_to_move;
| 	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
| 	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;
| 
| 	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];
| 
| 	return ret_val;
| }
| 
| /* yy_get_previous_state - get the state just before the EOB char was reached */
| 
|     static yy_state_type yy_get_previous_state (void)
| {
| 	register yy_state_type yy_current_state;
| 	register char *yy_cp;
|     
| 	yy_current_state = (yy_start);
| 
| 	(yy_state_ptr) = (yy_state_buf);
| 	*(yy_state_ptr)++ = yy_current_state;
| 
| 	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
| 		{
| 		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
| 		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
| 			{
| 			yy_current_state = (int) yy_def[yy_current_state];
| 			if ( yy_current_state >= 13 )
| 				yy_c = yy_meta[(unsigned int) yy_c];
| 			}
| 		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
| 		*(yy_state_ptr)++ = yy_current_state;
| 		}
| 
| 	return yy_current_state;
| }
| 
| /* yy_try_NUL_trans - try to make a transition on the NUL character
|  *
|  * synopsis
|  *	next_state = yy_try_NUL_trans( current_state );
|  */
|     static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
| {
| 	register int yy_is_jam;
|     
| 	register YY_CHAR yy_c = 1;
| 	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
| 		{
| 		yy_current_state = (int) yy_def[yy_current_state];
| 		if ( yy_current_state >= 13 )
| 			yy_c = yy_meta[(unsigned int) yy_c];
| 		}
| 	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
| 	yy_is_jam = (yy_current_state == 12);
| 	if ( ! yy_is_jam )
| 		*(yy_state_ptr)++ = yy_current_state;
| 
| 	return yy_is_jam ? 0 : yy_current_state;
| }
| 
|     static void yyunput (int c, register char * yy_bp )
| {
| 	register char *yy_cp;
|     
|     yy_cp = (yy_c_buf_p);
| 
| 	/* undo effects of setting up yytext */
| 	*yy_cp = (yy_hold_char);
| 
| 	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
| 		{ /* need to shift things up to make room */
| 		/* +2 for EOB chars. */
| 		register int number_to_move = (yy_n_chars) + 2;
| 		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
| 					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
| 		register char *source =
| 				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];
| 
| 		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
| 			*--dest = *--source;
| 
| 		yy_cp += (int) (dest - source);
| 		yy_bp += (int) (dest - source);
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
| 			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;
| 
| 		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
| 			YY_FATAL_ERROR( "flex scanner push-back overflow" );
| 		}
| 
| 	*--yy_cp = (char) c;
| 
| 	(yytext_ptr) = yy_bp;
| 	(yy_hold_char) = *yy_cp;
| 	(yy_c_buf_p) = yy_cp;
| }
| 
| #ifndef YY_NO_INPUT
| #ifdef __cplusplus
|     static int yyinput (void)
| #else
|     static int input  (void)
| #endif
| 
| {
| 	int c;
|     
| 	*(yy_c_buf_p) = (yy_hold_char);
| 
| 	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
| 		{
| 		/* yy_c_buf_p now points to the character we want to return.
| 		 * If this occurs *before* the EOB characters, then it's a
| 		 * valid NUL; if not, then we've hit the end of the buffer.
| 		 */
| 		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
| 			/* This was really a NUL. */
| 			*(yy_c_buf_p) = '\0';
| 
| 		else
| 			{ /* need more input */
| 			int offset = (yy_c_buf_p) - (yytext_ptr);
| 			++(yy_c_buf_p);
| 
| 			switch ( yy_get_next_buffer(  ) )
| 				{
| 				case EOB_ACT_LAST_MATCH:
| 					/* This happens because yy_g_n_b()
| 					 * sees that we've accumulated a
| 					 * token and flags that we need to
| 					 * try matching the token before
| 					 * proceeding.  But for input(),
| 					 * there's no matching to consider.
| 					 * So convert the EOB_ACT_LAST_MATCH
| 					 * to EOB_ACT_END_OF_FILE.
| 					 */
| 
| 					/* Reset buffer status. */
| 					yyrestart(yyin );
| 
| 					/*FALLTHROUGH*/
| 
| 				case EOB_ACT_END_OF_FILE:
| 					{
| 					if ( yywrap( ) )
| 						return EOF;
| 
| 					if ( ! (yy_did_buffer_switch_on_eof) )
| 						YY_NEW_FILE;
| #ifdef __cplusplus
| 					return yyinput();
| #else
| 					return input();
| #endif
| 					}
| 
| 				case EOB_ACT_CONTINUE_SCAN:
| 					(yy_c_buf_p) = (yytext_ptr) + offset;
| 					break;
| 				}
| 			}
| 		}
| 
| 	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
| 	*(yy_c_buf_p) = '\0';	/* preserve yytext */
| 	(yy_hold_char) = *++(yy_c_buf_p);
| 
| 	return c;
| }
| #endif	/* ifndef YY_NO_INPUT */
| 
| /** Immediately switch to a different input stream.
|  * @param input_file A readable stream.
|  * 
|  * @note This function does not reset the start condition to @c INITIAL .
|  */
|     void yyrestart  (FILE * input_file )
| {
|     
| 	if ( ! YY_CURRENT_BUFFER ){
|         yyensure_buffer_stack ();
| 		YY_CURRENT_BUFFER_LVALUE =
|             yy_create_buffer(yyin,YY_BUF_SIZE );
| 	}
| 
| 	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
| 	yy_load_buffer_state( );
| }
| 
| /** Switch to a different input buffer.
|  * @param new_buffer The new input buffer.
|  * 
|  */
|     void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
| {
|     
| 	/* TODO. We should be able to replace this entire function body
| 	 * with
| 	 *		yypop_buffer_state();
| 	 *		yypush_buffer_state(new_buffer);
|      */
| 	yyensure_buffer_stack ();
| 	if ( YY_CURRENT_BUFFER == new_buffer )
| 		return;
| 
| 	if ( YY_CURRENT_BUFFER )
| 		{
| 		/* Flush out information for old buffer. */
| 		*(yy_c_buf_p) = (yy_hold_char);
| 		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
| 		}
| 
| 	YY_CURRENT_BUFFER_LVALUE = new_buffer;
| 	yy_load_buffer_state( );
| 
| 	/* We don't actually know whether we did this switch during
| 	 * EOF (yywrap()) processing, but the only time this flag
| 	 * is looked at is after yywrap() is called, so it's safe
| 	 * to go ahead and always set it.
| 	 */
| 	(yy_did_buffer_switch_on_eof) = 1;
| }
| 
| static void yy_load_buffer_state  (void)
| {
|     	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
| 	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
| 	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
| 	(yy_hold_char) = *(yy_c_buf_p);
| }
| 
| /** Allocate and initialize an input buffer state.
|  * @param file A readable stream.
|  * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
|  * 
|  * @return the allocated buffer state.
|  */
|     YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
| {
| 	YY_BUFFER_STATE b;
|     
| 	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
| 	if ( ! b )
| 		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
| 
| 	b->yy_buf_size = size;
| 
| 	/* yy_ch_buf has to be 2 characters longer than the size given because
| 	 * we need to put in 2 end-of-buffer characters.
| 	 */
| 	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
| 	if ( ! b->yy_ch_buf )
| 		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
| 
| 	b->yy_is_our_buffer = 1;
| 
| 	yy_init_buffer(b,file );
| 
| 	return b;
| }
| 
| /** Destroy the buffer.
|  * @param b a buffer created with yy_create_buffer()
|  * 
|  */
|     void yy_delete_buffer (YY_BUFFER_STATE  b )
| {
|     
| 	if ( ! b )
| 		return;
| 
| 	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
| 		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;
| 
| 	if ( b->yy_is_our_buffer )
| 		yyfree((void *) b->yy_ch_buf  );
| 
| 	yyfree((void *) b  );
| }
| 
| #ifndef __cplusplus
| extern int isatty (int );
| #endif /* __cplusplus */
|     
| /* Initializes or reinitializes a buffer.
|  * This function is sometimes called more than once on the same buffer,
|  * such as during a yyrestart() or at EOF.
|  */
|     static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
| 
| {
| 	int oerrno = errno;
|     
| 	yy_flush_buffer(b );
| 
| 	b->yy_input_file = file;
| 	b->yy_fill_buffer = 1;
| 
|     /* If b is the current buffer, then yy_init_buffer was _probably_
|      * called from yyrestart() or through yy_get_next_buffer.
|      * In that case, we don't want to reset the lineno or column.
|      */
|     if (b != YY_CURRENT_BUFFER){
|         b->yy_bs_lineno = 1;
|         b->yy_bs_column = 0;
|     }
| 
|         b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
|     
| 	errno = oerrno;
| }
| 
| /** Discard all buffered characters. On the next scan, YY_INPUT will be called.
|  * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
|  * 
|  */
|     void yy_flush_buffer (YY_BUFFER_STATE  b )
| {
|     	if ( ! b )
| 		return;
| 
| 	b->yy_n_chars = 0;
| 
| 	/* We always need two end-of-buffer characters.  The first causes
| 	 * a transition to the end-of-buffer state.  The second causes
| 	 * a jam in that state.
| 	 */
| 	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
| 	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
| 
| 	b->yy_buf_pos = &b->yy_ch_buf[0];
| 
| 	b->yy_at_bol = 1;
| 	b->yy_buffer_status = YY_BUFFER_NEW;
| 
| 	if ( b == YY_CURRENT_BUFFER )
| 		yy_load_buffer_state( );
| }
| 
| /** Pushes the new state onto the stack. The new state becomes
|  *  the current state. This function will allocate the stack
|  *  if necessary.
|  *  @param new_buffer The new state.
|  *  
|  */
| void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
| {
|     	if (new_buffer == NULL)
| 		return;
| 
| 	yyensure_buffer_stack();
| 
| 	/* This block is copied from yy_switch_to_buffer. */
| 	if ( YY_CURRENT_BUFFER )
| 		{
| 		/* Flush out information for old buffer. */
| 		*(yy_c_buf_p) = (yy_hold_char);
| 		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
| 		}
| 
| 	/* Only push if top exists. Otherwise, replace top. */
| 	if (YY_CURRENT_BUFFER)
| 		(yy_buffer_stack_top)++;
| 	YY_CURRENT_BUFFER_LVALUE = new_buffer;
| 
| 	/* copied from yy_switch_to_buffer. */
| 	yy_load_buffer_state( );
| 	(yy_did_buffer_switch_on_eof) = 1;
| }
| 
| /** Removes and deletes the top of the stack, if present.
|  *  The next element becomes the new top.
|  *  
|  */
| void yypop_buffer_state (void)
| {
|     	if (!YY_CURRENT_BUFFER)
| 		return;
| 
| 	yy_delete_buffer(YY_CURRENT_BUFFER );
| 	YY_CURRENT_BUFFER_LVALUE = NULL;
| 	if ((yy_buffer_stack_top) > 0)
| 		--(yy_buffer_stack_top);
| 
| 	if (YY_CURRENT_BUFFER) {
| 		yy_load_buffer_state( );
| 		(yy_did_buffer_switch_on_eof) = 1;
| 	}
| }
| 
| /* Allocates the stack if it does not exist.
|  *  Guarantees space for at least one push.
|  */
| static void yyensure_buffer_stack (void)
| {
| 	int num_to_alloc;
|     
| 	if (!(yy_buffer_stack)) {
| 
| 		/* First allocation is just for 2 elements, since we don't know if this
| 		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
| 		 * immediate realloc on the next call.
|          */
| 		num_to_alloc = 1;
| 		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
| 								(num_to_alloc * sizeof(struct yy_buffer_state*)
| 								);
| 		if ( ! (yy_buffer_stack) )
| 			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
| 								  
| 		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
| 				
| 		(yy_buffer_stack_max) = num_to_alloc;
| 		(yy_buffer_stack_top) = 0;
| 		return;
| 	}
| 
| 	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){
| 
| 		/* Increase the buffer to prepare for a possible push. */
| 		int grow_size = 8 /* arbitrary grow size */;
| 
| 		num_to_alloc = (yy_buffer_stack_max) + grow_size;
| 		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
| 								((yy_buffer_stack),
| 								num_to_alloc * sizeof(struct yy_buffer_state*)
| 								);
| 		if ( ! (yy_buffer_stack) )
| 			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
| 
| 		/* zero only the new slots.*/
| 		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
| 		(yy_buffer_stack_max) = num_to_alloc;
| 	}
| }
| 
| /** Setup the input buffer state to scan directly from a user-specified character buffer.
|  * @param base the character buffer
|  * @param size the size in bytes of the character buffer
|  * 
|  * @return the newly allocated buffer state object. 
|  */
| YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
| {
| 	YY_BUFFER_STATE b;
|     
| 	if ( size < 2 ||
| 	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
| 	     base[size-1] != YY_END_OF_BUFFER_CHAR )
| 		/* They forgot to leave room for the EOB's. */
| 		return 0;
| 
| 	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
| 	if ( ! b )
| 		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
| 
| 	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
| 	b->yy_buf_pos = b->yy_ch_buf = base;
| 	b->yy_is_our_buffer = 0;
| 	b->yy_input_file = 0;
| 	b->yy_n_chars = b->yy_buf_size;
| 	b->yy_is_interactive = 0;
| 	b->yy_at_bol = 1;
| 	b->yy_fill_buffer = 0;
| 	b->yy_buffer_status = YY_BUFFER_NEW;
| 
| 	yy_switch_to_buffer(b  );
| 
| 	return b;
| }
| 
| /** Setup the input buffer state to scan a string. The next call to yylex() will
|  * scan from a @e copy of @a str.
|  * @param yystr a NUL-terminated string to scan
|  * 
|  * @return the newly allocated buffer state object.
|  * @note If you want to scan bytes that may contain NUL values, then use
|  *       yy_scan_bytes() instead.
|  */
| YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
| {
|     
| 	return yy_scan_bytes(yystr,strlen(yystr) );
| }
| 
| /** Setup the input buffer state to scan the given bytes. The next call to yylex() will
|  * scan from a @e copy of @a bytes.
|  * @param yybytes the byte buffer to scan
|  * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
|  * 
|  * @return the newly allocated buffer state object.
|  */
| YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
| {
| 	YY_BUFFER_STATE b;
| 	char *buf;
| 	yy_size_t n;
| 	int i;
|     
| 	/* Get memory for full buffer, including space for trailing EOB's. */
| 	n = _yybytes_len + 2;
| 	buf = (char *) yyalloc(n  );
| 	if ( ! buf )
| 		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
| 
| 	for ( i = 0; i < _yybytes_len; ++i )
| 		buf[i] = yybytes[i];
| 
| 	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;
| 
| 	b = yy_scan_buffer(buf,n );
| 	if ( ! b )
| 		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
| 
| 	/* It's okay to grow etc. this buffer, and we should throw it
| 	 * away when we're done.
| 	 */
| 	b->yy_is_our_buffer = 1;
| 
| 	return b;
| }
| 
| #ifndef YY_EXIT_FAILURE
| #define YY_EXIT_FAILURE 2
| #endif
| 
| static void yy_fatal_error (yyconst char* msg )
| {
|     	(void) fprintf( stderr, "%s\n", msg );
| 	exit( YY_EXIT_FAILURE );
| }
| 
| /* Redefine yyless() so it works in section 3 code. */
| 
| #undef yyless
| #define yyless(n) \
| 	do \
| 		{ \
| 		/* Undo effects of setting up yytext. */ \
|         int yyless_macro_arg = (n); \
|         YY_LESS_LINENO(yyless_macro_arg);\
| 		yytext[yyleng] = (yy_hold_char); \
| 		(yy_c_buf_p) = yytext + yyless_macro_arg; \
| 		(yy_hold_char) = *(yy_c_buf_p); \
| 		*(yy_c_buf_p) = '\0'; \
| 		yyleng = yyless_macro_arg; \
| 		} \
| 	while ( 0 )
| 
| /* Accessor  methods (get/set functions) to struct members. */
| 
| /** Get the current line number.
|  * 
|  */
| int yyget_lineno  (void)
| {
|         
|     return yylineno;
| }
| 
| /** Get the input stream.
|  * 
|  */
| FILE *yyget_in  (void)
| {
|         return yyin;
| }
| 
| /** Get the output stream.
|  * 
|  */
| FILE *yyget_out  (void)
| {
|         return yyout;
| }
| 
| /** Get the length of the current token.
|  * 
|  */
| int yyget_leng  (void)
| {
|         return yyleng;
| }
| 
| /** Get the current token.
|  * 
|  */
| 
| char *yyget_text  (void)
| {
|         return yytext;
| }
| 
| /** Set the current line number.
|  * @param line_number
|  * 
|  */
| void yyset_lineno (int  line_number )
| {
|     
|     yylineno = line_number;
| }
| 
| /** Set the input stream. This does not discard the current
|  * input buffer.
|  * @param in_str A readable stream.
|  * 
|  * @see yy_switch_to_buffer
|  */
| void yyset_in (FILE *  in_str )
| {
|         yyin = in_str ;
| }
| 
| void yyset_out (FILE *  out_str )
| {
|         yyout = out_str ;
| }
| 
| int yyget_debug  (void)
| {
|         return yy_flex_debug;
| }
| 
| void yyset_debug (int  bdebug )
| {
|         yy_flex_debug = bdebug ;
| }
| 
| static int yy_init_globals (void)
| {
|         /* Initialization is the same as for the non-reentrant scanner.
|      * This function is called from yylex_destroy(), so don't allocate here.
|      */
| 
|     (yy_buffer_stack) = 0;
|     (yy_buffer_stack_top) = 0;
|     (yy_buffer_stack_max) = 0;
|     (yy_c_buf_p) = (char *) 0;
|     (yy_init) = 0;
|     (yy_start) = 0;
| 
|     (yy_state_buf) = 0;
|     (yy_state_ptr) = 0;
|     (yy_full_match) = 0;
|     (yy_lp) = 0;
| 
| /* Defined in main.c */
| #ifdef YY_STDINIT
|     yyin = stdin;
|     yyout = stdout;
| #else
|     yyin = (FILE *) 0;
|     yyout = (FILE *) 0;
| #endif
| 
|     /* For future reference: Set errno on error, since we are called by
|      * yylex_init()
|      */
|     return 0;
| }
| 
| /* yylex_destroy is for both reentrant and non-reentrant scanners. */
| int yylex_destroy  (void)
| {
|     
|     /* Pop the buffer stack, destroying each element. */
| 	while(YY_CURRENT_BUFFER){
| 		yy_delete_buffer(YY_CURRENT_BUFFER  );
| 		YY_CURRENT_BUFFER_LVALUE = NULL;
| 		yypop_buffer_state();
| 	}
| 
| 	/* Destroy the stack itself. */
| 	yyfree((yy_buffer_stack) );
| 	(yy_buffer_stack) = NULL;
| 
|     yyfree ( (yy_state_buf) );
|     (yy_state_buf)  = NULL;
| 
|     /* Reset the globals. This is important in a non-reentrant scanner so the next time
|      * yylex() is called, initialization will occur. */
|     yy_init_globals( );
| 
|     return 0;
| }
| 
| /*
|  * Internal utility routines.
|  */
| 
| #ifndef yytext_ptr
| static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
| {
| 	register int i;
| 	for ( i = 0; i < n; ++i )
| 		s1[i] = s2[i];
| }
| #endif
| 
| #ifdef YY_NEED_STRLEN
| static int yy_flex_strlen (yyconst char * s )
| {
| 	register int n;
| 	for ( n = 0; s[n]; ++n )
| 		;
| 
| 	return n;
| }
| #endif
| 
| void *yyalloc (yy_size_t  size )
| {
| 	return (void *) malloc( size );
| }
| 
| void *yyrealloc  (void * ptr, yy_size_t  size )
| {
| 	/* The cast to (char *) in the following accommodates both
| 	 * implementations that use char* generic pointers, and those
| 	 * that use void* generic pointers.  It works with the latter
| 	 * because both ANSI C and C++ allow castless assignment from
| 	 * any pointer type to void*, and deal with argument conversions
| 	 * as though doing an assignment.
| 	 */
| 	return (void *) realloc( (char *) ptr, size );
| }
| 
| void yyfree (void * ptr )
| {
| 	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
| }
| 
| #define YYTABLES_NAME "yytables"
| 
| #line 9 "conftest.l"
| 
| 
| #ifdef YYTEXT_POINTER
| extern char *yytext;
| #endif
| int
| main (void)
| {
|   return ! yylex () + ! yywrap ();
| }
configure:3688: g++ -o conftest -g -O2   conftest.cpp -ll  >&5
conftest.l: In function 'int yylex()':
conftest.l:6: error: 'input' was not declared in this scope
configure:3694: $? = 1
configure: failed program was:
| 
| #line 3 "lex.yy.c"
| 
| #define  YY_INT_ALIGNED short int
| 
| /* A lexical scanner generated by flex */
| 
| #define FLEX_SCANNER
| #define YY_FLEX_MAJOR_VERSION 2
| #define YY_FLEX_MINOR_VERSION 5
| #define YY_FLEX_SUBMINOR_VERSION 35
| #if YY_FLEX_SUBMINOR_VERSION > 0
| #define FLEX_BETA
| #endif
| 
| /* First, we deal with  platform-specific or compiler-specific issues. */
| 
| /* begin standard C headers. */
| #include <stdio.h>
| #include <string.h>
| #include <errno.h>
| #include <stdlib.h>
| 
| /* end standard C headers. */
| 
| /* flex integer type definitions */
| 
| #ifndef FLEXINT_H
| #define FLEXINT_H
| 
| /* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */
| 
| #if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
| 
| /* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
|  * if you want the limit (max/min) macros for int types. 
|  */
| #ifndef __STDC_LIMIT_MACROS
| #define __STDC_LIMIT_MACROS 1
| #endif
| 
| #include <inttypes.h>
| typedef int8_t flex_int8_t;
| typedef uint8_t flex_uint8_t;
| typedef int16_t flex_int16_t;
| typedef uint16_t flex_uint16_t;
| typedef int32_t flex_int32_t;
| typedef uint32_t flex_uint32_t;
| #else
| typedef signed char flex_int8_t;
| typedef short int flex_int16_t;
| typedef int flex_int32_t;
| typedef unsigned char flex_uint8_t; 
| typedef unsigned short int flex_uint16_t;
| typedef unsigned int flex_uint32_t;
| 
| /* Limits of integral types. */
| #ifndef INT8_MIN
| #define INT8_MIN               (-128)
| #endif
| #ifndef INT16_MIN
| #define INT16_MIN              (-32767-1)
| #endif
| #ifndef INT32_MIN
| #define INT32_MIN              (-2147483647-1)
| #endif
| #ifndef INT8_MAX
| #define INT8_MAX               (127)
| #endif
| #ifndef INT16_MAX
| #define INT16_MAX              (32767)
| #endif
| #ifndef INT32_MAX
| #define INT32_MAX              (2147483647)
| #endif
| #ifndef UINT8_MAX
| #define UINT8_MAX              (255U)
| #endif
| #ifndef UINT16_MAX
| #define UINT16_MAX             (65535U)
| #endif
| #ifndef UINT32_MAX
| #define UINT32_MAX             (4294967295U)
| #endif
| 
| #endif /* ! C99 */
| 
| #endif /* ! FLEXINT_H */
| 
| #ifdef __cplusplus
| 
| /* The "const" storage-class-modifier is valid. */
| #define YY_USE_CONST
| 
| #else	/* ! __cplusplus */
| 
| /* C99 requires __STDC__ to be defined as 1. */
| #if defined (__STDC__)
| 
| #define YY_USE_CONST
| 
| #endif	/* defined (__STDC__) */
| #endif	/* ! __cplusplus */
| 
| #ifdef YY_USE_CONST
| #define yyconst const
| #else
| #define yyconst
| #endif
| 
| /* Returned upon end-of-file. */
| #define YY_NULL 0
| 
| /* Promotes a possibly negative, possibly signed char to an unsigned
|  * integer for use as an array index.  If the signed char is negative,
|  * we want to instead treat it as an 8-bit unsigned char, hence the
|  * double cast.
|  */
| #define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
| 
| /* Enter a start condition.  This macro really ought to take a parameter,
|  * but we do it the disgusting crufty way forced on us by the ()-less
|  * definition of BEGIN.
|  */
| #define BEGIN (yy_start) = 1 + 2 *
| 
| /* Translate the current start state into a value that can be later handed
|  * to BEGIN to return to the state.  The YYSTATE alias is for lex
|  * compatibility.
|  */
| #define YY_START (((yy_start) - 1) / 2)
| #define YYSTATE YY_START
| 
| /* Action number for EOF rule of a given start state. */
| #define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
| 
| /* Special action meaning "start processing a new file". */
| #define YY_NEW_FILE yyrestart(yyin  )
| 
| #define YY_END_OF_BUFFER_CHAR 0
| 
| /* Size of default input buffer. */
| #ifndef YY_BUF_SIZE
| #ifdef __ia64__
| /* On IA-64, the buffer size is 16k, not 8k.
|  * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
|  * Ditto for the __ia64__ case accordingly.
|  */
| #define YY_BUF_SIZE 32768
| #else
| #define YY_BUF_SIZE 16384
| #endif /* __ia64__ */
| #endif
| 
| /* The state buf must be large enough to hold one state per character in the main buffer.
|  */
| #define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))
| 
| #ifndef YY_TYPEDEF_YY_BUFFER_STATE
| #define YY_TYPEDEF_YY_BUFFER_STATE
| typedef struct yy_buffer_state *YY_BUFFER_STATE;
| #endif
| 
| extern int yyleng;
| 
| extern FILE *yyin, *yyout;
| 
| #define EOB_ACT_CONTINUE_SCAN 0
| #define EOB_ACT_END_OF_FILE 1
| #define EOB_ACT_LAST_MATCH 2
| 
|     #define YY_LESS_LINENO(n)
|     
| /* Return all but the first "n" matched characters back to the input stream. */
| #define yyless(n) \
| 	do \
| 		{ \
| 		/* Undo effects of setting up yytext. */ \
|         int yyless_macro_arg = (n); \
|         YY_LESS_LINENO(yyless_macro_arg);\
| 		*yy_cp = (yy_hold_char); \
| 		YY_RESTORE_YY_MORE_OFFSET \
| 		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
| 		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
| 		} \
| 	while ( 0 )
| 
| #define unput(c) yyunput( c, (yytext_ptr)  )
| 
| #ifndef YY_TYPEDEF_YY_SIZE_T
| #define YY_TYPEDEF_YY_SIZE_T
| typedef size_t yy_size_t;
| #endif
| 
| #ifndef YY_STRUCT_YY_BUFFER_STATE
| #define YY_STRUCT_YY_BUFFER_STATE
| struct yy_buffer_state
| 	{
| 	FILE *yy_input_file;
| 
| 	char *yy_ch_buf;		/* input buffer */
| 	char *yy_buf_pos;		/* current position in input buffer */
| 
| 	/* Size of input buffer in bytes, not including room for EOB
| 	 * characters.
| 	 */
| 	yy_size_t yy_buf_size;
| 
| 	/* Number of characters read into yy_ch_buf, not including EOB
| 	 * characters.
| 	 */
| 	int yy_n_chars;
| 
| 	/* Whether we "own" the buffer - i.e., we know we created it,
| 	 * and can realloc() it to grow it, and should free() it to
| 	 * delete it.
| 	 */
| 	int yy_is_our_buffer;
| 
| 	/* Whether this is an "interactive" input source; if so, and
| 	 * if we're using stdio for input, then we want to use getc()
| 	 * instead of fread(), to make sure we stop fetching input after
| 	 * each newline.
| 	 */
| 	int yy_is_interactive;
| 
| 	/* Whether we're considered to be at the beginning of a line.
| 	 * If so, '^' rules will be active on the next match, otherwise
| 	 * not.
| 	 */
| 	int yy_at_bol;
| 
|     int yy_bs_lineno; /**< The line count. */
|     int yy_bs_column; /**< The column count. */
|     
| 	/* Whether to try to fill the input buffer when we reach the
| 	 * end of it.
| 	 */
| 	int yy_fill_buffer;
| 
| 	int yy_buffer_status;
| 
| #define YY_BUFFER_NEW 0
| #define YY_BUFFER_NORMAL 1
| 	/* When an EOF's been seen but there's still some text to process
| 	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
| 	 * shouldn't try reading from the input source any more.  We might
| 	 * still have a bunch of tokens to match, though, because of
| 	 * possible backing-up.
| 	 *
| 	 * When we actually see the EOF, we change the status to "new"
| 	 * (via yyrestart()), so that the user can continue scanning by
| 	 * just pointing yyin at a new input file.
| 	 */
| #define YY_BUFFER_EOF_PENDING 2
| 
| 	};
| #endif /* !YY_STRUCT_YY_BUFFER_STATE */
| 
| /* Stack of input buffers. */
| static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
| static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
| static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */
| 
| /* We provide macros for accessing buffer states in case in the
|  * future we want to put the buffer states in a more general
|  * "scanner state".
|  *
|  * Returns the top of the stack, or NULL.
|  */
| #define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
|                           ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
|                           : NULL)
| 
| /* Same as previous macro, but useful when we know that the buffer stack is not
|  * NULL or when we need an lvalue. For internal use only.
|  */
| #define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]
| 
| /* yy_hold_char holds the character lost when yytext is formed. */
| static char yy_hold_char;
| static int yy_n_chars;		/* number of characters read into yy_ch_buf */
| int yyleng;
| 
| /* Points to current character in buffer. */
| static char *yy_c_buf_p = (char *) 0;
| static int yy_init = 0;		/* whether we need to initialize */
| static int yy_start = 0;	/* start state number */
| 
| /* Flag which is used to allow yywrap()'s to do buffer switches
|  * instead of setting up a fresh yyin.  A bit of a hack ...
|  */
| static int yy_did_buffer_switch_on_eof;
| 
| void yyrestart (FILE *input_file  );
| void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
| YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
| void yy_delete_buffer (YY_BUFFER_STATE b  );
| void yy_flush_buffer (YY_BUFFER_STATE b  );
| void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
| void yypop_buffer_state (void );
| 
| static void yyensure_buffer_stack (void );
| static void yy_load_buffer_state (void );
| static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );
| 
| #define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )
| 
| YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
| YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
| YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );
| 
| void *yyalloc (yy_size_t  );
| void *yyrealloc (void *,yy_size_t  );
| void yyfree (void *  );
| 
| #define yy_new_buffer yy_create_buffer
| 
| #define yy_set_interactive(is_interactive) \
| 	{ \
| 	if ( ! YY_CURRENT_BUFFER ){ \
|         yyensure_buffer_stack (); \
| 		YY_CURRENT_BUFFER_LVALUE =    \
|             yy_create_buffer(yyin,YY_BUF_SIZE ); \
| 	} \
| 	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
| 	}
| 
| #define yy_set_bol(at_bol) \
| 	{ \
| 	if ( ! YY_CURRENT_BUFFER ){\
|         yyensure_buffer_stack (); \
| 		YY_CURRENT_BUFFER_LVALUE =    \
|             yy_create_buffer(yyin,YY_BUF_SIZE ); \
| 	} \
| 	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
| 	}
| 
| #define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)
| 
| /* Begin user sect3 */
| 
| typedef unsigned char YY_CHAR;
| 
| FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
| 
| typedef int yy_state_type;
| 
| extern int yylineno;
| 
| int yylineno = 1;
| 
| extern char *yytext;
| #define yytext_ptr yytext
| 
| static yy_state_type yy_get_previous_state (void );
| static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
| static int yy_get_next_buffer (void );
| static void yy_fatal_error (yyconst char msg[]  );
| 
| /* Done after the current pattern has been matched and before the
|  * corresponding action - sets up yytext.
|  */
| #define YY_DO_BEFORE_ACTION \
| 	(yytext_ptr) = yy_bp; \
| 	(yytext_ptr) -= (yy_more_len); \
| 	yyleng = (size_t) (yy_cp - (yytext_ptr)); \
| 	(yy_hold_char) = *yy_cp; \
| 	*yy_cp = '\0'; \
| 	(yy_c_buf_p) = yy_cp;
| 
| #define YY_NUM_RULES 8
| #define YY_END_OF_BUFFER 9
| /* This struct is not used in this scanner,
|    but its presence is necessary. */
| struct yy_trans_info
| 	{
| 	flex_int32_t yy_verify;
| 	flex_int32_t yy_nxt;
| 	};
| static yyconst flex_int16_t yy_acclist[23] =
|     {   0,
|         9,    7,    8,    8,    1,    7,    8,    2,    7,    8,
|         3,    7,    8,    4,    7,    8,    5,    7,    8,    6,
|         7,    8
|     } ;
| 
| static yyconst flex_int16_t yy_accept[14] =
|     {   0,
|         1,    1,    1,    2,    4,    5,    8,   11,   14,   17,
|        20,   23,   23
|     } ;
| 
| static yyconst flex_int32_t yy_ec[256] =
|     {   0,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    3,    4,    5,    6,
| 
|         7,    8,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
| 
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1
|     } ;
| 
| static yyconst flex_int32_t yy_meta[9] =
|     {   0,
|         1,    1,    1,    1,    1,    1,    1,    1
|     } ;
| 
| static yyconst flex_int16_t yy_base[13] =
|     {   0,
|         0,    0,    9,   10,   10,   10,   10,   10,   10,   10,
|        10,   10
|     } ;
| 
| static yyconst flex_int16_t yy_def[13] =
|     {   0,
|        12,    1,   12,   12,   12,   12,   12,   12,   12,   12,
|        12,    0
|     } ;
| 
| static yyconst flex_int16_t yy_nxt[19] =
|     {   0,
|         4,    5,    6,    7,    8,    9,   10,   11,   12,    3,
|        12,   12,   12,   12,   12,   12,   12,   12
|     } ;
| 
| static yyconst flex_int16_t yy_chk[19] =
|     {   0,
|         1,    1,    1,    1,    1,    1,    1,    1,    3,   12,
|        12,   12,   12,   12,   12,   12,   12,   12
|     } ;
| 
| extern int yy_flex_debug;
| int yy_flex_debug = 0;
| 
| static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
| static char *yy_full_match;
| static int yy_lp;
| #define REJECT \
| { \
| *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
| yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
| ++(yy_lp); \
| goto find_rule; \
| }
| 
| static int yy_more_flag = 0;
| static int yy_more_len = 0;
| #define yymore() ((yy_more_flag) = 1)
| #define YY_MORE_ADJ (yy_more_len)
| #define YY_RESTORE_YY_MORE_OFFSET
| char *yytext;
| #line 1 "conftest.l"
| #line 477 "lex.yy.c"
| 
| #define INITIAL 0
| 
| #ifndef YY_NO_UNISTD_H
| /* Special case for "unistd.h", since it is non-ANSI. We include it way
|  * down here because we want the user's section 1 to have been scanned first.
|  * The user has a chance to override it with an option.
|  */
| #include <unistd.h>
| #endif
| 
| #ifndef YY_EXTRA_TYPE
| #define YY_EXTRA_TYPE void *
| #endif
| 
| static int yy_init_globals (void );
| 
| /* Accessor methods to globals.
|    These are made visible to non-reentrant scanners for convenience. */
| 
| int yylex_destroy (void );
| 
| int yyget_debug (void );
| 
| void yyset_debug (int debug_flag  );
| 
| YY_EXTRA_TYPE yyget_extra (void );
| 
| void yyset_extra (YY_EXTRA_TYPE user_defined  );
| 
| FILE *yyget_in (void );
| 
| void yyset_in  (FILE * in_str  );
| 
| FILE *yyget_out (void );
| 
| void yyset_out  (FILE * out_str  );
| 
| int yyget_leng (void );
| 
| char *yyget_text (void );
| 
| int yyget_lineno (void );
| 
| void yyset_lineno (int line_number  );
| 
| /* Macros after this point can all be overridden by user definitions in
|  * section 1.
|  */
| 
| #ifndef YY_SKIP_YYWRAP
| #ifdef __cplusplus
| extern "C" int yywrap (void );
| #else
| extern int yywrap (void );
| #endif
| #endif
| 
|     static void yyunput (int c,char *buf_ptr  );
|     
| #ifndef yytext_ptr
| static void yy_flex_strncpy (char *,yyconst char *,int );
| #endif
| 
| #ifdef YY_NEED_STRLEN
| static int yy_flex_strlen (yyconst char * );
| #endif
| 
| #ifndef YY_NO_INPUT
| 
| #ifdef __cplusplus
| static int yyinput (void );
| #else
| static int input (void );
| #endif
| 
| #endif
| 
| /* Amount of stuff to slurp up with each read. */
| #ifndef YY_READ_BUF_SIZE
| #ifdef __ia64__
| /* On IA-64, the buffer size is 16k, not 8k */
| #define YY_READ_BUF_SIZE 16384
| #else
| #define YY_READ_BUF_SIZE 8192
| #endif /* __ia64__ */
| #endif
| 
| /* Copy whatever the last rule matched to the standard output. */
| #ifndef ECHO
| /* This used to be an fputs(), but since the string might contain NUL's,
|  * we now use fwrite().
|  */
| #define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
| #endif
| 
| /* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
|  * is returned in "result".
|  */
| #ifndef YY_INPUT
| #define YY_INPUT(buf,result,max_size) \
| 	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
| 		{ \
| 		int c = '*'; \
| 		size_t n; \
| 		for ( n = 0; n < max_size && \
| 			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
| 			buf[n] = (char) c; \
| 		if ( c == '\n' ) \
| 			buf[n++] = (char) c; \
| 		if ( c == EOF && ferror( yyin ) ) \
| 			YY_FATAL_ERROR( "input in flex scanner failed" ); \
| 		result = n; \
| 		} \
| 	else \
| 		{ \
| 		errno=0; \
| 		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
| 			{ \
| 			if( errno != EINTR) \
| 				{ \
| 				YY_FATAL_ERROR( "input in flex scanner failed" ); \
| 				break; \
| 				} \
| 			errno=0; \
| 			clearerr(yyin); \
| 			} \
| 		}\
| \
| 
| #endif
| 
| /* No semi-colon after return; correct usage is to write "yyterminate();" -
|  * we don't want an extra ';' after the "return" because that will cause
|  * some compilers to complain about unreachable statements.
|  */
| #ifndef yyterminate
| #define yyterminate() return YY_NULL
| #endif
| 
| /* Number of entries by which start-condition stack grows. */
| #ifndef YY_START_STACK_INCR
| #define YY_START_STACK_INCR 25
| #endif
| 
| /* Report a fatal error. */
| #ifndef YY_FATAL_ERROR
| #define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
| #endif
| 
| /* end tables serialization structures and prototypes */
| 
| /* Default declaration of generated scanner - a define so the user can
|  * easily add parameters.
|  */
| #ifndef YY_DECL
| #define YY_DECL_IS_OURS 1
| 
| extern int yylex (void);
| 
| #define YY_DECL int yylex (void)
| #endif /* !YY_DECL */
| 
| /* Code executed at the beginning of each rule, after yytext and yyleng
|  * have been set up.
|  */
| #ifndef YY_USER_ACTION
| #define YY_USER_ACTION
| #endif
| 
| /* Code executed at the end of each rule. */
| #ifndef YY_BREAK
| #define YY_BREAK break;
| #endif
| 
| #define YY_RULE_SETUP \
| 	YY_USER_ACTION
| 
| /** The main scanner function which does all the work.
|  */
| YY_DECL
| {
| 	register yy_state_type yy_current_state;
| 	register char *yy_cp, *yy_bp;
| 	register int yy_act;
|     
| #line 1 "conftest.l"
| 
| #line 666 "lex.yy.c"
| 
| 	if ( !(yy_init) )
| 		{
| 		(yy_init) = 1;
| 
| #ifdef YY_USER_INIT
| 		YY_USER_INIT;
| #endif
| 
|         /* Create the reject buffer large enough to save one state per allowed character. */
|         if ( ! (yy_state_buf) )
|             (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
|             if ( ! (yy_state_buf) )
|                 YY_FATAL_ERROR( "out of dynamic memory in yylex()" );
| 
| 		if ( ! (yy_start) )
| 			(yy_start) = 1;	/* first start state */
| 
| 		if ( ! yyin )
| 			yyin = stdin;
| 
| 		if ( ! yyout )
| 			yyout = stdout;
| 
| 		if ( ! YY_CURRENT_BUFFER ) {
| 			yyensure_buffer_stack ();
| 			YY_CURRENT_BUFFER_LVALUE =
| 				yy_create_buffer(yyin,YY_BUF_SIZE );
| 		}
| 
| 		yy_load_buffer_state( );
| 		}
| 
| 	while ( 1 )		/* loops until end-of-file is reached */
| 		{
| 		(yy_more_len) = 0;
| 		if ( (yy_more_flag) )
| 			{
| 			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
| 			(yy_more_flag) = 0;
| 			}
| 		yy_cp = (yy_c_buf_p);
| 
| 		/* Support of yytext. */
| 		*yy_cp = (yy_hold_char);
| 
| 		/* yy_bp points to the position in yy_ch_buf of the start of
| 		 * the current run.
| 		 */
| 		yy_bp = yy_cp;
| 
| 		yy_current_state = (yy_start);
| 
| 		(yy_state_ptr) = (yy_state_buf);
| 		*(yy_state_ptr)++ = yy_current_state;
| 
| yy_match:
| 		do
| 			{
| 			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
| 			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
| 				{
| 				yy_current_state = (int) yy_def[yy_current_state];
| 				if ( yy_current_state >= 13 )
| 					yy_c = yy_meta[(unsigned int) yy_c];
| 				}
| 			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
| 			*(yy_state_ptr)++ = yy_current_state;
| 			++yy_cp;
| 			}
| 		while ( yy_base[yy_current_state] != 10 );
| 
| yy_find_action:
| 		yy_current_state = *--(yy_state_ptr);
| 		(yy_lp) = yy_accept[yy_current_state];
| find_rule: /* we branch to this label when backing up */
| 		for ( ; ; ) /* until we find what rule we matched */
| 			{
| 			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
| 				{
| 				yy_act = yy_acclist[(yy_lp)];
| 					{
| 					(yy_full_match) = yy_cp;
| 					break;
| 					}
| 				}
| 			--yy_cp;
| 			yy_current_state = *--(yy_state_ptr);
| 			(yy_lp) = yy_accept[yy_current_state];
| 			}
| 
| 		YY_DO_BEFORE_ACTION;
| 
| do_action:	/* This label is used only to access EOF actions. */
| 
| 		switch ( yy_act )
| 	{ /* beginning of action switch */
| case 1:
| YY_RULE_SETUP
| #line 2 "conftest.l"
| { ECHO; }
| 	YY_BREAK
| case 2:
| YY_RULE_SETUP
| #line 3 "conftest.l"
| { REJECT; }
| 	YY_BREAK
| case 3:
| YY_RULE_SETUP
| #line 4 "conftest.l"
| { yymore (); }
| 	YY_BREAK
| case 4:
| YY_RULE_SETUP
| #line 5 "conftest.l"
| { yyless (1); }
| 	YY_BREAK
| case 5:
| YY_RULE_SETUP
| #line 6 "conftest.l"
| { yyless (input () != 0); }
| 	YY_BREAK
| case 6:
| YY_RULE_SETUP
| #line 7 "conftest.l"
| { unput (yytext[0]); }
| 	YY_BREAK
| case 7:
| YY_RULE_SETUP
| #line 8 "conftest.l"
| { BEGIN INITIAL; }
| 	YY_BREAK
| case 8:
| YY_RULE_SETUP
| #line 9 "conftest.l"
| ECHO;
| 	YY_BREAK
| #line 804 "lex.yy.c"
| 			case YY_STATE_EOF(INITIAL):
| 				yyterminate();
| 
| 	case YY_END_OF_BUFFER:
| 		{
| 		/* Amount of text matched not including the EOB char. */
| 		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;
| 
| 		/* Undo the effects of YY_DO_BEFORE_ACTION. */
| 		*yy_cp = (yy_hold_char);
| 		YY_RESTORE_YY_MORE_OFFSET
| 
| 		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
| 			{
| 			/* We're scanning a new file or input source.  It's
| 			 * possible that this happened because the user
| 			 * just pointed yyin at a new source and called
| 			 * yylex().  If so, then we have to assure
| 			 * consistency between YY_CURRENT_BUFFER and our
| 			 * globals.  Here is the right place to do so, because
| 			 * this is the first action (other than possibly a
| 			 * back-up) that will match for the new input source.
| 			 */
| 			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
| 			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
| 			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
| 			}
| 
| 		/* Note that here we test for yy_c_buf_p "<=" to the position
| 		 * of the first EOB in the buffer, since yy_c_buf_p will
| 		 * already have been incremented past the NUL character
| 		 * (since all states make transitions on EOB to the
| 		 * end-of-buffer state).  Contrast this with the test
| 		 * in input().
| 		 */
| 		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
| 			{ /* This was really a NUL. */
| 			yy_state_type yy_next_state;
| 
| 			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;
| 
| 			yy_current_state = yy_get_previous_state(  );
| 
| 			/* Okay, we're now positioned to make the NUL
| 			 * transition.  We couldn't have
| 			 * yy_get_previous_state() go ahead and do it
| 			 * for us because it doesn't know how to deal
| 			 * with the possibility of jamming (and we don't
| 			 * want to build jamming into it because then it
| 			 * will run more slowly).
| 			 */
| 
| 			yy_next_state = yy_try_NUL_trans( yy_current_state );
| 
| 			yy_bp = (yytext_ptr) + YY_MORE_ADJ;
| 
| 			if ( yy_next_state )
| 				{
| 				/* Consume the NUL. */
| 				yy_cp = ++(yy_c_buf_p);
| 				yy_current_state = yy_next_state;
| 				goto yy_match;
| 				}
| 
| 			else
| 				{
| 				yy_cp = (yy_c_buf_p);
| 				goto yy_find_action;
| 				}
| 			}
| 
| 		else switch ( yy_get_next_buffer(  ) )
| 			{
| 			case EOB_ACT_END_OF_FILE:
| 				{
| 				(yy_did_buffer_switch_on_eof) = 0;
| 
| 				if ( yywrap( ) )
| 					{
| 					/* Note: because we've taken care in
| 					 * yy_get_next_buffer() to have set up
| 					 * yytext, we can now set up
| 					 * yy_c_buf_p so that if some total
| 					 * hoser (like flex itself) wants to
| 					 * call the scanner after we return the
| 					 * YY_NULL, it'll still work - another
| 					 * YY_NULL will get returned.
| 					 */
| 					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;
| 
| 					yy_act = YY_STATE_EOF(YY_START);
| 					goto do_action;
| 					}
| 
| 				else
| 					{
| 					if ( ! (yy_did_buffer_switch_on_eof) )
| 						YY_NEW_FILE;
| 					}
| 				break;
| 				}
| 
| 			case EOB_ACT_CONTINUE_SCAN:
| 				(yy_c_buf_p) =
| 					(yytext_ptr) + yy_amount_of_matched_text;
| 
| 				yy_current_state = yy_get_previous_state(  );
| 
| 				yy_cp = (yy_c_buf_p);
| 				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
| 				goto yy_match;
| 
| 			case EOB_ACT_LAST_MATCH:
| 				(yy_c_buf_p) =
| 				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];
| 
| 				yy_current_state = yy_get_previous_state(  );
| 
| 				yy_cp = (yy_c_buf_p);
| 				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
| 				goto yy_find_action;
| 			}
| 		break;
| 		}
| 
| 	default:
| 		YY_FATAL_ERROR(
| 			"fatal flex scanner internal error--no action found" );
| 	} /* end of action switch */
| 		} /* end of scanning one token */
| } /* end of yylex */
| 
| /* yy_get_next_buffer - try to read in a new buffer
|  *
|  * Returns a code representing an action:
|  *	EOB_ACT_LAST_MATCH -
|  *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
|  *	EOB_ACT_END_OF_FILE - end of file
|  */
| static int yy_get_next_buffer (void)
| {
|     	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
| 	register char *source = (yytext_ptr);
| 	register int number_to_move, i;
| 	int ret_val;
| 
| 	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
| 		YY_FATAL_ERROR(
| 		"fatal flex scanner internal error--end of buffer missed" );
| 
| 	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
| 		{ /* Don't try to fill the buffer, so this is an EOF. */
| 		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
| 			{
| 			/* We matched a single character, the EOB, so
| 			 * treat this as a final EOF.
| 			 */
| 			return EOB_ACT_END_OF_FILE;
| 			}
| 
| 		else
| 			{
| 			/* We matched some text prior to the EOB, first
| 			 * process it.
| 			 */
| 			return EOB_ACT_LAST_MATCH;
| 			}
| 		}
| 
| 	/* Try to read more data. */
| 
| 	/* First move last chars to start of buffer. */
| 	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;
| 
| 	for ( i = 0; i < number_to_move; ++i )
| 		*(dest++) = *(source++);
| 
| 	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
| 		/* don't do the read, it's not guaranteed to return an EOF,
| 		 * just force an EOF
| 		 */
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;
| 
| 	else
| 		{
| 			int num_to_read =
| 			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
| 
| 		while ( num_to_read <= 0 )
| 			{ /* Not enough room in the buffer - grow it. */
| 
| 			YY_FATAL_ERROR(
| "input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
| 
| 			}
| 
| 		if ( num_to_read > YY_READ_BUF_SIZE )
| 			num_to_read = YY_READ_BUF_SIZE;
| 
| 		/* Read in more data. */
| 		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
| 			(yy_n_chars), (size_t) num_to_read );
| 
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
| 		}
| 
| 	if ( (yy_n_chars) == 0 )
| 		{
| 		if ( number_to_move == YY_MORE_ADJ )
| 			{
| 			ret_val = EOB_ACT_END_OF_FILE;
| 			yyrestart(yyin  );
| 			}
| 
| 		else
| 			{
| 			ret_val = EOB_ACT_LAST_MATCH;
| 			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
| 				YY_BUFFER_EOF_PENDING;
| 			}
| 		}
| 
| 	else
| 		ret_val = EOB_ACT_CONTINUE_SCAN;
| 
| 	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
| 		/* Extend the array by 50%, plus the number we really need. */
| 		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
| 		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
| 		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
| 			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
| 	}
| 
| 	(yy_n_chars) += number_to_move;
| 	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
| 	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;
| 
| 	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];
| 
| 	return ret_val;
| }
| 
| /* yy_get_previous_state - get the state just before the EOB char was reached */
| 
|     static yy_state_type yy_get_previous_state (void)
| {
| 	register yy_state_type yy_current_state;
| 	register char *yy_cp;
|     
| 	yy_current_state = (yy_start);
| 
| 	(yy_state_ptr) = (yy_state_buf);
| 	*(yy_state_ptr)++ = yy_current_state;
| 
| 	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
| 		{
| 		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
| 		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
| 			{
| 			yy_current_state = (int) yy_def[yy_current_state];
| 			if ( yy_current_state >= 13 )
| 				yy_c = yy_meta[(unsigned int) yy_c];
| 			}
| 		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
| 		*(yy_state_ptr)++ = yy_current_state;
| 		}
| 
| 	return yy_current_state;
| }
| 
| /* yy_try_NUL_trans - try to make a transition on the NUL character
|  *
|  * synopsis
|  *	next_state = yy_try_NUL_trans( current_state );
|  */
|     static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
| {
| 	register int yy_is_jam;
|     
| 	register YY_CHAR yy_c = 1;
| 	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
| 		{
| 		yy_current_state = (int) yy_def[yy_current_state];
| 		if ( yy_current_state >= 13 )
| 			yy_c = yy_meta[(unsigned int) yy_c];
| 		}
| 	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
| 	yy_is_jam = (yy_current_state == 12);
| 	if ( ! yy_is_jam )
| 		*(yy_state_ptr)++ = yy_current_state;
| 
| 	return yy_is_jam ? 0 : yy_current_state;
| }
| 
|     static void yyunput (int c, register char * yy_bp )
| {
| 	register char *yy_cp;
|     
|     yy_cp = (yy_c_buf_p);
| 
| 	/* undo effects of setting up yytext */
| 	*yy_cp = (yy_hold_char);
| 
| 	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
| 		{ /* need to shift things up to make room */
| 		/* +2 for EOB chars. */
| 		register int number_to_move = (yy_n_chars) + 2;
| 		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
| 					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
| 		register char *source =
| 				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];
| 
| 		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
| 			*--dest = *--source;
| 
| 		yy_cp += (int) (dest - source);
| 		yy_bp += (int) (dest - source);
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
| 			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;
| 
| 		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
| 			YY_FATAL_ERROR( "flex scanner push-back overflow" );
| 		}
| 
| 	*--yy_cp = (char) c;
| 
| 	(yytext_ptr) = yy_bp;
| 	(yy_hold_char) = *yy_cp;
| 	(yy_c_buf_p) = yy_cp;
| }
| 
| #ifndef YY_NO_INPUT
| #ifdef __cplusplus
|     static int yyinput (void)
| #else
|     static int input  (void)
| #endif
| 
| {
| 	int c;
|     
| 	*(yy_c_buf_p) = (yy_hold_char);
| 
| 	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
| 		{
| 		/* yy_c_buf_p now points to the character we want to return.
| 		 * If this occurs *before* the EOB characters, then it's a
| 		 * valid NUL; if not, then we've hit the end of the buffer.
| 		 */
| 		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
| 			/* This was really a NUL. */
| 			*(yy_c_buf_p) = '\0';
| 
| 		else
| 			{ /* need more input */
| 			int offset = (yy_c_buf_p) - (yytext_ptr);
| 			++(yy_c_buf_p);
| 
| 			switch ( yy_get_next_buffer(  ) )
| 				{
| 				case EOB_ACT_LAST_MATCH:
| 					/* This happens because yy_g_n_b()
| 					 * sees that we've accumulated a
| 					 * token and flags that we need to
| 					 * try matching the token before
| 					 * proceeding.  But for input(),
| 					 * there's no matching to consider.
| 					 * So convert the EOB_ACT_LAST_MATCH
| 					 * to EOB_ACT_END_OF_FILE.
| 					 */
| 
| 					/* Reset buffer status. */
| 					yyrestart(yyin );
| 
| 					/*FALLTHROUGH*/
| 
| 				case EOB_ACT_END_OF_FILE:
| 					{
| 					if ( yywrap( ) )
| 						return EOF;
| 
| 					if ( ! (yy_did_buffer_switch_on_eof) )
| 						YY_NEW_FILE;
| #ifdef __cplusplus
| 					return yyinput();
| #else
| 					return input();
| #endif
| 					}
| 
| 				case EOB_ACT_CONTINUE_SCAN:
| 					(yy_c_buf_p) = (yytext_ptr) + offset;
| 					break;
| 				}
| 			}
| 		}
| 
| 	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
| 	*(yy_c_buf_p) = '\0';	/* preserve yytext */
| 	(yy_hold_char) = *++(yy_c_buf_p);
| 
| 	return c;
| }
| #endif	/* ifndef YY_NO_INPUT */
| 
| /** Immediately switch to a different input stream.
|  * @param input_file A readable stream.
|  * 
|  * @note This function does not reset the start condition to @c INITIAL .
|  */
|     void yyrestart  (FILE * input_file )
| {
|     
| 	if ( ! YY_CURRENT_BUFFER ){
|         yyensure_buffer_stack ();
| 		YY_CURRENT_BUFFER_LVALUE =
|             yy_create_buffer(yyin,YY_BUF_SIZE );
| 	}
| 
| 	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
| 	yy_load_buffer_state( );
| }
| 
| /** Switch to a different input buffer.
|  * @param new_buffer The new input buffer.
|  * 
|  */
|     void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
| {
|     
| 	/* TODO. We should be able to replace this entire function body
| 	 * with
| 	 *		yypop_buffer_state();
| 	 *		yypush_buffer_state(new_buffer);
|      */
| 	yyensure_buffer_stack ();
| 	if ( YY_CURRENT_BUFFER == new_buffer )
| 		return;
| 
| 	if ( YY_CURRENT_BUFFER )
| 		{
| 		/* Flush out information for old buffer. */
| 		*(yy_c_buf_p) = (yy_hold_char);
| 		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
| 		}
| 
| 	YY_CURRENT_BUFFER_LVALUE = new_buffer;
| 	yy_load_buffer_state( );
| 
| 	/* We don't actually know whether we did this switch during
| 	 * EOF (yywrap()) processing, but the only time this flag
| 	 * is looked at is after yywrap() is called, so it's safe
| 	 * to go ahead and always set it.
| 	 */
| 	(yy_did_buffer_switch_on_eof) = 1;
| }
| 
| static void yy_load_buffer_state  (void)
| {
|     	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
| 	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
| 	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
| 	(yy_hold_char) = *(yy_c_buf_p);
| }
| 
| /** Allocate and initialize an input buffer state.
|  * @param file A readable stream.
|  * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
|  * 
|  * @return the allocated buffer state.
|  */
|     YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
| {
| 	YY_BUFFER_STATE b;
|     
| 	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
| 	if ( ! b )
| 		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
| 
| 	b->yy_buf_size = size;
| 
| 	/* yy_ch_buf has to be 2 characters longer than the size given because
| 	 * we need to put in 2 end-of-buffer characters.
| 	 */
| 	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
| 	if ( ! b->yy_ch_buf )
| 		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
| 
| 	b->yy_is_our_buffer = 1;
| 
| 	yy_init_buffer(b,file );
| 
| 	return b;
| }
| 
| /** Destroy the buffer.
|  * @param b a buffer created with yy_create_buffer()
|  * 
|  */
|     void yy_delete_buffer (YY_BUFFER_STATE  b )
| {
|     
| 	if ( ! b )
| 		return;
| 
| 	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
| 		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;
| 
| 	if ( b->yy_is_our_buffer )
| 		yyfree((void *) b->yy_ch_buf  );
| 
| 	yyfree((void *) b  );
| }
| 
| #ifndef __cplusplus
| extern int isatty (int );
| #endif /* __cplusplus */
|     
| /* Initializes or reinitializes a buffer.
|  * This function is sometimes called more than once on the same buffer,
|  * such as during a yyrestart() or at EOF.
|  */
|     static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
| 
| {
| 	int oerrno = errno;
|     
| 	yy_flush_buffer(b );
| 
| 	b->yy_input_file = file;
| 	b->yy_fill_buffer = 1;
| 
|     /* If b is the current buffer, then yy_init_buffer was _probably_
|      * called from yyrestart() or through yy_get_next_buffer.
|      * In that case, we don't want to reset the lineno or column.
|      */
|     if (b != YY_CURRENT_BUFFER){
|         b->yy_bs_lineno = 1;
|         b->yy_bs_column = 0;
|     }
| 
|         b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
|     
| 	errno = oerrno;
| }
| 
| /** Discard all buffered characters. On the next scan, YY_INPUT will be called.
|  * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
|  * 
|  */
|     void yy_flush_buffer (YY_BUFFER_STATE  b )
| {
|     	if ( ! b )
| 		return;
| 
| 	b->yy_n_chars = 0;
| 
| 	/* We always need two end-of-buffer characters.  The first causes
| 	 * a transition to the end-of-buffer state.  The second causes
| 	 * a jam in that state.
| 	 */
| 	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
| 	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
| 
| 	b->yy_buf_pos = &b->yy_ch_buf[0];
| 
| 	b->yy_at_bol = 1;
| 	b->yy_buffer_status = YY_BUFFER_NEW;
| 
| 	if ( b == YY_CURRENT_BUFFER )
| 		yy_load_buffer_state( );
| }
| 
| /** Pushes the new state onto the stack. The new state becomes
|  *  the current state. This function will allocate the stack
|  *  if necessary.
|  *  @param new_buffer The new state.
|  *  
|  */
| void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
| {
|     	if (new_buffer == NULL)
| 		return;
| 
| 	yyensure_buffer_stack();
| 
| 	/* This block is copied from yy_switch_to_buffer. */
| 	if ( YY_CURRENT_BUFFER )
| 		{
| 		/* Flush out information for old buffer. */
| 		*(yy_c_buf_p) = (yy_hold_char);
| 		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
| 		}
| 
| 	/* Only push if top exists. Otherwise, replace top. */
| 	if (YY_CURRENT_BUFFER)
| 		(yy_buffer_stack_top)++;
| 	YY_CURRENT_BUFFER_LVALUE = new_buffer;
| 
| 	/* copied from yy_switch_to_buffer. */
| 	yy_load_buffer_state( );
| 	(yy_did_buffer_switch_on_eof) = 1;
| }
| 
| /** Removes and deletes the top of the stack, if present.
|  *  The next element becomes the new top.
|  *  
|  */
| void yypop_buffer_state (void)
| {
|     	if (!YY_CURRENT_BUFFER)
| 		return;
| 
| 	yy_delete_buffer(YY_CURRENT_BUFFER );
| 	YY_CURRENT_BUFFER_LVALUE = NULL;
| 	if ((yy_buffer_stack_top) > 0)
| 		--(yy_buffer_stack_top);
| 
| 	if (YY_CURRENT_BUFFER) {
| 		yy_load_buffer_state( );
| 		(yy_did_buffer_switch_on_eof) = 1;
| 	}
| }
| 
| /* Allocates the stack if it does not exist.
|  *  Guarantees space for at least one push.
|  */
| static void yyensure_buffer_stack (void)
| {
| 	int num_to_alloc;
|     
| 	if (!(yy_buffer_stack)) {
| 
| 		/* First allocation is just for 2 elements, since we don't know if this
| 		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
| 		 * immediate realloc on the next call.
|          */
| 		num_to_alloc = 1;
| 		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
| 								(num_to_alloc * sizeof(struct yy_buffer_state*)
| 								);
| 		if ( ! (yy_buffer_stack) )
| 			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
| 								  
| 		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
| 				
| 		(yy_buffer_stack_max) = num_to_alloc;
| 		(yy_buffer_stack_top) = 0;
| 		return;
| 	}
| 
| 	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){
| 
| 		/* Increase the buffer to prepare for a possible push. */
| 		int grow_size = 8 /* arbitrary grow size */;
| 
| 		num_to_alloc = (yy_buffer_stack_max) + grow_size;
| 		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
| 								((yy_buffer_stack),
| 								num_to_alloc * sizeof(struct yy_buffer_state*)
| 								);
| 		if ( ! (yy_buffer_stack) )
| 			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
| 
| 		/* zero only the new slots.*/
| 		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
| 		(yy_buffer_stack_max) = num_to_alloc;
| 	}
| }
| 
| /** Setup the input buffer state to scan directly from a user-specified character buffer.
|  * @param base the character buffer
|  * @param size the size in bytes of the character buffer
|  * 
|  * @return the newly allocated buffer state object. 
|  */
| YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
| {
| 	YY_BUFFER_STATE b;
|     
| 	if ( size < 2 ||
| 	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
| 	     base[size-1] != YY_END_OF_BUFFER_CHAR )
| 		/* They forgot to leave room for the EOB's. */
| 		return 0;
| 
| 	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
| 	if ( ! b )
| 		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
| 
| 	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
| 	b->yy_buf_pos = b->yy_ch_buf = base;
| 	b->yy_is_our_buffer = 0;
| 	b->yy_input_file = 0;
| 	b->yy_n_chars = b->yy_buf_size;
| 	b->yy_is_interactive = 0;
| 	b->yy_at_bol = 1;
| 	b->yy_fill_buffer = 0;
| 	b->yy_buffer_status = YY_BUFFER_NEW;
| 
| 	yy_switch_to_buffer(b  );
| 
| 	return b;
| }
| 
| /** Setup the input buffer state to scan a string. The next call to yylex() will
|  * scan from a @e copy of @a str.
|  * @param yystr a NUL-terminated string to scan
|  * 
|  * @return the newly allocated buffer state object.
|  * @note If you want to scan bytes that may contain NUL values, then use
|  *       yy_scan_bytes() instead.
|  */
| YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
| {
|     
| 	return yy_scan_bytes(yystr,strlen(yystr) );
| }
| 
| /** Setup the input buffer state to scan the given bytes. The next call to yylex() will
|  * scan from a @e copy of @a bytes.
|  * @param yybytes the byte buffer to scan
|  * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
|  * 
|  * @return the newly allocated buffer state object.
|  */
| YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
| {
| 	YY_BUFFER_STATE b;
| 	char *buf;
| 	yy_size_t n;
| 	int i;
|     
| 	/* Get memory for full buffer, including space for trailing EOB's. */
| 	n = _yybytes_len + 2;
| 	buf = (char *) yyalloc(n  );
| 	if ( ! buf )
| 		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
| 
| 	for ( i = 0; i < _yybytes_len; ++i )
| 		buf[i] = yybytes[i];
| 
| 	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;
| 
| 	b = yy_scan_buffer(buf,n );
| 	if ( ! b )
| 		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
| 
| 	/* It's okay to grow etc. this buffer, and we should throw it
| 	 * away when we're done.
| 	 */
| 	b->yy_is_our_buffer = 1;
| 
| 	return b;
| }
| 
| #ifndef YY_EXIT_FAILURE
| #define YY_EXIT_FAILURE 2
| #endif
| 
| static void yy_fatal_error (yyconst char* msg )
| {
|     	(void) fprintf( stderr, "%s\n", msg );
| 	exit( YY_EXIT_FAILURE );
| }
| 
| /* Redefine yyless() so it works in section 3 code. */
| 
| #undef yyless
| #define yyless(n) \
| 	do \
| 		{ \
| 		/* Undo effects of setting up yytext. */ \
|         int yyless_macro_arg = (n); \
|         YY_LESS_LINENO(yyless_macro_arg);\
| 		yytext[yyleng] = (yy_hold_char); \
| 		(yy_c_buf_p) = yytext + yyless_macro_arg; \
| 		(yy_hold_char) = *(yy_c_buf_p); \
| 		*(yy_c_buf_p) = '\0'; \
| 		yyleng = yyless_macro_arg; \
| 		} \
| 	while ( 0 )
| 
| /* Accessor  methods (get/set functions) to struct members. */
| 
| /** Get the current line number.
|  * 
|  */
| int yyget_lineno  (void)
| {
|         
|     return yylineno;
| }
| 
| /** Get the input stream.
|  * 
|  */
| FILE *yyget_in  (void)
| {
|         return yyin;
| }
| 
| /** Get the output stream.
|  * 
|  */
| FILE *yyget_out  (void)
| {
|         return yyout;
| }
| 
| /** Get the length of the current token.
|  * 
|  */
| int yyget_leng  (void)
| {
|         return yyleng;
| }
| 
| /** Get the current token.
|  * 
|  */
| 
| char *yyget_text  (void)
| {
|         return yytext;
| }
| 
| /** Set the current line number.
|  * @param line_number
|  * 
|  */
| void yyset_lineno (int  line_number )
| {
|     
|     yylineno = line_number;
| }
| 
| /** Set the input stream. This does not discard the current
|  * input buffer.
|  * @param in_str A readable stream.
|  * 
|  * @see yy_switch_to_buffer
|  */
| void yyset_in (FILE *  in_str )
| {
|         yyin = in_str ;
| }
| 
| void yyset_out (FILE *  out_str )
| {
|         yyout = out_str ;
| }
| 
| int yyget_debug  (void)
| {
|         return yy_flex_debug;
| }
| 
| void yyset_debug (int  bdebug )
| {
|         yy_flex_debug = bdebug ;
| }
| 
| static int yy_init_globals (void)
| {
|         /* Initialization is the same as for the non-reentrant scanner.
|      * This function is called from yylex_destroy(), so don't allocate here.
|      */
| 
|     (yy_buffer_stack) = 0;
|     (yy_buffer_stack_top) = 0;
|     (yy_buffer_stack_max) = 0;
|     (yy_c_buf_p) = (char *) 0;
|     (yy_init) = 0;
|     (yy_start) = 0;
| 
|     (yy_state_buf) = 0;
|     (yy_state_ptr) = 0;
|     (yy_full_match) = 0;
|     (yy_lp) = 0;
| 
| /* Defined in main.c */
| #ifdef YY_STDINIT
|     yyin = stdin;
|     yyout = stdout;
| #else
|     yyin = (FILE *) 0;
|     yyout = (FILE *) 0;
| #endif
| 
|     /* For future reference: Set errno on error, since we are called by
|      * yylex_init()
|      */
|     return 0;
| }
| 
| /* yylex_destroy is for both reentrant and non-reentrant scanners. */
| int yylex_destroy  (void)
| {
|     
|     /* Pop the buffer stack, destroying each element. */
| 	while(YY_CURRENT_BUFFER){
| 		yy_delete_buffer(YY_CURRENT_BUFFER  );
| 		YY_CURRENT_BUFFER_LVALUE = NULL;
| 		yypop_buffer_state();
| 	}
| 
| 	/* Destroy the stack itself. */
| 	yyfree((yy_buffer_stack) );
| 	(yy_buffer_stack) = NULL;
| 
|     yyfree ( (yy_state_buf) );
|     (yy_state_buf)  = NULL;
| 
|     /* Reset the globals. This is important in a non-reentrant scanner so the next time
|      * yylex() is called, initialization will occur. */
|     yy_init_globals( );
| 
|     return 0;
| }
| 
| /*
|  * Internal utility routines.
|  */
| 
| #ifndef yytext_ptr
| static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
| {
| 	register int i;
| 	for ( i = 0; i < n; ++i )
| 		s1[i] = s2[i];
| }
| #endif
| 
| #ifdef YY_NEED_STRLEN
| static int yy_flex_strlen (yyconst char * s )
| {
| 	register int n;
| 	for ( n = 0; s[n]; ++n )
| 		;
| 
| 	return n;
| }
| #endif
| 
| void *yyalloc (yy_size_t  size )
| {
| 	return (void *) malloc( size );
| }
| 
| void *yyrealloc  (void * ptr, yy_size_t  size )
| {
| 	/* The cast to (char *) in the following accommodates both
| 	 * implementations that use char* generic pointers, and those
| 	 * that use void* generic pointers.  It works with the latter
| 	 * because both ANSI C and C++ allow castless assignment from
| 	 * any pointer type to void*, and deal with argument conversions
| 	 * as though doing an assignment.
| 	 */
| 	return (void *) realloc( (char *) ptr, size );
| }
| 
| void yyfree (void * ptr )
| {
| 	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
| }
| 
| #define YYTABLES_NAME "yytables"
| 
| #line 9 "conftest.l"
| 
| 
| #ifdef YYTEXT_POINTER
| extern char *yytext;
| #endif
| int
| main (void)
| {
|   return ! yylex () + ! yywrap ();
| }
configure:3715: result: none needed
configure:3721: checking whether yytext is a pointer
configure:3742: g++ -o conftest -g -O2   conftest.cpp   >&5
conftest.l: In function 'int yylex()':
conftest.l:6: error: 'input' was not declared in this scope
configure:3748: $? = 1
configure: failed program was:
| #define YYTEXT_POINTER 1
| 
| #line 3 "lex.yy.c"
| 
| #define  YY_INT_ALIGNED short int
| 
| /* A lexical scanner generated by flex */
| 
| #define FLEX_SCANNER
| #define YY_FLEX_MAJOR_VERSION 2
| #define YY_FLEX_MINOR_VERSION 5
| #define YY_FLEX_SUBMINOR_VERSION 35
| #if YY_FLEX_SUBMINOR_VERSION > 0
| #define FLEX_BETA
| #endif
| 
| /* First, we deal with  platform-specific or compiler-specific issues. */
| 
| /* begin standard C headers. */
| #include <stdio.h>
| #include <string.h>
| #include <errno.h>
| #include <stdlib.h>
| 
| /* end standard C headers. */
| 
| /* flex integer type definitions */
| 
| #ifndef FLEXINT_H
| #define FLEXINT_H
| 
| /* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */
| 
| #if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
| 
| /* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
|  * if you want the limit (max/min) macros for int types. 
|  */
| #ifndef __STDC_LIMIT_MACROS
| #define __STDC_LIMIT_MACROS 1
| #endif
| 
| #include <inttypes.h>
| typedef int8_t flex_int8_t;
| typedef uint8_t flex_uint8_t;
| typedef int16_t flex_int16_t;
| typedef uint16_t flex_uint16_t;
| typedef int32_t flex_int32_t;
| typedef uint32_t flex_uint32_t;
| #else
| typedef signed char flex_int8_t;
| typedef short int flex_int16_t;
| typedef int flex_int32_t;
| typedef unsigned char flex_uint8_t; 
| typedef unsigned short int flex_uint16_t;
| typedef unsigned int flex_uint32_t;
| 
| /* Limits of integral types. */
| #ifndef INT8_MIN
| #define INT8_MIN               (-128)
| #endif
| #ifndef INT16_MIN
| #define INT16_MIN              (-32767-1)
| #endif
| #ifndef INT32_MIN
| #define INT32_MIN              (-2147483647-1)
| #endif
| #ifndef INT8_MAX
| #define INT8_MAX               (127)
| #endif
| #ifndef INT16_MAX
| #define INT16_MAX              (32767)
| #endif
| #ifndef INT32_MAX
| #define INT32_MAX              (2147483647)
| #endif
| #ifndef UINT8_MAX
| #define UINT8_MAX              (255U)
| #endif
| #ifndef UINT16_MAX
| #define UINT16_MAX             (65535U)
| #endif
| #ifndef UINT32_MAX
| #define UINT32_MAX             (4294967295U)
| #endif
| 
| #endif /* ! C99 */
| 
| #endif /* ! FLEXINT_H */
| 
| #ifdef __cplusplus
| 
| /* The "const" storage-class-modifier is valid. */
| #define YY_USE_CONST
| 
| #else	/* ! __cplusplus */
| 
| /* C99 requires __STDC__ to be defined as 1. */
| #if defined (__STDC__)
| 
| #define YY_USE_CONST
| 
| #endif	/* defined (__STDC__) */
| #endif	/* ! __cplusplus */
| 
| #ifdef YY_USE_CONST
| #define yyconst const
| #else
| #define yyconst
| #endif
| 
| /* Returned upon end-of-file. */
| #define YY_NULL 0
| 
| /* Promotes a possibly negative, possibly signed char to an unsigned
|  * integer for use as an array index.  If the signed char is negative,
|  * we want to instead treat it as an 8-bit unsigned char, hence the
|  * double cast.
|  */
| #define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
| 
| /* Enter a start condition.  This macro really ought to take a parameter,
|  * but we do it the disgusting crufty way forced on us by the ()-less
|  * definition of BEGIN.
|  */
| #define BEGIN (yy_start) = 1 + 2 *
| 
| /* Translate the current start state into a value that can be later handed
|  * to BEGIN to return to the state.  The YYSTATE alias is for lex
|  * compatibility.
|  */
| #define YY_START (((yy_start) - 1) / 2)
| #define YYSTATE YY_START
| 
| /* Action number for EOF rule of a given start state. */
| #define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
| 
| /* Special action meaning "start processing a new file". */
| #define YY_NEW_FILE yyrestart(yyin  )
| 
| #define YY_END_OF_BUFFER_CHAR 0
| 
| /* Size of default input buffer. */
| #ifndef YY_BUF_SIZE
| #ifdef __ia64__
| /* On IA-64, the buffer size is 16k, not 8k.
|  * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
|  * Ditto for the __ia64__ case accordingly.
|  */
| #define YY_BUF_SIZE 32768
| #else
| #define YY_BUF_SIZE 16384
| #endif /* __ia64__ */
| #endif
| 
| /* The state buf must be large enough to hold one state per character in the main buffer.
|  */
| #define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))
| 
| #ifndef YY_TYPEDEF_YY_BUFFER_STATE
| #define YY_TYPEDEF_YY_BUFFER_STATE
| typedef struct yy_buffer_state *YY_BUFFER_STATE;
| #endif
| 
| extern int yyleng;
| 
| extern FILE *yyin, *yyout;
| 
| #define EOB_ACT_CONTINUE_SCAN 0
| #define EOB_ACT_END_OF_FILE 1
| #define EOB_ACT_LAST_MATCH 2
| 
|     #define YY_LESS_LINENO(n)
|     
| /* Return all but the first "n" matched characters back to the input stream. */
| #define yyless(n) \
| 	do \
| 		{ \
| 		/* Undo effects of setting up yytext. */ \
|         int yyless_macro_arg = (n); \
|         YY_LESS_LINENO(yyless_macro_arg);\
| 		*yy_cp = (yy_hold_char); \
| 		YY_RESTORE_YY_MORE_OFFSET \
| 		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
| 		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
| 		} \
| 	while ( 0 )
| 
| #define unput(c) yyunput( c, (yytext_ptr)  )
| 
| #ifndef YY_TYPEDEF_YY_SIZE_T
| #define YY_TYPEDEF_YY_SIZE_T
| typedef size_t yy_size_t;
| #endif
| 
| #ifndef YY_STRUCT_YY_BUFFER_STATE
| #define YY_STRUCT_YY_BUFFER_STATE
| struct yy_buffer_state
| 	{
| 	FILE *yy_input_file;
| 
| 	char *yy_ch_buf;		/* input buffer */
| 	char *yy_buf_pos;		/* current position in input buffer */
| 
| 	/* Size of input buffer in bytes, not including room for EOB
| 	 * characters.
| 	 */
| 	yy_size_t yy_buf_size;
| 
| 	/* Number of characters read into yy_ch_buf, not including EOB
| 	 * characters.
| 	 */
| 	int yy_n_chars;
| 
| 	/* Whether we "own" the buffer - i.e., we know we created it,
| 	 * and can realloc() it to grow it, and should free() it to
| 	 * delete it.
| 	 */
| 	int yy_is_our_buffer;
| 
| 	/* Whether this is an "interactive" input source; if so, and
| 	 * if we're using stdio for input, then we want to use getc()
| 	 * instead of fread(), to make sure we stop fetching input after
| 	 * each newline.
| 	 */
| 	int yy_is_interactive;
| 
| 	/* Whether we're considered to be at the beginning of a line.
| 	 * If so, '^' rules will be active on the next match, otherwise
| 	 * not.
| 	 */
| 	int yy_at_bol;
| 
|     int yy_bs_lineno; /**< The line count. */
|     int yy_bs_column; /**< The column count. */
|     
| 	/* Whether to try to fill the input buffer when we reach the
| 	 * end of it.
| 	 */
| 	int yy_fill_buffer;
| 
| 	int yy_buffer_status;
| 
| #define YY_BUFFER_NEW 0
| #define YY_BUFFER_NORMAL 1
| 	/* When an EOF's been seen but there's still some text to process
| 	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
| 	 * shouldn't try reading from the input source any more.  We might
| 	 * still have a bunch of tokens to match, though, because of
| 	 * possible backing-up.
| 	 *
| 	 * When we actually see the EOF, we change the status to "new"
| 	 * (via yyrestart()), so that the user can continue scanning by
| 	 * just pointing yyin at a new input file.
| 	 */
| #define YY_BUFFER_EOF_PENDING 2
| 
| 	};
| #endif /* !YY_STRUCT_YY_BUFFER_STATE */
| 
| /* Stack of input buffers. */
| static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
| static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
| static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */
| 
| /* We provide macros for accessing buffer states in case in the
|  * future we want to put the buffer states in a more general
|  * "scanner state".
|  *
|  * Returns the top of the stack, or NULL.
|  */
| #define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
|                           ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
|                           : NULL)
| 
| /* Same as previous macro, but useful when we know that the buffer stack is not
|  * NULL or when we need an lvalue. For internal use only.
|  */
| #define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]
| 
| /* yy_hold_char holds the character lost when yytext is formed. */
| static char yy_hold_char;
| static int yy_n_chars;		/* number of characters read into yy_ch_buf */
| int yyleng;
| 
| /* Points to current character in buffer. */
| static char *yy_c_buf_p = (char *) 0;
| static int yy_init = 0;		/* whether we need to initialize */
| static int yy_start = 0;	/* start state number */
| 
| /* Flag which is used to allow yywrap()'s to do buffer switches
|  * instead of setting up a fresh yyin.  A bit of a hack ...
|  */
| static int yy_did_buffer_switch_on_eof;
| 
| void yyrestart (FILE *input_file  );
| void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
| YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
| void yy_delete_buffer (YY_BUFFER_STATE b  );
| void yy_flush_buffer (YY_BUFFER_STATE b  );
| void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
| void yypop_buffer_state (void );
| 
| static void yyensure_buffer_stack (void );
| static void yy_load_buffer_state (void );
| static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );
| 
| #define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )
| 
| YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
| YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
| YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );
| 
| void *yyalloc (yy_size_t  );
| void *yyrealloc (void *,yy_size_t  );
| void yyfree (void *  );
| 
| #define yy_new_buffer yy_create_buffer
| 
| #define yy_set_interactive(is_interactive) \
| 	{ \
| 	if ( ! YY_CURRENT_BUFFER ){ \
|         yyensure_buffer_stack (); \
| 		YY_CURRENT_BUFFER_LVALUE =    \
|             yy_create_buffer(yyin,YY_BUF_SIZE ); \
| 	} \
| 	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
| 	}
| 
| #define yy_set_bol(at_bol) \
| 	{ \
| 	if ( ! YY_CURRENT_BUFFER ){\
|         yyensure_buffer_stack (); \
| 		YY_CURRENT_BUFFER_LVALUE =    \
|             yy_create_buffer(yyin,YY_BUF_SIZE ); \
| 	} \
| 	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
| 	}
| 
| #define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)
| 
| /* Begin user sect3 */
| 
| typedef unsigned char YY_CHAR;
| 
| FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
| 
| typedef int yy_state_type;
| 
| extern int yylineno;
| 
| int yylineno = 1;
| 
| extern char *yytext;
| #define yytext_ptr yytext
| 
| static yy_state_type yy_get_previous_state (void );
| static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
| static int yy_get_next_buffer (void );
| static void yy_fatal_error (yyconst char msg[]  );
| 
| /* Done after the current pattern has been matched and before the
|  * corresponding action - sets up yytext.
|  */
| #define YY_DO_BEFORE_ACTION \
| 	(yytext_ptr) = yy_bp; \
| 	(yytext_ptr) -= (yy_more_len); \
| 	yyleng = (size_t) (yy_cp - (yytext_ptr)); \
| 	(yy_hold_char) = *yy_cp; \
| 	*yy_cp = '\0'; \
| 	(yy_c_buf_p) = yy_cp;
| 
| #define YY_NUM_RULES 8
| #define YY_END_OF_BUFFER 9
| /* This struct is not used in this scanner,
|    but its presence is necessary. */
| struct yy_trans_info
| 	{
| 	flex_int32_t yy_verify;
| 	flex_int32_t yy_nxt;
| 	};
| static yyconst flex_int16_t yy_acclist[23] =
|     {   0,
|         9,    7,    8,    8,    1,    7,    8,    2,    7,    8,
|         3,    7,    8,    4,    7,    8,    5,    7,    8,    6,
|         7,    8
|     } ;
| 
| static yyconst flex_int16_t yy_accept[14] =
|     {   0,
|         1,    1,    1,    2,    4,    5,    8,   11,   14,   17,
|        20,   23,   23
|     } ;
| 
| static yyconst flex_int32_t yy_ec[256] =
|     {   0,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    3,    4,    5,    6,
| 
|         7,    8,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
| 
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1
|     } ;
| 
| static yyconst flex_int32_t yy_meta[9] =
|     {   0,
|         1,    1,    1,    1,    1,    1,    1,    1
|     } ;
| 
| static yyconst flex_int16_t yy_base[13] =
|     {   0,
|         0,    0,    9,   10,   10,   10,   10,   10,   10,   10,
|        10,   10
|     } ;
| 
| static yyconst flex_int16_t yy_def[13] =
|     {   0,
|        12,    1,   12,   12,   12,   12,   12,   12,   12,   12,
|        12,    0
|     } ;
| 
| static yyconst flex_int16_t yy_nxt[19] =
|     {   0,
|         4,    5,    6,    7,    8,    9,   10,   11,   12,    3,
|        12,   12,   12,   12,   12,   12,   12,   12
|     } ;
| 
| static yyconst flex_int16_t yy_chk[19] =
|     {   0,
|         1,    1,    1,    1,    1,    1,    1,    1,    3,   12,
|        12,   12,   12,   12,   12,   12,   12,   12
|     } ;
| 
| extern int yy_flex_debug;
| int yy_flex_debug = 0;
| 
| static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
| static char *yy_full_match;
| static int yy_lp;
| #define REJECT \
| { \
| *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
| yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
| ++(yy_lp); \
| goto find_rule; \
| }
| 
| static int yy_more_flag = 0;
| static int yy_more_len = 0;
| #define yymore() ((yy_more_flag) = 1)
| #define YY_MORE_ADJ (yy_more_len)
| #define YY_RESTORE_YY_MORE_OFFSET
| char *yytext;
| #line 1 "conftest.l"
| #line 477 "lex.yy.c"
| 
| #define INITIAL 0
| 
| #ifndef YY_NO_UNISTD_H
| /* Special case for "unistd.h", since it is non-ANSI. We include it way
|  * down here because we want the user's section 1 to have been scanned first.
|  * The user has a chance to override it with an option.
|  */
| #include <unistd.h>
| #endif
| 
| #ifndef YY_EXTRA_TYPE
| #define YY_EXTRA_TYPE void *
| #endif
| 
| static int yy_init_globals (void );
| 
| /* Accessor methods to globals.
|    These are made visible to non-reentrant scanners for convenience. */
| 
| int yylex_destroy (void );
| 
| int yyget_debug (void );
| 
| void yyset_debug (int debug_flag  );
| 
| YY_EXTRA_TYPE yyget_extra (void );
| 
| void yyset_extra (YY_EXTRA_TYPE user_defined  );
| 
| FILE *yyget_in (void );
| 
| void yyset_in  (FILE * in_str  );
| 
| FILE *yyget_out (void );
| 
| void yyset_out  (FILE * out_str  );
| 
| int yyget_leng (void );
| 
| char *yyget_text (void );
| 
| int yyget_lineno (void );
| 
| void yyset_lineno (int line_number  );
| 
| /* Macros after this point can all be overridden by user definitions in
|  * section 1.
|  */
| 
| #ifndef YY_SKIP_YYWRAP
| #ifdef __cplusplus
| extern "C" int yywrap (void );
| #else
| extern int yywrap (void );
| #endif
| #endif
| 
|     static void yyunput (int c,char *buf_ptr  );
|     
| #ifndef yytext_ptr
| static void yy_flex_strncpy (char *,yyconst char *,int );
| #endif
| 
| #ifdef YY_NEED_STRLEN
| static int yy_flex_strlen (yyconst char * );
| #endif
| 
| #ifndef YY_NO_INPUT
| 
| #ifdef __cplusplus
| static int yyinput (void );
| #else
| static int input (void );
| #endif
| 
| #endif
| 
| /* Amount of stuff to slurp up with each read. */
| #ifndef YY_READ_BUF_SIZE
| #ifdef __ia64__
| /* On IA-64, the buffer size is 16k, not 8k */
| #define YY_READ_BUF_SIZE 16384
| #else
| #define YY_READ_BUF_SIZE 8192
| #endif /* __ia64__ */
| #endif
| 
| /* Copy whatever the last rule matched to the standard output. */
| #ifndef ECHO
| /* This used to be an fputs(), but since the string might contain NUL's,
|  * we now use fwrite().
|  */
| #define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
| #endif
| 
| /* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
|  * is returned in "result".
|  */
| #ifndef YY_INPUT
| #define YY_INPUT(buf,result,max_size) \
| 	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
| 		{ \
| 		int c = '*'; \
| 		size_t n; \
| 		for ( n = 0; n < max_size && \
| 			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
| 			buf[n] = (char) c; \
| 		if ( c == '\n' ) \
| 			buf[n++] = (char) c; \
| 		if ( c == EOF && ferror( yyin ) ) \
| 			YY_FATAL_ERROR( "input in flex scanner failed" ); \
| 		result = n; \
| 		} \
| 	else \
| 		{ \
| 		errno=0; \
| 		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
| 			{ \
| 			if( errno != EINTR) \
| 				{ \
| 				YY_FATAL_ERROR( "input in flex scanner failed" ); \
| 				break; \
| 				} \
| 			errno=0; \
| 			clearerr(yyin); \
| 			} \
| 		}\
| \
| 
| #endif
| 
| /* No semi-colon after return; correct usage is to write "yyterminate();" -
|  * we don't want an extra ';' after the "return" because that will cause
|  * some compilers to complain about unreachable statements.
|  */
| #ifndef yyterminate
| #define yyterminate() return YY_NULL
| #endif
| 
| /* Number of entries by which start-condition stack grows. */
| #ifndef YY_START_STACK_INCR
| #define YY_START_STACK_INCR 25
| #endif
| 
| /* Report a fatal error. */
| #ifndef YY_FATAL_ERROR
| #define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
| #endif
| 
| /* end tables serialization structures and prototypes */
| 
| /* Default declaration of generated scanner - a define so the user can
|  * easily add parameters.
|  */
| #ifndef YY_DECL
| #define YY_DECL_IS_OURS 1
| 
| extern int yylex (void);
| 
| #define YY_DECL int yylex (void)
| #endif /* !YY_DECL */
| 
| /* Code executed at the beginning of each rule, after yytext and yyleng
|  * have been set up.
|  */
| #ifndef YY_USER_ACTION
| #define YY_USER_ACTION
| #endif
| 
| /* Code executed at the end of each rule. */
| #ifndef YY_BREAK
| #define YY_BREAK break;
| #endif
| 
| #define YY_RULE_SETUP \
| 	YY_USER_ACTION
| 
| /** The main scanner function which does all the work.
|  */
| YY_DECL
| {
| 	register yy_state_type yy_current_state;
| 	register char *yy_cp, *yy_bp;
| 	register int yy_act;
|     
| #line 1 "conftest.l"
| 
| #line 666 "lex.yy.c"
| 
| 	if ( !(yy_init) )
| 		{
| 		(yy_init) = 1;
| 
| #ifdef YY_USER_INIT
| 		YY_USER_INIT;
| #endif
| 
|         /* Create the reject buffer large enough to save one state per allowed character. */
|         if ( ! (yy_state_buf) )
|             (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
|             if ( ! (yy_state_buf) )
|                 YY_FATAL_ERROR( "out of dynamic memory in yylex()" );
| 
| 		if ( ! (yy_start) )
| 			(yy_start) = 1;	/* first start state */
| 
| 		if ( ! yyin )
| 			yyin = stdin;
| 
| 		if ( ! yyout )
| 			yyout = stdout;
| 
| 		if ( ! YY_CURRENT_BUFFER ) {
| 			yyensure_buffer_stack ();
| 			YY_CURRENT_BUFFER_LVALUE =
| 				yy_create_buffer(yyin,YY_BUF_SIZE );
| 		}
| 
| 		yy_load_buffer_state( );
| 		}
| 
| 	while ( 1 )		/* loops until end-of-file is reached */
| 		{
| 		(yy_more_len) = 0;
| 		if ( (yy_more_flag) )
| 			{
| 			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
| 			(yy_more_flag) = 0;
| 			}
| 		yy_cp = (yy_c_buf_p);
| 
| 		/* Support of yytext. */
| 		*yy_cp = (yy_hold_char);
| 
| 		/* yy_bp points to the position in yy_ch_buf of the start of
| 		 * the current run.
| 		 */
| 		yy_bp = yy_cp;
| 
| 		yy_current_state = (yy_start);
| 
| 		(yy_state_ptr) = (yy_state_buf);
| 		*(yy_state_ptr)++ = yy_current_state;
| 
| yy_match:
| 		do
| 			{
| 			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
| 			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
| 				{
| 				yy_current_state = (int) yy_def[yy_current_state];
| 				if ( yy_current_state >= 13 )
| 					yy_c = yy_meta[(unsigned int) yy_c];
| 				}
| 			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
| 			*(yy_state_ptr)++ = yy_current_state;
| 			++yy_cp;
| 			}
| 		while ( yy_base[yy_current_state] != 10 );
| 
| yy_find_action:
| 		yy_current_state = *--(yy_state_ptr);
| 		(yy_lp) = yy_accept[yy_current_state];
| find_rule: /* we branch to this label when backing up */
| 		for ( ; ; ) /* until we find what rule we matched */
| 			{
| 			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
| 				{
| 				yy_act = yy_acclist[(yy_lp)];
| 					{
| 					(yy_full_match) = yy_cp;
| 					break;
| 					}
| 				}
| 			--yy_cp;
| 			yy_current_state = *--(yy_state_ptr);
| 			(yy_lp) = yy_accept[yy_current_state];
| 			}
| 
| 		YY_DO_BEFORE_ACTION;
| 
| do_action:	/* This label is used only to access EOF actions. */
| 
| 		switch ( yy_act )
| 	{ /* beginning of action switch */
| case 1:
| YY_RULE_SETUP
| #line 2 "conftest.l"
| { ECHO; }
| 	YY_BREAK
| case 2:
| YY_RULE_SETUP
| #line 3 "conftest.l"
| { REJECT; }
| 	YY_BREAK
| case 3:
| YY_RULE_SETUP
| #line 4 "conftest.l"
| { yymore (); }
| 	YY_BREAK
| case 4:
| YY_RULE_SETUP
| #line 5 "conftest.l"
| { yyless (1); }
| 	YY_BREAK
| case 5:
| YY_RULE_SETUP
| #line 6 "conftest.l"
| { yyless (input () != 0); }
| 	YY_BREAK
| case 6:
| YY_RULE_SETUP
| #line 7 "conftest.l"
| { unput (yytext[0]); }
| 	YY_BREAK
| case 7:
| YY_RULE_SETUP
| #line 8 "conftest.l"
| { BEGIN INITIAL; }
| 	YY_BREAK
| case 8:
| YY_RULE_SETUP
| #line 9 "conftest.l"
| ECHO;
| 	YY_BREAK
| #line 804 "lex.yy.c"
| 			case YY_STATE_EOF(INITIAL):
| 				yyterminate();
| 
| 	case YY_END_OF_BUFFER:
| 		{
| 		/* Amount of text matched not including the EOB char. */
| 		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;
| 
| 		/* Undo the effects of YY_DO_BEFORE_ACTION. */
| 		*yy_cp = (yy_hold_char);
| 		YY_RESTORE_YY_MORE_OFFSET
| 
| 		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
| 			{
| 			/* We're scanning a new file or input source.  It's
| 			 * possible that this happened because the user
| 			 * just pointed yyin at a new source and called
| 			 * yylex().  If so, then we have to assure
| 			 * consistency between YY_CURRENT_BUFFER and our
| 			 * globals.  Here is the right place to do so, because
| 			 * this is the first action (other than possibly a
| 			 * back-up) that will match for the new input source.
| 			 */
| 			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
| 			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
| 			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
| 			}
| 
| 		/* Note that here we test for yy_c_buf_p "<=" to the position
| 		 * of the first EOB in the buffer, since yy_c_buf_p will
| 		 * already have been incremented past the NUL character
| 		 * (since all states make transitions on EOB to the
| 		 * end-of-buffer state).  Contrast this with the test
| 		 * in input().
| 		 */
| 		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
| 			{ /* This was really a NUL. */
| 			yy_state_type yy_next_state;
| 
| 			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;
| 
| 			yy_current_state = yy_get_previous_state(  );
| 
| 			/* Okay, we're now positioned to make the NUL
| 			 * transition.  We couldn't have
| 			 * yy_get_previous_state() go ahead and do it
| 			 * for us because it doesn't know how to deal
| 			 * with the possibility of jamming (and we don't
| 			 * want to build jamming into it because then it
| 			 * will run more slowly).
| 			 */
| 
| 			yy_next_state = yy_try_NUL_trans( yy_current_state );
| 
| 			yy_bp = (yytext_ptr) + YY_MORE_ADJ;
| 
| 			if ( yy_next_state )
| 				{
| 				/* Consume the NUL. */
| 				yy_cp = ++(yy_c_buf_p);
| 				yy_current_state = yy_next_state;
| 				goto yy_match;
| 				}
| 
| 			else
| 				{
| 				yy_cp = (yy_c_buf_p);
| 				goto yy_find_action;
| 				}
| 			}
| 
| 		else switch ( yy_get_next_buffer(  ) )
| 			{
| 			case EOB_ACT_END_OF_FILE:
| 				{
| 				(yy_did_buffer_switch_on_eof) = 0;
| 
| 				if ( yywrap( ) )
| 					{
| 					/* Note: because we've taken care in
| 					 * yy_get_next_buffer() to have set up
| 					 * yytext, we can now set up
| 					 * yy_c_buf_p so that if some total
| 					 * hoser (like flex itself) wants to
| 					 * call the scanner after we return the
| 					 * YY_NULL, it'll still work - another
| 					 * YY_NULL will get returned.
| 					 */
| 					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;
| 
| 					yy_act = YY_STATE_EOF(YY_START);
| 					goto do_action;
| 					}
| 
| 				else
| 					{
| 					if ( ! (yy_did_buffer_switch_on_eof) )
| 						YY_NEW_FILE;
| 					}
| 				break;
| 				}
| 
| 			case EOB_ACT_CONTINUE_SCAN:
| 				(yy_c_buf_p) =
| 					(yytext_ptr) + yy_amount_of_matched_text;
| 
| 				yy_current_state = yy_get_previous_state(  );
| 
| 				yy_cp = (yy_c_buf_p);
| 				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
| 				goto yy_match;
| 
| 			case EOB_ACT_LAST_MATCH:
| 				(yy_c_buf_p) =
| 				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];
| 
| 				yy_current_state = yy_get_previous_state(  );
| 
| 				yy_cp = (yy_c_buf_p);
| 				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
| 				goto yy_find_action;
| 			}
| 		break;
| 		}
| 
| 	default:
| 		YY_FATAL_ERROR(
| 			"fatal flex scanner internal error--no action found" );
| 	} /* end of action switch */
| 		} /* end of scanning one token */
| } /* end of yylex */
| 
| /* yy_get_next_buffer - try to read in a new buffer
|  *
|  * Returns a code representing an action:
|  *	EOB_ACT_LAST_MATCH -
|  *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
|  *	EOB_ACT_END_OF_FILE - end of file
|  */
| static int yy_get_next_buffer (void)
| {
|     	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
| 	register char *source = (yytext_ptr);
| 	register int number_to_move, i;
| 	int ret_val;
| 
| 	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
| 		YY_FATAL_ERROR(
| 		"fatal flex scanner internal error--end of buffer missed" );
| 
| 	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
| 		{ /* Don't try to fill the buffer, so this is an EOF. */
| 		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
| 			{
| 			/* We matched a single character, the EOB, so
| 			 * treat this as a final EOF.
| 			 */
| 			return EOB_ACT_END_OF_FILE;
| 			}
| 
| 		else
| 			{
| 			/* We matched some text prior to the EOB, first
| 			 * process it.
| 			 */
| 			return EOB_ACT_LAST_MATCH;
| 			}
| 		}
| 
| 	/* Try to read more data. */
| 
| 	/* First move last chars to start of buffer. */
| 	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;
| 
| 	for ( i = 0; i < number_to_move; ++i )
| 		*(dest++) = *(source++);
| 
| 	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
| 		/* don't do the read, it's not guaranteed to return an EOF,
| 		 * just force an EOF
| 		 */
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;
| 
| 	else
| 		{
| 			int num_to_read =
| 			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
| 
| 		while ( num_to_read <= 0 )
| 			{ /* Not enough room in the buffer - grow it. */
| 
| 			YY_FATAL_ERROR(
| "input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
| 
| 			}
| 
| 		if ( num_to_read > YY_READ_BUF_SIZE )
| 			num_to_read = YY_READ_BUF_SIZE;
| 
| 		/* Read in more data. */
| 		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
| 			(yy_n_chars), (size_t) num_to_read );
| 
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
| 		}
| 
| 	if ( (yy_n_chars) == 0 )
| 		{
| 		if ( number_to_move == YY_MORE_ADJ )
| 			{
| 			ret_val = EOB_ACT_END_OF_FILE;
| 			yyrestart(yyin  );
| 			}
| 
| 		else
| 			{
| 			ret_val = EOB_ACT_LAST_MATCH;
| 			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
| 				YY_BUFFER_EOF_PENDING;
| 			}
| 		}
| 
| 	else
| 		ret_val = EOB_ACT_CONTINUE_SCAN;
| 
| 	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
| 		/* Extend the array by 50%, plus the number we really need. */
| 		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
| 		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
| 		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
| 			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
| 	}
| 
| 	(yy_n_chars) += number_to_move;
| 	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
| 	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;
| 
| 	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];
| 
| 	return ret_val;
| }
| 
| /* yy_get_previous_state - get the state just before the EOB char was reached */
| 
|     static yy_state_type yy_get_previous_state (void)
| {
| 	register yy_state_type yy_current_state;
| 	register char *yy_cp;
|     
| 	yy_current_state = (yy_start);
| 
| 	(yy_state_ptr) = (yy_state_buf);
| 	*(yy_state_ptr)++ = yy_current_state;
| 
| 	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
| 		{
| 		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
| 		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
| 			{
| 			yy_current_state = (int) yy_def[yy_current_state];
| 			if ( yy_current_state >= 13 )
| 				yy_c = yy_meta[(unsigned int) yy_c];
| 			}
| 		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
| 		*(yy_state_ptr)++ = yy_current_state;
| 		}
| 
| 	return yy_current_state;
| }
| 
| /* yy_try_NUL_trans - try to make a transition on the NUL character
|  *
|  * synopsis
|  *	next_state = yy_try_NUL_trans( current_state );
|  */
|     static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
| {
| 	register int yy_is_jam;
|     
| 	register YY_CHAR yy_c = 1;
| 	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
| 		{
| 		yy_current_state = (int) yy_def[yy_current_state];
| 		if ( yy_current_state >= 13 )
| 			yy_c = yy_meta[(unsigned int) yy_c];
| 		}
| 	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
| 	yy_is_jam = (yy_current_state == 12);
| 	if ( ! yy_is_jam )
| 		*(yy_state_ptr)++ = yy_current_state;
| 
| 	return yy_is_jam ? 0 : yy_current_state;
| }
| 
|     static void yyunput (int c, register char * yy_bp )
| {
| 	register char *yy_cp;
|     
|     yy_cp = (yy_c_buf_p);
| 
| 	/* undo effects of setting up yytext */
| 	*yy_cp = (yy_hold_char);
| 
| 	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
| 		{ /* need to shift things up to make room */
| 		/* +2 for EOB chars. */
| 		register int number_to_move = (yy_n_chars) + 2;
| 		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
| 					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
| 		register char *source =
| 				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];
| 
| 		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
| 			*--dest = *--source;
| 
| 		yy_cp += (int) (dest - source);
| 		yy_bp += (int) (dest - source);
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
| 			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;
| 
| 		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
| 			YY_FATAL_ERROR( "flex scanner push-back overflow" );
| 		}
| 
| 	*--yy_cp = (char) c;
| 
| 	(yytext_ptr) = yy_bp;
| 	(yy_hold_char) = *yy_cp;
| 	(yy_c_buf_p) = yy_cp;
| }
| 
| #ifndef YY_NO_INPUT
| #ifdef __cplusplus
|     static int yyinput (void)
| #else
|     static int input  (void)
| #endif
| 
| {
| 	int c;
|     
| 	*(yy_c_buf_p) = (yy_hold_char);
| 
| 	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
| 		{
| 		/* yy_c_buf_p now points to the character we want to return.
| 		 * If this occurs *before* the EOB characters, then it's a
| 		 * valid NUL; if not, then we've hit the end of the buffer.
| 		 */
| 		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
| 			/* This was really a NUL. */
| 			*(yy_c_buf_p) = '\0';
| 
| 		else
| 			{ /* need more input */
| 			int offset = (yy_c_buf_p) - (yytext_ptr);
| 			++(yy_c_buf_p);
| 
| 			switch ( yy_get_next_buffer(  ) )
| 				{
| 				case EOB_ACT_LAST_MATCH:
| 					/* This happens because yy_g_n_b()
| 					 * sees that we've accumulated a
| 					 * token and flags that we need to
| 					 * try matching the token before
| 					 * proceeding.  But for input(),
| 					 * there's no matching to consider.
| 					 * So convert the EOB_ACT_LAST_MATCH
| 					 * to EOB_ACT_END_OF_FILE.
| 					 */
| 
| 					/* Reset buffer status. */
| 					yyrestart(yyin );
| 
| 					/*FALLTHROUGH*/
| 
| 				case EOB_ACT_END_OF_FILE:
| 					{
| 					if ( yywrap( ) )
| 						return EOF;
| 
| 					if ( ! (yy_did_buffer_switch_on_eof) )
| 						YY_NEW_FILE;
| #ifdef __cplusplus
| 					return yyinput();
| #else
| 					return input();
| #endif
| 					}
| 
| 				case EOB_ACT_CONTINUE_SCAN:
| 					(yy_c_buf_p) = (yytext_ptr) + offset;
| 					break;
| 				}
| 			}
| 		}
| 
| 	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
| 	*(yy_c_buf_p) = '\0';	/* preserve yytext */
| 	(yy_hold_char) = *++(yy_c_buf_p);
| 
| 	return c;
| }
| #endif	/* ifndef YY_NO_INPUT */
| 
| /** Immediately switch to a different input stream.
|  * @param input_file A readable stream.
|  * 
|  * @note This function does not reset the start condition to @c INITIAL .
|  */
|     void yyrestart  (FILE * input_file )
| {
|     
| 	if ( ! YY_CURRENT_BUFFER ){
|         yyensure_buffer_stack ();
| 		YY_CURRENT_BUFFER_LVALUE =
|             yy_create_buffer(yyin,YY_BUF_SIZE );
| 	}
| 
| 	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
| 	yy_load_buffer_state( );
| }
| 
| /** Switch to a different input buffer.
|  * @param new_buffer The new input buffer.
|  * 
|  */
|     void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
| {
|     
| 	/* TODO. We should be able to replace this entire function body
| 	 * with
| 	 *		yypop_buffer_state();
| 	 *		yypush_buffer_state(new_buffer);
|      */
| 	yyensure_buffer_stack ();
| 	if ( YY_CURRENT_BUFFER == new_buffer )
| 		return;
| 
| 	if ( YY_CURRENT_BUFFER )
| 		{
| 		/* Flush out information for old buffer. */
| 		*(yy_c_buf_p) = (yy_hold_char);
| 		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
| 		}
| 
| 	YY_CURRENT_BUFFER_LVALUE = new_buffer;
| 	yy_load_buffer_state( );
| 
| 	/* We don't actually know whether we did this switch during
| 	 * EOF (yywrap()) processing, but the only time this flag
| 	 * is looked at is after yywrap() is called, so it's safe
| 	 * to go ahead and always set it.
| 	 */
| 	(yy_did_buffer_switch_on_eof) = 1;
| }
| 
| static void yy_load_buffer_state  (void)
| {
|     	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
| 	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
| 	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
| 	(yy_hold_char) = *(yy_c_buf_p);
| }
| 
| /** Allocate and initialize an input buffer state.
|  * @param file A readable stream.
|  * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
|  * 
|  * @return the allocated buffer state.
|  */
|     YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
| {
| 	YY_BUFFER_STATE b;
|     
| 	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
| 	if ( ! b )
| 		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
| 
| 	b->yy_buf_size = size;
| 
| 	/* yy_ch_buf has to be 2 characters longer than the size given because
| 	 * we need to put in 2 end-of-buffer characters.
| 	 */
| 	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
| 	if ( ! b->yy_ch_buf )
| 		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
| 
| 	b->yy_is_our_buffer = 1;
| 
| 	yy_init_buffer(b,file );
| 
| 	return b;
| }
| 
| /** Destroy the buffer.
|  * @param b a buffer created with yy_create_buffer()
|  * 
|  */
|     void yy_delete_buffer (YY_BUFFER_STATE  b )
| {
|     
| 	if ( ! b )
| 		return;
| 
| 	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
| 		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;
| 
| 	if ( b->yy_is_our_buffer )
| 		yyfree((void *) b->yy_ch_buf  );
| 
| 	yyfree((void *) b  );
| }
| 
| #ifndef __cplusplus
| extern int isatty (int );
| #endif /* __cplusplus */
|     
| /* Initializes or reinitializes a buffer.
|  * This function is sometimes called more than once on the same buffer,
|  * such as during a yyrestart() or at EOF.
|  */
|     static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
| 
| {
| 	int oerrno = errno;
|     
| 	yy_flush_buffer(b );
| 
| 	b->yy_input_file = file;
| 	b->yy_fill_buffer = 1;
| 
|     /* If b is the current buffer, then yy_init_buffer was _probably_
|      * called from yyrestart() or through yy_get_next_buffer.
|      * In that case, we don't want to reset the lineno or column.
|      */
|     if (b != YY_CURRENT_BUFFER){
|         b->yy_bs_lineno = 1;
|         b->yy_bs_column = 0;
|     }
| 
|         b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
|     
| 	errno = oerrno;
| }
| 
| /** Discard all buffered characters. On the next scan, YY_INPUT will be called.
|  * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
|  * 
|  */
|     void yy_flush_buffer (YY_BUFFER_STATE  b )
| {
|     	if ( ! b )
| 		return;
| 
| 	b->yy_n_chars = 0;
| 
| 	/* We always need two end-of-buffer characters.  The first causes
| 	 * a transition to the end-of-buffer state.  The second causes
| 	 * a jam in that state.
| 	 */
| 	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
| 	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
| 
| 	b->yy_buf_pos = &b->yy_ch_buf[0];
| 
| 	b->yy_at_bol = 1;
| 	b->yy_buffer_status = YY_BUFFER_NEW;
| 
| 	if ( b == YY_CURRENT_BUFFER )
| 		yy_load_buffer_state( );
| }
| 
| /** Pushes the new state onto the stack. The new state becomes
|  *  the current state. This function will allocate the stack
|  *  if necessary.
|  *  @param new_buffer The new state.
|  *  
|  */
| void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
| {
|     	if (new_buffer == NULL)
| 		return;
| 
| 	yyensure_buffer_stack();
| 
| 	/* This block is copied from yy_switch_to_buffer. */
| 	if ( YY_CURRENT_BUFFER )
| 		{
| 		/* Flush out information for old buffer. */
| 		*(yy_c_buf_p) = (yy_hold_char);
| 		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
| 		}
| 
| 	/* Only push if top exists. Otherwise, replace top. */
| 	if (YY_CURRENT_BUFFER)
| 		(yy_buffer_stack_top)++;
| 	YY_CURRENT_BUFFER_LVALUE = new_buffer;
| 
| 	/* copied from yy_switch_to_buffer. */
| 	yy_load_buffer_state( );
| 	(yy_did_buffer_switch_on_eof) = 1;
| }
| 
| /** Removes and deletes the top of the stack, if present.
|  *  The next element becomes the new top.
|  *  
|  */
| void yypop_buffer_state (void)
| {
|     	if (!YY_CURRENT_BUFFER)
| 		return;
| 
| 	yy_delete_buffer(YY_CURRENT_BUFFER );
| 	YY_CURRENT_BUFFER_LVALUE = NULL;
| 	if ((yy_buffer_stack_top) > 0)
| 		--(yy_buffer_stack_top);
| 
| 	if (YY_CURRENT_BUFFER) {
| 		yy_load_buffer_state( );
| 		(yy_did_buffer_switch_on_eof) = 1;
| 	}
| }
| 
| /* Allocates the stack if it does not exist.
|  *  Guarantees space for at least one push.
|  */
| static void yyensure_buffer_stack (void)
| {
| 	int num_to_alloc;
|     
| 	if (!(yy_buffer_stack)) {
| 
| 		/* First allocation is just for 2 elements, since we don't know if this
| 		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
| 		 * immediate realloc on the next call.
|          */
| 		num_to_alloc = 1;
| 		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
| 								(num_to_alloc * sizeof(struct yy_buffer_state*)
| 								);
| 		if ( ! (yy_buffer_stack) )
| 			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
| 								  
| 		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
| 				
| 		(yy_buffer_stack_max) = num_to_alloc;
| 		(yy_buffer_stack_top) = 0;
| 		return;
| 	}
| 
| 	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){
| 
| 		/* Increase the buffer to prepare for a possible push. */
| 		int grow_size = 8 /* arbitrary grow size */;
| 
| 		num_to_alloc = (yy_buffer_stack_max) + grow_size;
| 		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
| 								((yy_buffer_stack),
| 								num_to_alloc * sizeof(struct yy_buffer_state*)
| 								);
| 		if ( ! (yy_buffer_stack) )
| 			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
| 
| 		/* zero only the new slots.*/
| 		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
| 		(yy_buffer_stack_max) = num_to_alloc;
| 	}
| }
| 
| /** Setup the input buffer state to scan directly from a user-specified character buffer.
|  * @param base the character buffer
|  * @param size the size in bytes of the character buffer
|  * 
|  * @return the newly allocated buffer state object. 
|  */
| YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
| {
| 	YY_BUFFER_STATE b;
|     
| 	if ( size < 2 ||
| 	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
| 	     base[size-1] != YY_END_OF_BUFFER_CHAR )
| 		/* They forgot to leave room for the EOB's. */
| 		return 0;
| 
| 	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
| 	if ( ! b )
| 		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
| 
| 	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
| 	b->yy_buf_pos = b->yy_ch_buf = base;
| 	b->yy_is_our_buffer = 0;
| 	b->yy_input_file = 0;
| 	b->yy_n_chars = b->yy_buf_size;
| 	b->yy_is_interactive = 0;
| 	b->yy_at_bol = 1;
| 	b->yy_fill_buffer = 0;
| 	b->yy_buffer_status = YY_BUFFER_NEW;
| 
| 	yy_switch_to_buffer(b  );
| 
| 	return b;
| }
| 
| /** Setup the input buffer state to scan a string. The next call to yylex() will
|  * scan from a @e copy of @a str.
|  * @param yystr a NUL-terminated string to scan
|  * 
|  * @return the newly allocated buffer state object.
|  * @note If you want to scan bytes that may contain NUL values, then use
|  *       yy_scan_bytes() instead.
|  */
| YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
| {
|     
| 	return yy_scan_bytes(yystr,strlen(yystr) );
| }
| 
| /** Setup the input buffer state to scan the given bytes. The next call to yylex() will
|  * scan from a @e copy of @a bytes.
|  * @param yybytes the byte buffer to scan
|  * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
|  * 
|  * @return the newly allocated buffer state object.
|  */
| YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
| {
| 	YY_BUFFER_STATE b;
| 	char *buf;
| 	yy_size_t n;
| 	int i;
|     
| 	/* Get memory for full buffer, including space for trailing EOB's. */
| 	n = _yybytes_len + 2;
| 	buf = (char *) yyalloc(n  );
| 	if ( ! buf )
| 		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
| 
| 	for ( i = 0; i < _yybytes_len; ++i )
| 		buf[i] = yybytes[i];
| 
| 	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;
| 
| 	b = yy_scan_buffer(buf,n );
| 	if ( ! b )
| 		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
| 
| 	/* It's okay to grow etc. this buffer, and we should throw it
| 	 * away when we're done.
| 	 */
| 	b->yy_is_our_buffer = 1;
| 
| 	return b;
| }
| 
| #ifndef YY_EXIT_FAILURE
| #define YY_EXIT_FAILURE 2
| #endif
| 
| static void yy_fatal_error (yyconst char* msg )
| {
|     	(void) fprintf( stderr, "%s\n", msg );
| 	exit( YY_EXIT_FAILURE );
| }
| 
| /* Redefine yyless() so it works in section 3 code. */
| 
| #undef yyless
| #define yyless(n) \
| 	do \
| 		{ \
| 		/* Undo effects of setting up yytext. */ \
|         int yyless_macro_arg = (n); \
|         YY_LESS_LINENO(yyless_macro_arg);\
| 		yytext[yyleng] = (yy_hold_char); \
| 		(yy_c_buf_p) = yytext + yyless_macro_arg; \
| 		(yy_hold_char) = *(yy_c_buf_p); \
| 		*(yy_c_buf_p) = '\0'; \
| 		yyleng = yyless_macro_arg; \
| 		} \
| 	while ( 0 )
| 
| /* Accessor  methods (get/set functions) to struct members. */
| 
| /** Get the current line number.
|  * 
|  */
| int yyget_lineno  (void)
| {
|         
|     return yylineno;
| }
| 
| /** Get the input stream.
|  * 
|  */
| FILE *yyget_in  (void)
| {
|         return yyin;
| }
| 
| /** Get the output stream.
|  * 
|  */
| FILE *yyget_out  (void)
| {
|         return yyout;
| }
| 
| /** Get the length of the current token.
|  * 
|  */
| int yyget_leng  (void)
| {
|         return yyleng;
| }
| 
| /** Get the current token.
|  * 
|  */
| 
| char *yyget_text  (void)
| {
|         return yytext;
| }
| 
| /** Set the current line number.
|  * @param line_number
|  * 
|  */
| void yyset_lineno (int  line_number )
| {
|     
|     yylineno = line_number;
| }
| 
| /** Set the input stream. This does not discard the current
|  * input buffer.
|  * @param in_str A readable stream.
|  * 
|  * @see yy_switch_to_buffer
|  */
| void yyset_in (FILE *  in_str )
| {
|         yyin = in_str ;
| }
| 
| void yyset_out (FILE *  out_str )
| {
|         yyout = out_str ;
| }
| 
| int yyget_debug  (void)
| {
|         return yy_flex_debug;
| }
| 
| void yyset_debug (int  bdebug )
| {
|         yy_flex_debug = bdebug ;
| }
| 
| static int yy_init_globals (void)
| {
|         /* Initialization is the same as for the non-reentrant scanner.
|      * This function is called from yylex_destroy(), so don't allocate here.
|      */
| 
|     (yy_buffer_stack) = 0;
|     (yy_buffer_stack_top) = 0;
|     (yy_buffer_stack_max) = 0;
|     (yy_c_buf_p) = (char *) 0;
|     (yy_init) = 0;
|     (yy_start) = 0;
| 
|     (yy_state_buf) = 0;
|     (yy_state_ptr) = 0;
|     (yy_full_match) = 0;
|     (yy_lp) = 0;
| 
| /* Defined in main.c */
| #ifdef YY_STDINIT
|     yyin = stdin;
|     yyout = stdout;
| #else
|     yyin = (FILE *) 0;
|     yyout = (FILE *) 0;
| #endif
| 
|     /* For future reference: Set errno on error, since we are called by
|      * yylex_init()
|      */
|     return 0;
| }
| 
| /* yylex_destroy is for both reentrant and non-reentrant scanners. */
| int yylex_destroy  (void)
| {
|     
|     /* Pop the buffer stack, destroying each element. */
| 	while(YY_CURRENT_BUFFER){
| 		yy_delete_buffer(YY_CURRENT_BUFFER  );
| 		YY_CURRENT_BUFFER_LVALUE = NULL;
| 		yypop_buffer_state();
| 	}
| 
| 	/* Destroy the stack itself. */
| 	yyfree((yy_buffer_stack) );
| 	(yy_buffer_stack) = NULL;
| 
|     yyfree ( (yy_state_buf) );
|     (yy_state_buf)  = NULL;
| 
|     /* Reset the globals. This is important in a non-reentrant scanner so the next time
|      * yylex() is called, initialization will occur. */
|     yy_init_globals( );
| 
|     return 0;
| }
| 
| /*
|  * Internal utility routines.
|  */
| 
| #ifndef yytext_ptr
| static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
| {
| 	register int i;
| 	for ( i = 0; i < n; ++i )
| 		s1[i] = s2[i];
| }
| #endif
| 
| #ifdef YY_NEED_STRLEN
| static int yy_flex_strlen (yyconst char * s )
| {
| 	register int n;
| 	for ( n = 0; s[n]; ++n )
| 		;
| 
| 	return n;
| }
| #endif
| 
| void *yyalloc (yy_size_t  size )
| {
| 	return (void *) malloc( size );
| }
| 
| void *yyrealloc  (void * ptr, yy_size_t  size )
| {
| 	/* The cast to (char *) in the following accommodates both
| 	 * implementations that use char* generic pointers, and those
| 	 * that use void* generic pointers.  It works with the latter
| 	 * because both ANSI C and C++ allow castless assignment from
| 	 * any pointer type to void*, and deal with argument conversions
| 	 * as though doing an assignment.
| 	 */
| 	return (void *) realloc( (char *) ptr, size );
| }
| 
| void yyfree (void * ptr )
| {
| 	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
| }
| 
| #define YYTABLES_NAME "yytables"
| 
| #line 9 "conftest.l"
| 
| 
| #ifdef YYTEXT_POINTER
| extern char *yytext;
| #endif
| int
| main (void)
| {
|   return ! yylex () + ! yywrap ();
| }
configure:3767: result: no
configure:3788: checking for glade_init in -lglade-2.0
configure:3823: g++ -o conftest -g -O2   conftest.cpp -lglade-2.0 -lglade-2.0 -lgtk-x11-2.0 -lxml2 -lgdk-x11-2.0 -latk-1.0 -lpangoft2-1.0 -lgdk_pixbuf-2.0 -lm -lpangocairo-1.0 -lgio-2.0 -lcairo -lpango-1.0 -lfreetype -lfontconfig -lgobject-2.0 -lgmodule-2.0 -lglib-2.0    >&5
configure:3829: $? = 0
configure:3847: result: yes
configure:3857: checking for mysql_init in -lmysqlclient
configure:3892: g++ -o conftest -g -O2   conftest.cpp -lmysqlclient -L/usr/lib -L/usr/lib/mysql  >&5
configure:3898: $? = 0
configure:3916: result: yes
configure:3926: checking for rsvg_handle_new in -lrsvg-2
configure:3961: g++ -o conftest -g -O2   conftest.cpp -lrsvg-2 -lrsvg-2 -lgdk_pixbuf-2.0 -lm -lcairo -lgobject-2.0 -lgmodule-2.0 -lglib-2.0    >&5
configure:3967: $? = 0
configure:3985: result: yes
configure:3995: checking for pcre_compile in -lpcre
configure:4030: g++ -o conftest -g -O2   conftest.cpp -lpcre -L/usr/lib  >&5
configure:4036: $? = 0
configure:4054: result: yes
configure:4064: checking for sock_connect in -lpiki
configure:4099: g++ -o conftest -g -O2   conftest.cpp -lpiki -L/usr/lib  >&5
/usr/bin/ld: cannot find -lpiki
collect2: ld returned 1 exit status
configure:4105: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char sock_connect ();
| int
| main ()
| {
| return sock_connect ();
|   ;
|   return 0;
| }
configure:4123: result: no
configure:4128: WARNING: *** loglistener will not be built (you can safely ignore this) ***
configure:4135: checking for grep that handles long lines and -e
configure:4209: result: /bin/grep
configure:4214: checking for egrep
configure:4292: result: /bin/grep -E
configure:4297: checking for ANSI C header files
configure:4327: g++ -c -g -O2  conftest.cpp >&5
configure:4333: $? = 0
configure:4432: g++ -o conftest -g -O2   conftest.cpp  >&5
configure:4435: $? = 0
configure:4441: ./conftest
configure:4444: $? = 0
configure:4461: result: yes
configure:4485: checking for sys/types.h
configure:4506: g++ -c -g -O2  conftest.cpp >&5
configure:4512: $? = 0
configure:4528: result: yes
configure:4485: checking for sys/stat.h
configure:4506: g++ -c -g -O2  conftest.cpp >&5
configure:4512: $? = 0
configure:4528: result: yes
configure:4485: checking for stdlib.h
configure:4506: g++ -c -g -O2  conftest.cpp >&5
configure:4512: $? = 0
configure:4528: result: yes
configure:4485: checking for string.h
configure:4506: g++ -c -g -O2  conftest.cpp >&5
configure:4512: $? = 0
configure:4528: result: yes
configure:4485: checking for memory.h
configure:4506: g++ -c -g -O2  conftest.cpp >&5
configure:4512: $? = 0
configure:4528: result: yes
configure:4485: checking for strings.h
configure:4506: g++ -c -g -O2  conftest.cpp >&5
configure:4512: $? = 0
configure:4528: result: yes
configure:4485: checking for inttypes.h
configure:4506: g++ -c -g -O2  conftest.cpp >&5
configure:4512: $? = 0
configure:4528: result: yes
configure:4485: checking for stdint.h
configure:4506: g++ -c -g -O2  conftest.cpp >&5
configure:4512: $? = 0
configure:4528: result: yes
configure:4485: checking for unistd.h
configure:4506: g++ -c -g -O2  conftest.cpp >&5
configure:4512: $? = 0
configure:4528: result: yes
configure:4552: checking /usr/lib/jvm/java-6-sun/include/jni.h usability
configure:4569: g++ -c -g -O2  conftest.cpp >&5
In file included from conftest.cpp:51:
/usr/lib/jvm/java-6-sun/include/jni.h:27:20: error: jni_md.h: No such file or directory
In file included from conftest.cpp:51:
/usr/lib/jvm/java-6-sun/include/jni.h:45: error: 'jint' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:104: error: 'jbyte' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:107: error: 'jint' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:108: error: 'jlong' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:202: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:202: error: ISO C++ forbids declaration of 'jint' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:202: error: 'jint' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:204: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:207: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:210: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:212: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:215: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:218: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:220: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:223: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:226: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:227: error: ISO C++ forbids declaration of 'jint' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:227: error: 'jint' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:228: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:229: error: ISO C++ forbids declaration of 'jint' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:229: error: 'jint' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:230: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:232: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:234: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:236: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:239: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:240: error: 'jint' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:240: error: ISO C++ forbids declaration of 'jint' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:240: error: 'jint' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:241: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:244: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:246: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:248: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:250: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:252: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:254: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:255: error: 'jint' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:255: error: ISO C++ forbids declaration of 'jint' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:255: error: 'jint' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:257: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:259: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:261: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:263: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:266: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:268: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:271: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:274: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:276: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:278: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:281: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:283: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:285: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:288: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:289: error: ISO C++ forbids declaration of 'jbyte' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:289: error: 'jbyte' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:290: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:291: error: ISO C++ forbids declaration of 'jbyte' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:291: error: 'jbyte' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:292: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:293: error: ISO C++ forbids declaration of 'jbyte' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:293: error: 'jbyte' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:295: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:297: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:299: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:302: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:304: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:306: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:309: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:310: error: ISO C++ forbids declaration of 'jint' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:310: error: 'jint' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:311: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:312: error: ISO C++ forbids declaration of 'jint' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:312: error: 'jint' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:313: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:314: error: ISO C++ forbids declaration of 'jint' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:314: error: 'jint' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:316: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:317: error: ISO C++ forbids declaration of 'jlong' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:317: error: 'jlong' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:318: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:319: error: ISO C++ forbids declaration of 'jlong' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:319: error: 'jlong' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:320: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:321: error: ISO C++ forbids declaration of 'jlong' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:321: error: 'jlong' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:323: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:325: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:327: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:330: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:332: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:334: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:337: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:339: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:341: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:344: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:346: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:349: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:353: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:355: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:358: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:362: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:363: error: ISO C++ forbids declaration of 'jbyte' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:363: error: 'jbyte' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:364: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:366: error: ISO C++ forbids declaration of 'jbyte' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:366: error: 'jbyte' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:367: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:369: error: ISO C++ forbids declaration of 'jbyte' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:369: error: 'jbyte' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:371: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:373: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:376: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:380: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:382: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:385: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:389: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:390: error: ISO C++ forbids declaration of 'jint' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:390: error: 'jint' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:391: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:393: error: ISO C++ forbids declaration of 'jint' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:393: error: 'jint' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:394: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:396: error: ISO C++ forbids declaration of 'jint' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:396: error: 'jint' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:398: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:399: error: ISO C++ forbids declaration of 'jlong' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:399: error: 'jlong' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:400: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:402: error: ISO C++ forbids declaration of 'jlong' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:402: error: 'jlong' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:403: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:405: error: ISO C++ forbids declaration of 'jlong' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:405: error: 'jlong' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:407: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:409: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:412: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:416: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:418: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:421: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:425: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:427: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:430: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:434: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:437: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:439: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:441: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:442: error: ISO C++ forbids declaration of 'jbyte' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:442: error: 'jbyte' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:443: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:445: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:447: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:448: error: ISO C++ forbids declaration of 'jint' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:448: error: 'jint' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:449: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:450: error: ISO C++ forbids declaration of 'jlong' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:450: error: 'jlong' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:451: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:453: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:456: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:458: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:460: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:462: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:464: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:466: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:468: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:470: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:472: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:475: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:478: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:480: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:482: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:485: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:487: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:489: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:492: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:493: error: ISO C++ forbids declaration of 'jbyte' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:493: error: 'jbyte' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:494: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:495: error: ISO C++ forbids declaration of 'jbyte' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:495: error: 'jbyte' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:496: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:497: error: ISO C++ forbids declaration of 'jbyte' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:497: error: 'jbyte' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:499: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:501: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:503: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:506: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:508: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:510: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:513: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:514: error: ISO C++ forbids declaration of 'jint' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:514: error: 'jint' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:515: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:516: error: ISO C++ forbids declaration of 'jint' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:516: error: 'jint' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:517: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:518: error: ISO C++ forbids declaration of 'jint' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:518: error: 'jint' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:520: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:521: error: ISO C++ forbids declaration of 'jlong' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:521: error: 'jlong' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:522: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:523: error: ISO C++ forbids declaration of 'jlong' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:523: error: 'jlong' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:524: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:525: error: ISO C++ forbids declaration of 'jlong' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:525: error: 'jlong' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:527: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:529: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:531: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:534: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:536: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:538: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:541: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:543: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:545: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:548: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:550: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:552: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:554: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:555: error: ISO C++ forbids declaration of 'jbyte' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:555: error: 'jbyte' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:556: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:558: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:560: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:561: error: ISO C++ forbids declaration of 'jint' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:561: error: 'jint' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:562: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:563: error: ISO C++ forbids declaration of 'jlong' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:563: error: 'jlong' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:564: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:566: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:569: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:571: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:573: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:575: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:577: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:579: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:581: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:583: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:585: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:588: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:590: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:591: error: ISO C++ forbids declaration of 'jsize' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:591: error: 'jsize' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:592: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:592: error: expected ';' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:594: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:597: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:599: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:600: error: ISO C++ forbids declaration of 'jsize' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:600: error: 'jsize' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:601: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:601: error: expected ';' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:603: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:607: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:608: error: ISO C++ forbids declaration of 'jsize' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:608: error: 'jsize' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:610: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:612: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:614: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:617: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:619: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:621: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:623: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:625: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:627: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:629: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:631: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:634: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:634: error: expected ';' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:636: error: ISO C++ forbids declaration of 'jbyte' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:636: error: expected ';' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:638: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:638: error: expected ';' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:640: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:640: error: expected ';' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:642: error: ISO C++ forbids declaration of 'jint' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:642: error: expected ';' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:644: error: ISO C++ forbids declaration of 'jlong' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:644: error: expected ';' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:646: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:646: error: expected ';' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:648: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:648: error: expected ';' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:651: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:653: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:655: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:657: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:659: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:661: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:663: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:665: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:668: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:670: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:672: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:674: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:676: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:678: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:680: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:682: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:685: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:687: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:689: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:691: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:693: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:695: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:697: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:699: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:702: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:704: error: 'jint' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:704: error: ISO C++ forbids declaration of 'jint' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:704: error: 'jint' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:705: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:706: error: ISO C++ forbids declaration of 'jint' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:706: error: 'jint' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:708: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:709: error: ISO C++ forbids declaration of 'jint' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:709: error: 'jint' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:710: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:711: error: ISO C++ forbids declaration of 'jint' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:711: error: 'jint' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:713: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:714: error: ISO C++ forbids declaration of 'jint' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:714: error: 'jint' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:716: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:718: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:721: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:721: error: expected ';' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:723: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:726: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:726: error: expected ';' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:728: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:731: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:733: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:736: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:739: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:741: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:741: error: expected ';' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:743: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:744: error: ISO C++ forbids declaration of 'jlong' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:744: error: 'jlong' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:748: error: expected ')' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:768: error: 'jint' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:771: error: ISO C++ forbids declaration of 'jbyte' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:771: error: expected ',' or '...' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:800: error: 'jint' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:803: error: 'jint' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:819: error: 'jint' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:843: error: 'jint' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:914: error: 'jbyte' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:922: error: 'jbyte' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:926: error: 'jbyte' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:965: error: 'jint' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:973: error: 'jint' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:977: error: 'jint' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:982: error: 'jlong' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:990: error: 'jlong' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:994: error: 'jlong' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1090: error: 'jbyte' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1100: error: 'jbyte' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1105: error: 'jbyte' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1153: error: 'jint' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1163: error: 'jint' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1168: error: 'jint' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1174: error: 'jlong' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1184: error: 'jlong' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1189: error: 'jlong' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1270: error: 'jbyte' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1279: error: 'jint' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1282: error: 'jlong' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1300: error: 'jbyte' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1312: error: 'jint' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1316: error: 'jlong' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1369: error: 'jbyte' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1378: error: 'jbyte' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1382: error: 'jbyte' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1423: error: 'jint' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1432: error: 'jint' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1436: error: 'jint' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1441: error: 'jlong' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1450: error: 'jlong' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1454: error: 'jlong' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1520: error: 'jbyte' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1529: error: 'jint' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1532: error: 'jlong' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1551: error: 'jbyte' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1563: error: 'jint' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1567: error: 'jlong' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1579: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1582: error: 'jsize' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1595: error: 'jsize' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1605: error: 'jsize' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1609: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1613: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1616: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1621: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1624: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1627: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1630: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1633: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1636: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1639: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1642: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1649: error: ISO C++ forbids declaration of 'jbyte' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:1649: error: expected ';' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:1652: error: expected ';' before 'jchar'
/usr/lib/jvm/java-6-sun/include/jni.h:1658: error: ISO C++ forbids declaration of 'jint' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:1658: error: expected ';' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:1661: error: expected ';' before 'jlong'
/usr/lib/jvm/java-6-sun/include/jni.h:1661: error: ISO C++ forbids declaration of 'jlong' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:1661: error: expected ';' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:1664: error: expected ';' before 'jfloat'
/usr/lib/jvm/java-6-sun/include/jni.h:1673: error: 'jint' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1677: error: 'jbyte' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1678: error: 'jint' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1683: error: 'jint' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1688: error: 'jint' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1692: error: 'jint' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1693: error: 'jint' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1697: error: 'jlong' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1698: error: 'jint' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1703: error: 'jint' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1708: error: 'jint' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1713: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1713: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1717: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1717: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1717: error: 'jbyte' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1721: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1721: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1725: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1725: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1729: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1729: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1729: error: 'jint' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1733: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1733: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1733: error: 'jlong' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1737: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1737: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1741: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1741: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1745: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1745: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1749: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1749: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1750: error: ISO C++ forbids declaration of 'jbyte' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:1750: error: expected ',' or '...' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:1753: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1753: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1757: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1757: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1761: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1761: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1762: error: ISO C++ forbids declaration of 'jint' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:1762: error: expected ',' or '...' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:1765: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1765: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1766: error: ISO C++ forbids declaration of 'jlong' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:1766: error: expected ',' or '...' before '*' token
/usr/lib/jvm/java-6-sun/include/jni.h:1769: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1769: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1773: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1773: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1778: error: 'jint' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1782: error: 'jint' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1786: error: 'jint' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1789: error: 'jint' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1793: error: 'jint' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1797: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1797: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1800: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1800: error: 'jsize' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1807: error: 'jint' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1829: error: 'jlong' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1835: error: 'jlong' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jclass* JNIEnv_::DefineClass(const char*, _jobject*, int)':
/usr/lib/jvm/java-6-sun/include/jni.h:773: error: 'const struct JNINativeInterface_' has no member named 'DefineClass'
/usr/lib/jvm/java-6-sun/include/jni.h:773: error: 'buf' was not declared in this scope
/usr/lib/jvm/java-6-sun/include/jni.h:773: error: 'len' was not declared in this scope
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jclass* JNIEnv_::FindClass(const char*)':
/usr/lib/jvm/java-6-sun/include/jni.h:776: error: 'const struct JNINativeInterface_' has no member named 'FindClass'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jmethodID* JNIEnv_::FromReflectedMethod(_jobject*)':
/usr/lib/jvm/java-6-sun/include/jni.h:779: error: 'const struct JNINativeInterface_' has no member named 'FromReflectedMethod'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jfieldID* JNIEnv_::FromReflectedField(_jobject*)':
/usr/lib/jvm/java-6-sun/include/jni.h:782: error: 'const struct JNINativeInterface_' has no member named 'FromReflectedField'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jobject* JNIEnv_::ToReflectedMethod(_jclass*, _jmethodID*, jboolean)':
/usr/lib/jvm/java-6-sun/include/jni.h:786: error: 'const struct JNINativeInterface_' has no member named 'ToReflectedMethod'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jclass* JNIEnv_::GetSuperclass(_jclass*)':
/usr/lib/jvm/java-6-sun/include/jni.h:790: error: 'const struct JNINativeInterface_' has no member named 'GetSuperclass'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jboolean JNIEnv_::IsAssignableFrom(_jclass*, _jclass*)':
/usr/lib/jvm/java-6-sun/include/jni.h:793: error: 'const struct JNINativeInterface_' has no member named 'IsAssignableFrom'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jobject* JNIEnv_::ToReflectedField(_jclass*, _jfieldID*, jboolean)':
/usr/lib/jvm/java-6-sun/include/jni.h:797: error: 'const struct JNINativeInterface_' has no member named 'ToReflectedField'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jthrowable* JNIEnv_::ExceptionOccurred()':
/usr/lib/jvm/java-6-sun/include/jni.h:807: error: 'const struct JNINativeInterface_' has no member named 'ExceptionOccurred'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::ExceptionDescribe()':
/usr/lib/jvm/java-6-sun/include/jni.h:810: error: 'const struct JNINativeInterface_' has no member named 'ExceptionDescribe'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::ExceptionClear()':
/usr/lib/jvm/java-6-sun/include/jni.h:813: error: 'const struct JNINativeInterface_' has no member named 'ExceptionClear'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::FatalError(const char*)':
/usr/lib/jvm/java-6-sun/include/jni.h:816: error: 'const struct JNINativeInterface_' has no member named 'FatalError'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jobject* JNIEnv_::PopLocalFrame(_jobject*)':
/usr/lib/jvm/java-6-sun/include/jni.h:823: error: 'const struct JNINativeInterface_' has no member named 'PopLocalFrame'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jobject* JNIEnv_::NewGlobalRef(_jobject*)':
/usr/lib/jvm/java-6-sun/include/jni.h:827: error: 'const struct JNINativeInterface_' has no member named 'NewGlobalRef'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::DeleteGlobalRef(_jobject*)':
/usr/lib/jvm/java-6-sun/include/jni.h:830: error: 'const struct JNINativeInterface_' has no member named 'DeleteGlobalRef'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::DeleteLocalRef(_jobject*)':
/usr/lib/jvm/java-6-sun/include/jni.h:833: error: 'const struct JNINativeInterface_' has no member named 'DeleteLocalRef'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jboolean JNIEnv_::IsSameObject(_jobject*, _jobject*)':
/usr/lib/jvm/java-6-sun/include/jni.h:837: error: 'const struct JNINativeInterface_' has no member named 'IsSameObject'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jobject* JNIEnv_::NewLocalRef(_jobject*)':
/usr/lib/jvm/java-6-sun/include/jni.h:841: error: 'const struct JNINativeInterface_' has no member named 'NewLocalRef'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jobject* JNIEnv_::AllocObject(_jclass*)':
/usr/lib/jvm/java-6-sun/include/jni.h:848: error: 'const struct JNINativeInterface_' has no member named 'AllocObject'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jobject* JNIEnv_::NewObject(_jclass*, _jmethodID*, ...)':
/usr/lib/jvm/java-6-sun/include/jni.h:854: error: 'const struct JNINativeInterface_' has no member named 'NewObjectV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jobject* JNIEnv_::NewObjectV(_jclass*, _jmethodID*, __va_list_tag*)':
/usr/lib/jvm/java-6-sun/include/jni.h:860: error: 'const struct JNINativeInterface_' has no member named 'NewObjectV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jobject* JNIEnv_::NewObjectA(_jclass*, _jmethodID*, const jvalue*)':
/usr/lib/jvm/java-6-sun/include/jni.h:864: error: 'const struct JNINativeInterface_' has no member named 'NewObjectA'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jclass* JNIEnv_::GetObjectClass(_jobject*)':
/usr/lib/jvm/java-6-sun/include/jni.h:868: error: 'const struct JNINativeInterface_' has no member named 'GetObjectClass'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jboolean JNIEnv_::IsInstanceOf(_jobject*, _jclass*)':
/usr/lib/jvm/java-6-sun/include/jni.h:871: error: 'const struct JNINativeInterface_' has no member named 'IsInstanceOf'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jmethodID* JNIEnv_::GetMethodID(_jclass*, const char*, const char*)':
/usr/lib/jvm/java-6-sun/include/jni.h:876: error: 'const struct JNINativeInterface_' has no member named 'GetMethodID'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jobject* JNIEnv_::CallObjectMethod(_jobject*, _jmethodID*, ...)':
/usr/lib/jvm/java-6-sun/include/jni.h:883: error: 'const struct JNINativeInterface_' has no member named 'CallObjectMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jobject* JNIEnv_::CallObjectMethodV(_jobject*, _jmethodID*, __va_list_tag*)':
/usr/lib/jvm/java-6-sun/include/jni.h:889: error: 'const struct JNINativeInterface_' has no member named 'CallObjectMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jobject* JNIEnv_::CallObjectMethodA(_jobject*, _jmethodID*, const jvalue*)':
/usr/lib/jvm/java-6-sun/include/jni.h:893: error: 'const struct JNINativeInterface_' has no member named 'CallObjectMethodA'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jboolean JNIEnv_::CallBooleanMethod(_jobject*, _jmethodID*, ...)':
/usr/lib/jvm/java-6-sun/include/jni.h:901: error: 'const struct JNINativeInterface_' has no member named 'CallBooleanMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jboolean JNIEnv_::CallBooleanMethodV(_jobject*, _jmethodID*, __va_list_tag*)':
/usr/lib/jvm/java-6-sun/include/jni.h:907: error: 'const struct JNINativeInterface_' has no member named 'CallBooleanMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jboolean JNIEnv_::CallBooleanMethodA(_jobject*, _jmethodID*, const jvalue*)':
/usr/lib/jvm/java-6-sun/include/jni.h:911: error: 'const struct JNINativeInterface_' has no member named 'CallBooleanMethodA'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jchar JNIEnv_::CallCharMethod(_jobject*, _jmethodID*, ...)':
/usr/lib/jvm/java-6-sun/include/jni.h:935: error: 'const struct JNINativeInterface_' has no member named 'CallCharMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jchar JNIEnv_::CallCharMethodV(_jobject*, _jmethodID*, __va_list_tag*)':
/usr/lib/jvm/java-6-sun/include/jni.h:941: error: 'const struct JNINativeInterface_' has no member named 'CallCharMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jchar JNIEnv_::CallCharMethodA(_jobject*, _jmethodID*, const jvalue*)':
/usr/lib/jvm/java-6-sun/include/jni.h:945: error: 'const struct JNINativeInterface_' has no member named 'CallCharMethodA'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jshort JNIEnv_::CallShortMethod(_jobject*, _jmethodID*, ...)':
/usr/lib/jvm/java-6-sun/include/jni.h:952: error: 'const struct JNINativeInterface_' has no member named 'CallShortMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jshort JNIEnv_::CallShortMethodV(_jobject*, _jmethodID*, __va_list_tag*)':
/usr/lib/jvm/java-6-sun/include/jni.h:958: error: 'const struct JNINativeInterface_' has no member named 'CallShortMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jshort JNIEnv_::CallShortMethodA(_jobject*, _jmethodID*, const jvalue*)':
/usr/lib/jvm/java-6-sun/include/jni.h:962: error: 'const struct JNINativeInterface_' has no member named 'CallShortMethodA'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jfloat JNIEnv_::CallFloatMethod(_jobject*, _jmethodID*, ...)':
/usr/lib/jvm/java-6-sun/include/jni.h:1003: error: 'const struct JNINativeInterface_' has no member named 'CallFloatMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jfloat JNIEnv_::CallFloatMethodV(_jobject*, _jmethodID*, __va_list_tag*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1009: error: 'const struct JNINativeInterface_' has no member named 'CallFloatMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jfloat JNIEnv_::CallFloatMethodA(_jobject*, _jmethodID*, const jvalue*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1013: error: 'const struct JNINativeInterface_' has no member named 'CallFloatMethodA'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jdouble JNIEnv_::CallDoubleMethod(_jobject*, _jmethodID*, ...)':
/usr/lib/jvm/java-6-sun/include/jni.h:1020: error: 'const struct JNINativeInterface_' has no member named 'CallDoubleMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jdouble JNIEnv_::CallDoubleMethodV(_jobject*, _jmethodID*, __va_list_tag*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1026: error: 'const struct JNINativeInterface_' has no member named 'CallDoubleMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jdouble JNIEnv_::CallDoubleMethodA(_jobject*, _jmethodID*, const jvalue*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1030: error: 'const struct JNINativeInterface_' has no member named 'CallDoubleMethodA'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...)':
/usr/lib/jvm/java-6-sun/include/jni.h:1036: error: 'const struct JNINativeInterface_' has no member named 'CallVoidMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::CallVoidMethodV(_jobject*, _jmethodID*, __va_list_tag*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1041: error: 'const struct JNINativeInterface_' has no member named 'CallVoidMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::CallVoidMethodA(_jobject*, _jmethodID*, const jvalue*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1045: error: 'const struct JNINativeInterface_' has no member named 'CallVoidMethodA'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jobject* JNIEnv_::CallNonvirtualObjectMethod(_jobject*, _jclass*, _jmethodID*, ...)':
/usr/lib/jvm/java-6-sun/include/jni.h:1053: error: 'const struct JNINativeInterface_' has no member named 'CallNonvirtualObjectMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jobject* JNIEnv_::CallNonvirtualObjectMethodV(_jobject*, _jclass*, _jmethodID*, __va_list_tag*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1060: error: 'const struct JNINativeInterface_' has no member named 'CallNonvirtualObjectMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jobject* JNIEnv_::CallNonvirtualObjectMethodA(_jobject*, _jclass*, _jmethodID*, const jvalue*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1065: error: 'const struct JNINativeInterface_' has no member named 'CallNonvirtualObjectMethodA'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jboolean JNIEnv_::CallNonvirtualBooleanMethod(_jobject*, _jclass*, _jmethodID*, ...)':
/usr/lib/jvm/java-6-sun/include/jni.h:1074: error: 'const struct JNINativeInterface_' has no member named 'CallNonvirtualBooleanMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jboolean JNIEnv_::CallNonvirtualBooleanMethodV(_jobject*, _jclass*, _jmethodID*, __va_list_tag*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1081: error: 'const struct JNINativeInterface_' has no member named 'CallNonvirtualBooleanMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jboolean JNIEnv_::CallNonvirtualBooleanMethodA(_jobject*, _jclass*, _jmethodID*, const jvalue*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1086: error: 'const struct JNINativeInterface_' has no member named 'CallNonvirtualBooleanMethodA'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jchar JNIEnv_::CallNonvirtualCharMethod(_jobject*, _jclass*, _jmethodID*, ...)':
/usr/lib/jvm/java-6-sun/include/jni.h:1116: error: 'const struct JNINativeInterface_' has no member named 'CallNonvirtualCharMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jchar JNIEnv_::CallNonvirtualCharMethodV(_jobject*, _jclass*, _jmethodID*, __va_list_tag*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1123: error: 'const struct JNINativeInterface_' has no member named 'CallNonvirtualCharMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jchar JNIEnv_::CallNonvirtualCharMethodA(_jobject*, _jclass*, _jmethodID*, const jvalue*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1128: error: 'const struct JNINativeInterface_' has no member named 'CallNonvirtualCharMethodA'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jshort JNIEnv_::CallNonvirtualShortMethod(_jobject*, _jclass*, _jmethodID*, ...)':
/usr/lib/jvm/java-6-sun/include/jni.h:1137: error: 'const struct JNINativeInterface_' has no member named 'CallNonvirtualShortMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jshort JNIEnv_::CallNonvirtualShortMethodV(_jobject*, _jclass*, _jmethodID*, __va_list_tag*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1144: error: 'const struct JNINativeInterface_' has no member named 'CallNonvirtualShortMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jshort JNIEnv_::CallNonvirtualShortMethodA(_jobject*, _jclass*, _jmethodID*, const jvalue*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1149: error: 'const struct JNINativeInterface_' has no member named 'CallNonvirtualShortMethodA'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jfloat JNIEnv_::CallNonvirtualFloatMethod(_jobject*, _jclass*, _jmethodID*, ...)':
/usr/lib/jvm/java-6-sun/include/jni.h:1200: error: 'const struct JNINativeInterface_' has no member named 'CallNonvirtualFloatMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jfloat JNIEnv_::CallNonvirtualFloatMethodV(_jobject*, _jclass*, _jmethodID*, __va_list_tag*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1208: error: 'const struct JNINativeInterface_' has no member named 'CallNonvirtualFloatMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jfloat JNIEnv_::CallNonvirtualFloatMethodA(_jobject*, _jclass*, _jmethodID*, const jvalue*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1214: error: 'const struct JNINativeInterface_' has no member named 'CallNonvirtualFloatMethodA'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jdouble JNIEnv_::CallNonvirtualDoubleMethod(_jobject*, _jclass*, _jmethodID*, ...)':
/usr/lib/jvm/java-6-sun/include/jni.h:1223: error: 'const struct JNINativeInterface_' has no member named 'CallNonvirtualDoubleMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jdouble JNIEnv_::CallNonvirtualDoubleMethodV(_jobject*, _jclass*, _jmethodID*, __va_list_tag*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1231: error: 'const struct JNINativeInterface_' has no member named 'CallNonvirtualDoubleMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jdouble JNIEnv_::CallNonvirtualDoubleMethodA(_jobject*, _jclass*, _jmethodID*, const jvalue*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1237: error: 'const struct JNINativeInterface_' has no member named 'CallNonvirtualDoubleMethodA'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::CallNonvirtualVoidMethod(_jobject*, _jclass*, _jmethodID*, ...)':
/usr/lib/jvm/java-6-sun/include/jni.h:1245: error: 'const struct JNINativeInterface_' has no member named 'CallNonvirtualVoidMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::CallNonvirtualVoidMethodV(_jobject*, _jclass*, _jmethodID*, __va_list_tag*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1251: error: 'const struct JNINativeInterface_' has no member named 'CallNonvirtualVoidMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::CallNonvirtualVoidMethodA(_jobject*, _jclass*, _jmethodID*, const jvalue*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1256: error: 'const struct JNINativeInterface_' has no member named 'CallNonvirtualVoidMethodA'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jfieldID* JNIEnv_::GetFieldID(_jclass*, const char*, const char*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1261: error: 'const struct JNINativeInterface_' has no member named 'GetFieldID'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jobject* JNIEnv_::GetObjectField(_jobject*, _jfieldID*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1265: error: 'const struct JNINativeInterface_' has no member named 'GetObjectField'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jboolean JNIEnv_::GetBooleanField(_jobject*, _jfieldID*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1268: error: 'const struct JNINativeInterface_' has no member named 'GetBooleanField'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jchar JNIEnv_::GetCharField(_jobject*, _jfieldID*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1274: error: 'const struct JNINativeInterface_' has no member named 'GetCharField'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jshort JNIEnv_::GetShortField(_jobject*, _jfieldID*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1277: error: 'const struct JNINativeInterface_' has no member named 'GetShortField'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jfloat JNIEnv_::GetFloatField(_jobject*, _jfieldID*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1286: error: 'const struct JNINativeInterface_' has no member named 'GetFloatField'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jdouble JNIEnv_::GetDoubleField(_jobject*, _jfieldID*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1289: error: 'const struct JNINativeInterface_' has no member named 'GetDoubleField'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::SetObjectField(_jobject*, _jfieldID*, _jobject*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1293: error: 'const struct JNINativeInterface_' has no member named 'SetObjectField'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::SetBooleanField(_jobject*, _jfieldID*, jboolean)':
/usr/lib/jvm/java-6-sun/include/jni.h:1297: error: 'const struct JNINativeInterface_' has no member named 'SetBooleanField'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::SetByteField(_jobject*, _jfieldID*, int)':
/usr/lib/jvm/java-6-sun/include/jni.h:1301: error: 'const struct JNINativeInterface_' has no member named 'SetByteField'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::SetCharField(_jobject*, _jfieldID*, jchar)':
/usr/lib/jvm/java-6-sun/include/jni.h:1305: error: 'const struct JNINativeInterface_' has no member named 'SetCharField'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::SetShortField(_jobject*, _jfieldID*, jshort)':
/usr/lib/jvm/java-6-sun/include/jni.h:1309: error: 'const struct JNINativeInterface_' has no member named 'SetShortField'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::SetIntField(_jobject*, _jfieldID*, int)':
/usr/lib/jvm/java-6-sun/include/jni.h:1313: error: 'const struct JNINativeInterface_' has no member named 'SetIntField'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::SetLongField(_jobject*, _jfieldID*, int)':
/usr/lib/jvm/java-6-sun/include/jni.h:1317: error: 'const struct JNINativeInterface_' has no member named 'SetLongField'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::SetFloatField(_jobject*, _jfieldID*, jfloat)':
/usr/lib/jvm/java-6-sun/include/jni.h:1321: error: 'const struct JNINativeInterface_' has no member named 'SetFloatField'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::SetDoubleField(_jobject*, _jfieldID*, jdouble)':
/usr/lib/jvm/java-6-sun/include/jni.h:1325: error: 'const struct JNINativeInterface_' has no member named 'SetDoubleField'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jmethodID* JNIEnv_::GetStaticMethodID(_jclass*, const char*, const char*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1330: error: 'const struct JNINativeInterface_' has no member named 'GetStaticMethodID'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jobject* JNIEnv_::CallStaticObjectMethod(_jclass*, _jmethodID*, ...)':
/usr/lib/jvm/java-6-sun/include/jni.h:1338: error: 'const struct JNINativeInterface_' has no member named 'CallStaticObjectMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jobject* JNIEnv_::CallStaticObjectMethodV(_jclass*, _jmethodID*, __va_list_tag*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1344: error: 'const struct JNINativeInterface_' has no member named 'CallStaticObjectMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jobject* JNIEnv_::CallStaticObjectMethodA(_jclass*, _jmethodID*, const jvalue*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1348: error: 'const struct JNINativeInterface_' has no member named 'CallStaticObjectMethodA'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jboolean JNIEnv_::CallStaticBooleanMethod(_jclass*, _jmethodID*, ...)':
/usr/lib/jvm/java-6-sun/include/jni.h:1356: error: 'const struct JNINativeInterface_' has no member named 'CallStaticBooleanMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jboolean JNIEnv_::CallStaticBooleanMethodV(_jclass*, _jmethodID*, __va_list_tag*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1362: error: 'const struct JNINativeInterface_' has no member named 'CallStaticBooleanMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jboolean JNIEnv_::CallStaticBooleanMethodA(_jclass*, _jmethodID*, const jvalue*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1366: error: 'const struct JNINativeInterface_' has no member named 'CallStaticBooleanMethodA'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jchar JNIEnv_::CallStaticCharMethod(_jclass*, _jmethodID*, ...)':
/usr/lib/jvm/java-6-sun/include/jni.h:1392: error: 'const struct JNINativeInterface_' has no member named 'CallStaticCharMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jchar JNIEnv_::CallStaticCharMethodV(_jclass*, _jmethodID*, __va_list_tag*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1398: error: 'const struct JNINativeInterface_' has no member named 'CallStaticCharMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jchar JNIEnv_::CallStaticCharMethodA(_jclass*, _jmethodID*, const jvalue*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1402: error: 'const struct JNINativeInterface_' has no member named 'CallStaticCharMethodA'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jshort JNIEnv_::CallStaticShortMethod(_jclass*, _jmethodID*, ...)':
/usr/lib/jvm/java-6-sun/include/jni.h:1410: error: 'const struct JNINativeInterface_' has no member named 'CallStaticShortMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jshort JNIEnv_::CallStaticShortMethodV(_jclass*, _jmethodID*, __va_list_tag*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1416: error: 'const struct JNINativeInterface_' has no member named 'CallStaticShortMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jshort JNIEnv_::CallStaticShortMethodA(_jclass*, _jmethodID*, const jvalue*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1420: error: 'const struct JNINativeInterface_' has no member named 'CallStaticShortMethodA'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jfloat JNIEnv_::CallStaticFloatMethod(_jclass*, _jmethodID*, ...)':
/usr/lib/jvm/java-6-sun/include/jni.h:1464: error: 'const struct JNINativeInterface_' has no member named 'CallStaticFloatMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jfloat JNIEnv_::CallStaticFloatMethodV(_jclass*, _jmethodID*, __va_list_tag*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1470: error: 'const struct JNINativeInterface_' has no member named 'CallStaticFloatMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jfloat JNIEnv_::CallStaticFloatMethodA(_jclass*, _jmethodID*, const jvalue*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1474: error: 'const struct JNINativeInterface_' has no member named 'CallStaticFloatMethodA'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jdouble JNIEnv_::CallStaticDoubleMethod(_jclass*, _jmethodID*, ...)':
/usr/lib/jvm/java-6-sun/include/jni.h:1482: error: 'const struct JNINativeInterface_' has no member named 'CallStaticDoubleMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jdouble JNIEnv_::CallStaticDoubleMethodV(_jclass*, _jmethodID*, __va_list_tag*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1488: error: 'const struct JNINativeInterface_' has no member named 'CallStaticDoubleMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jdouble JNIEnv_::CallStaticDoubleMethodA(_jclass*, _jmethodID*, const jvalue*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1492: error: 'const struct JNINativeInterface_' has no member named 'CallStaticDoubleMethodA'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::CallStaticVoidMethod(_jclass*, _jmethodID*, ...)':
/usr/lib/jvm/java-6-sun/include/jni.h:1498: error: 'const struct JNINativeInterface_' has no member named 'CallStaticVoidMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::CallStaticVoidMethodV(_jclass*, _jmethodID*, __va_list_tag*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1503: error: 'const struct JNINativeInterface_' has no member named 'CallStaticVoidMethodV'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::CallStaticVoidMethodA(_jclass*, _jmethodID*, const jvalue*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1507: error: 'const struct JNINativeInterface_' has no member named 'CallStaticVoidMethodA'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jfieldID* JNIEnv_::GetStaticFieldID(_jclass*, const char*, const char*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1512: error: 'const struct JNINativeInterface_' has no member named 'GetStaticFieldID'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jobject* JNIEnv_::GetStaticObjectField(_jclass*, _jfieldID*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1515: error: 'const struct JNINativeInterface_' has no member named 'GetStaticObjectField'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jboolean JNIEnv_::GetStaticBooleanField(_jclass*, _jfieldID*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1518: error: 'const struct JNINativeInterface_' has no member named 'GetStaticBooleanField'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jchar JNIEnv_::GetStaticCharField(_jclass*, _jfieldID*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1524: error: 'const struct JNINativeInterface_' has no member named 'GetStaticCharField'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jshort JNIEnv_::GetStaticShortField(_jclass*, _jfieldID*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1527: error: 'const struct JNINativeInterface_' has no member named 'GetStaticShortField'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jfloat JNIEnv_::GetStaticFloatField(_jclass*, _jfieldID*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1536: error: 'const struct JNINativeInterface_' has no member named 'GetStaticFloatField'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jdouble JNIEnv_::GetStaticDoubleField(_jclass*, _jfieldID*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1539: error: 'const struct JNINativeInterface_' has no member named 'GetStaticDoubleField'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::SetStaticObjectField(_jclass*, _jfieldID*, _jobject*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1544: error: 'const struct JNINativeInterface_' has no member named 'SetStaticObjectField'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::SetStaticBooleanField(_jclass*, _jfieldID*, jboolean)':
/usr/lib/jvm/java-6-sun/include/jni.h:1548: error: 'const struct JNINativeInterface_' has no member named 'SetStaticBooleanField'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::SetStaticByteField(_jclass*, _jfieldID*, int)':
/usr/lib/jvm/java-6-sun/include/jni.h:1552: error: 'const struct JNINativeInterface_' has no member named 'SetStaticByteField'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::SetStaticCharField(_jclass*, _jfieldID*, jchar)':
/usr/lib/jvm/java-6-sun/include/jni.h:1556: error: 'const struct JNINativeInterface_' has no member named 'SetStaticCharField'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::SetStaticShortField(_jclass*, _jfieldID*, jshort)':
/usr/lib/jvm/java-6-sun/include/jni.h:1560: error: 'const struct JNINativeInterface_' has no member named 'SetStaticShortField'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::SetStaticIntField(_jclass*, _jfieldID*, int)':
/usr/lib/jvm/java-6-sun/include/jni.h:1564: error: 'const struct JNINativeInterface_' has no member named 'SetStaticIntField'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::SetStaticLongField(_jclass*, _jfieldID*, int)':
/usr/lib/jvm/java-6-sun/include/jni.h:1568: error: 'const struct JNINativeInterface_' has no member named 'SetStaticLongField'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::SetStaticFloatField(_jclass*, _jfieldID*, jfloat)':
/usr/lib/jvm/java-6-sun/include/jni.h:1572: error: 'const struct JNINativeInterface_' has no member named 'SetStaticFloatField'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::SetStaticDoubleField(_jclass*, _jfieldID*, jdouble)':
/usr/lib/jvm/java-6-sun/include/jni.h:1576: error: 'const struct JNINativeInterface_' has no member named 'SetStaticDoubleField'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jstring* JNIEnv_::NewString(const jchar*, int)':
/usr/lib/jvm/java-6-sun/include/jni.h:1580: error: 'const struct JNINativeInterface_' has no member named 'NewString'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'const jchar* JNIEnv_::GetStringChars(_jstring*, jboolean*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1586: error: 'const struct JNINativeInterface_' has no member named 'GetStringChars'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::ReleaseStringChars(_jstring*, const jchar*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1589: error: 'const struct JNINativeInterface_' has no member named 'ReleaseStringChars'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jstring* JNIEnv_::NewStringUTF(const char*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1593: error: 'const struct JNINativeInterface_' has no member named 'NewStringUTF'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'const char* JNIEnv_::GetStringUTFChars(_jstring*, jboolean*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1599: error: 'const struct JNINativeInterface_' has no member named 'GetStringUTFChars'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::ReleaseStringUTFChars(_jstring*, const char*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1602: error: 'const struct JNINativeInterface_' has no member named 'ReleaseStringUTFChars'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jobjectArray* JNIEnv_::NewObjectArray(int, _jclass*, _jobject*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1611: error: 'const struct JNINativeInterface_' has no member named 'NewObjectArray'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jobject* JNIEnv_::GetObjectArrayElement(_jobjectArray*, int)':
/usr/lib/jvm/java-6-sun/include/jni.h:1614: error: 'const struct JNINativeInterface_' has no member named 'GetObjectArrayElement'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::SetObjectArrayElement(_jobjectArray*, int, _jobject*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1618: error: 'const struct JNINativeInterface_' has no member named 'SetObjectArrayElement'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jbooleanArray* JNIEnv_::NewBooleanArray(int)':
/usr/lib/jvm/java-6-sun/include/jni.h:1622: error: 'const struct JNINativeInterface_' has no member named 'NewBooleanArray'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jbyteArray* JNIEnv_::NewByteArray(int)':
/usr/lib/jvm/java-6-sun/include/jni.h:1625: error: 'const struct JNINativeInterface_' has no member named 'NewByteArray'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jcharArray* JNIEnv_::NewCharArray(int)':
/usr/lib/jvm/java-6-sun/include/jni.h:1628: error: 'const struct JNINativeInterface_' has no member named 'NewCharArray'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jshortArray* JNIEnv_::NewShortArray(int)':
/usr/lib/jvm/java-6-sun/include/jni.h:1631: error: 'const struct JNINativeInterface_' has no member named 'NewShortArray'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jintArray* JNIEnv_::NewIntArray(int)':
/usr/lib/jvm/java-6-sun/include/jni.h:1634: error: 'const struct JNINativeInterface_' has no member named 'NewIntArray'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jlongArray* JNIEnv_::NewLongArray(int)':
/usr/lib/jvm/java-6-sun/include/jni.h:1637: error: 'const struct JNINativeInterface_' has no member named 'NewLongArray'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jfloatArray* JNIEnv_::NewFloatArray(int)':
/usr/lib/jvm/java-6-sun/include/jni.h:1640: error: 'const struct JNINativeInterface_' has no member named 'NewFloatArray'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jdoubleArray* JNIEnv_::NewDoubleArray(int)':
/usr/lib/jvm/java-6-sun/include/jni.h:1643: error: 'const struct JNINativeInterface_' has no member named 'NewDoubleArray'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jboolean* JNIEnv_::GetBooleanArrayElements(_jbooleanArray*, jboolean*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1647: error: 'const struct JNINativeInterface_' has no member named 'GetBooleanArrayElements'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jchar* JNIEnv_::GetCharArrayElements(_jcharArray*, jboolean*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1653: error: 'const struct JNINativeInterface_' has no member named 'GetCharArrayElements'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jshort* JNIEnv_::GetShortArrayElements(_jshortArray*, jboolean*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1656: error: 'const struct JNINativeInterface_' has no member named 'GetShortArrayElements'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jfloat* JNIEnv_::GetFloatArrayElements(_jfloatArray*, jboolean*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1665: error: 'const struct JNINativeInterface_' has no member named 'GetFloatArrayElements'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jdouble* JNIEnv_::GetDoubleArrayElements(_jdoubleArray*, jboolean*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1668: error: 'const struct JNINativeInterface_' has no member named 'GetDoubleArrayElements'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::ReleaseBooleanArrayElements(_jbooleanArray*, jboolean*, int)':
/usr/lib/jvm/java-6-sun/include/jni.h:1674: error: 'const struct JNINativeInterface_' has no member named 'ReleaseBooleanArrayElements'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::ReleaseByteArrayElements(_jbyteArray*, int*, int)':
/usr/lib/jvm/java-6-sun/include/jni.h:1679: error: 'const struct JNINativeInterface_' has no member named 'ReleaseByteArrayElements'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::ReleaseCharArrayElements(_jcharArray*, jchar*, int)':
/usr/lib/jvm/java-6-sun/include/jni.h:1684: error: 'const struct JNINativeInterface_' has no member named 'ReleaseCharArrayElements'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::ReleaseShortArrayElements(_jshortArray*, jshort*, int)':
/usr/lib/jvm/java-6-sun/include/jni.h:1689: error: 'const struct JNINativeInterface_' has no member named 'ReleaseShortArrayElements'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::ReleaseIntArrayElements(_jintArray*, int*, int)':
/usr/lib/jvm/java-6-sun/include/jni.h:1694: error: 'const struct JNINativeInterface_' has no member named 'ReleaseIntArrayElements'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::ReleaseLongArrayElements(_jlongArray*, int*, int)':
/usr/lib/jvm/java-6-sun/include/jni.h:1699: error: 'const struct JNINativeInterface_' has no member named 'ReleaseLongArrayElements'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::ReleaseFloatArrayElements(_jfloatArray*, jfloat*, int)':
/usr/lib/jvm/java-6-sun/include/jni.h:1704: error: 'const struct JNINativeInterface_' has no member named 'ReleaseFloatArrayElements'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::ReleaseDoubleArrayElements(_jdoubleArray*, jdouble*, int)':
/usr/lib/jvm/java-6-sun/include/jni.h:1709: error: 'const struct JNINativeInterface_' has no member named 'ReleaseDoubleArrayElements'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::GetBooleanArrayRegion(_jbooleanArray*, int, int, jboolean*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1714: error: 'const struct JNINativeInterface_' has no member named 'GetBooleanArrayRegion'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::GetByteArrayRegion(_jbyteArray*, int, int, int*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1718: error: 'const struct JNINativeInterface_' has no member named 'GetByteArrayRegion'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::GetCharArrayRegion(_jcharArray*, int, int, jchar*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1722: error: 'const struct JNINativeInterface_' has no member named 'GetCharArrayRegion'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::GetShortArrayRegion(_jshortArray*, int, int, jshort*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1726: error: 'const struct JNINativeInterface_' has no member named 'GetShortArrayRegion'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::GetIntArrayRegion(_jintArray*, int, int, int*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1730: error: 'const struct JNINativeInterface_' has no member named 'GetIntArrayRegion'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::GetLongArrayRegion(_jlongArray*, int, int, int*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1734: error: 'const struct JNINativeInterface_' has no member named 'GetLongArrayRegion'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::GetFloatArrayRegion(_jfloatArray*, int, int, jfloat*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1738: error: 'const struct JNINativeInterface_' has no member named 'GetFloatArrayRegion'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::GetDoubleArrayRegion(_jdoubleArray*, int, int, jdouble*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1742: error: 'const struct JNINativeInterface_' has no member named 'GetDoubleArrayRegion'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::SetBooleanArrayRegion(_jbooleanArray*, int, int, const jboolean*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1747: error: 'const struct JNINativeInterface_' has no member named 'SetBooleanArrayRegion'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::SetByteArrayRegion(_jbyteArray*, int, int, int)':
/usr/lib/jvm/java-6-sun/include/jni.h:1751: error: 'const struct JNINativeInterface_' has no member named 'SetByteArrayRegion'
/usr/lib/jvm/java-6-sun/include/jni.h:1751: error: 'buf' was not declared in this scope
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::SetCharArrayRegion(_jcharArray*, int, int, const jchar*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1755: error: 'const struct JNINativeInterface_' has no member named 'SetCharArrayRegion'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::SetShortArrayRegion(_jshortArray*, int, int, const jshort*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1759: error: 'const struct JNINativeInterface_' has no member named 'SetShortArrayRegion'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::SetIntArrayRegion(_jintArray*, int, int, int)':
/usr/lib/jvm/java-6-sun/include/jni.h:1763: error: 'const struct JNINativeInterface_' has no member named 'SetIntArrayRegion'
/usr/lib/jvm/java-6-sun/include/jni.h:1763: error: 'buf' was not declared in this scope
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::SetLongArrayRegion(_jlongArray*, int, int, int)':
/usr/lib/jvm/java-6-sun/include/jni.h:1767: error: 'const struct JNINativeInterface_' has no member named 'SetLongArrayRegion'
/usr/lib/jvm/java-6-sun/include/jni.h:1767: error: 'buf' was not declared in this scope
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::SetFloatArrayRegion(_jfloatArray*, int, int, const jfloat*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1771: error: 'const struct JNINativeInterface_' has no member named 'SetFloatArrayRegion'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::SetDoubleArrayRegion(_jdoubleArray*, int, int, const jdouble*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1775: error: 'const struct JNINativeInterface_' has no member named 'SetDoubleArrayRegion'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::GetStringRegion(_jstring*, int, int, jchar*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1798: error: 'const struct JNINativeInterface_' has no member named 'GetStringRegion'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::GetStringUTFRegion(_jstring*, int, int, char*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1801: error: 'const struct JNINativeInterface_' has no member named 'GetStringUTFRegion'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void* JNIEnv_::GetPrimitiveArrayCritical(_jarray*, jboolean*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1805: error: 'const struct JNINativeInterface_' has no member named 'GetPrimitiveArrayCritical'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::ReleasePrimitiveArrayCritical(_jarray*, void*, int)':
/usr/lib/jvm/java-6-sun/include/jni.h:1808: error: 'const struct JNINativeInterface_' has no member named 'ReleasePrimitiveArrayCritical'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'const jchar* JNIEnv_::GetStringCritical(_jstring*, jboolean*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1812: error: 'const struct JNINativeInterface_' has no member named 'GetStringCritical'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::ReleaseStringCritical(_jstring*, const jchar*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1815: error: 'const struct JNINativeInterface_' has no member named 'ReleaseStringCritical'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jobject* JNIEnv_::NewWeakGlobalRef(_jobject*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1819: error: 'const struct JNINativeInterface_' has no member named 'NewWeakGlobalRef'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void JNIEnv_::DeleteWeakGlobalRef(_jobject*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1822: error: 'const struct JNINativeInterface_' has no member named 'DeleteWeakGlobalRef'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jboolean JNIEnv_::ExceptionCheck()':
/usr/lib/jvm/java-6-sun/include/jni.h:1826: error: 'const struct JNINativeInterface_' has no member named 'ExceptionCheck'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function '_jobject* JNIEnv_::NewDirectByteBuffer(void*, int)':
/usr/lib/jvm/java-6-sun/include/jni.h:1830: error: 'const struct JNINativeInterface_' has no member named 'NewDirectByteBuffer'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'void* JNIEnv_::GetDirectBufferAddress(_jobject*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1833: error: 'const struct JNINativeInterface_' has no member named 'GetDirectBufferAddress'
/usr/lib/jvm/java-6-sun/include/jni.h: In member function 'jobjectRefType JNIEnv_::GetObjectRefType(_jobject*)':
/usr/lib/jvm/java-6-sun/include/jni.h:1839: error: 'const struct JNINativeInterface_' has no member named 'GetObjectRefType'
/usr/lib/jvm/java-6-sun/include/jni.h: At global scope:
/usr/lib/jvm/java-6-sun/include/jni.h:1851: error: 'jint' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1853: error: 'jint' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1859: error: 'jint' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1877: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1877: error: ISO C++ forbids declaration of 'jint' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:1877: error: 'jint' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:1879: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1879: error: ISO C++ forbids declaration of 'jint' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:1879: error: 'jint' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:1881: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1881: error: ISO C++ forbids declaration of 'jint' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:1881: error: 'jint' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:1883: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1883: error: 'jint' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1883: error: ISO C++ forbids declaration of 'jint' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:1883: error: 'jint' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:1885: error: 'JNICALL' has not been declared
/usr/lib/jvm/java-6-sun/include/jni.h:1885: error: ISO C++ forbids declaration of 'jint' with no type
/usr/lib/jvm/java-6-sun/include/jni.h:1885: error: 'jint' declared as function returning a function
/usr/lib/jvm/java-6-sun/include/jni.h:1892: error: 'jint' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1895: error: 'jint' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1898: error: 'jint' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1902: error: 'jint' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1905: error: 'jint' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1916: error: 'JNIIMPORT' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1919: error: 'JNIIMPORT' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1922: error: 'JNIIMPORT' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1926: error: 'JNIEXPORT' does not name a type
/usr/lib/jvm/java-6-sun/include/jni.h:1929: error: expected constructor, destructor, or type conversion before 'void'
configure:4575: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include </usr/lib/jvm/java-6-sun/include/jni.h>
configure:4589: result: no
configure:4593: checking /usr/lib/jvm/java-6-sun/include/jni.h presence
configure:4608: g++ -E  conftest.cpp
In file included from conftest.cpp:18:
/usr/lib/jvm/java-6-sun/include/jni.h:27:20: error: jni_md.h: No such file or directory
configure:4614: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| #include </usr/lib/jvm/java-6-sun/include/jni.h>
configure:4628: result: no
configure:4656: checking for /usr/lib/jvm/java-6-sun/include/jni.h
configure:4664: result: no
configure:4671: WARNING: *** jni.h not found: Java bindings will not be built ***
configure:4894: creating ./config.status

## ---------------------- ##
## Running config.status. ##
## ---------------------- ##

This file was extended by config.status, which was
generated by GNU Autoconf 2.61.  Invocation command line was

  CONFIG_FILES    = 
  CONFIG_HEADERS  = 
  CONFIG_LINKS    = 
  CONFIG_COMMANDS = 
  $ ./config.status 

on parstripe

config.status:606: creating Makefile
config.status:606: creating dbfill/Makefile
config.status:606: creating expectations/Makefile
config.status:606: creating libannotate/Makefile
config.status:606: creating pathview/Makefile

## ---------------- ##
## Cache variables. ##
## ---------------- ##

ac_cv_c_compiler_gnu=yes
ac_cv_cxx_compiler_gnu=yes
ac_cv_env_CCC_set=
ac_cv_env_CCC_value=
ac_cv_env_CC_set=set
ac_cv_env_CC_value='g++ -m32'
ac_cv_env_CFLAGS_set=
ac_cv_env_CFLAGS_value=
ac_cv_env_CPPFLAGS_set=
ac_cv_env_CPPFLAGS_value=
ac_cv_env_CXXCPP_set=
ac_cv_env_CXXCPP_value=
ac_cv_env_CXXFLAGS_set=
ac_cv_env_CXXFLAGS_value=
ac_cv_env_CXX_set=
ac_cv_env_CXX_value=
ac_cv_env_LDFLAGS_set=
ac_cv_env_LDFLAGS_value=
ac_cv_env_LIBS_set=
ac_cv_env_LIBS_value=
ac_cv_env_build_alias_set=
ac_cv_env_build_alias_value=
ac_cv_env_host_alias_set=
ac_cv_env_host_alias_value=
ac_cv_env_target_alias_set=
ac_cv_env_target_alias_value=
ac_cv_header__usr_lib_jvm_java_6_sun_include_jni_h=no
ac_cv_header_inttypes_h=yes
ac_cv_header_memory_h=yes
ac_cv_header_stdc=yes
ac_cv_header_stdint_h=yes
ac_cv_header_stdlib_h=yes
ac_cv_header_string_h=yes
ac_cv_header_strings_h=yes
ac_cv_header_sys_stat_h=yes
ac_cv_header_sys_types_h=yes
ac_cv_header_unistd_h=yes
ac_cv_lib_glade_2_0_glade_init=yes
ac_cv_lib_lex='none needed'
ac_cv_lib_mysqlclient_mysql_init=yes
ac_cv_lib_pcre_pcre_compile=yes
ac_cv_lib_piki_sock_connect=no
ac_cv_lib_rsvg_2_rsvg_handle_new=yes
ac_cv_objext=o
ac_cv_path_BISON=/usr/bin/bison
ac_cv_path_EGREP='/bin/grep -E'
ac_cv_path_GREP=/bin/grep
ac_cv_path_install='/usr/bin/install -c'
ac_cv_prog_CXXCPP='g++ -E'
ac_cv_prog_LEX=flex
ac_cv_prog_ac_ct_CC='g++ -m32'
ac_cv_prog_ac_ct_CXX=g++
ac_cv_prog_ac_ct_RANLIB=ranlib
ac_cv_prog_cc_c89=no
ac_cv_prog_cc_g=yes
ac_cv_prog_cxx_g=yes
ac_cv_prog_lex_root=lex.yy
ac_cv_prog_lex_yytext_pointer=no

## ----------------- ##
## Output variables. ##
## ----------------- ##

BISON='/usr/bin/bison'
CC='g++ -m32'
CFLAGS='-g -O2'
CPPFLAGS=''
CXX='g++'
CXXCPP='g++ -E'
CXXFLAGS='-g -O2'
DEFS='-DPACKAGE_NAME=\"\" -DPACKAGE_TARNAME=\"\" -DPACKAGE_VERSION=\"\" -DPACKAGE_STRING=\"\" -DPACKAGE_BUGREPORT=\"\" -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1'
DIRS='libannotate dbfill expectations pathview'
ECHO_C=''
ECHO_N='-n'
ECHO_T=''
EGREP='/bin/grep -E'
EXEEXT=''
GLADEBIN='/usr/bin'
GREP='/bin/grep'
HAVE_JAVA=''
HAVE_MYSQL='1'
HAVE_PCRE='1'
HAVE_PIKI=''
HAVE_RSVG='1'
INSTALL_DATA='${INSTALL} -m 644'
INSTALL_PROGRAM='${INSTALL}'
INSTALL_SCRIPT='${INSTALL}'
JAVAC_BIN=''
JAVA_HOME=''
LDFLAGS=''
LEX='flex'
LEXLIB=''
LEX_OUTPUT_ROOT='lex.yy'
LIBANNOTATE_EXTRA_DIRS=''
LIBANNOTATE_EXTRA_PROGS=''
LIBOBJS=''
LIBS=''
LTLIBOBJS=''
MYSQL='-L/usr/lib -L/usr/lib/mysql'
OBJEXT='o'
PACKAGE_BUGREPORT=''
PACKAGE_NAME=''
PACKAGE_STRING=''
PACKAGE_TARNAME=''
PACKAGE_VERSION=''
PATH_SEPARATOR=':'
PCRE='-L/usr/lib'
PIKI='-L/usr/lib'
RANLIB='ranlib'
RSVG='/usr/bin'
SHELL='/bin/bash'
THREADS='-DTHREADS'
ac_ct_CC='g++ -m32'
ac_ct_CXX='g++'
bindir='${exec_prefix}/bin'
build_alias=''
datadir='${datarootdir}'
datarootdir='${prefix}/share'
docdir='${datarootdir}/doc/${PACKAGE}'
dvidir='${docdir}'
exec_prefix='${prefix}'
host_alias=''
htmldir='${docdir}'
includedir='${prefix}/include'
infodir='${datarootdir}/info'
libdir='${exec_prefix}/lib'
libexecdir='${exec_prefix}/libexec'
localedir='${datarootdir}/locale'
localstatedir='${prefix}/var'
mandir='${datarootdir}/man'
oldincludedir='/usr/include'
pdfdir='${docdir}'
prefix='/usr/local'
program_transform_name='s,x,x,'
psdir='${docdir}'
sbindir='${exec_prefix}/sbin'
sharedstatedir='${prefix}/com'
sysconfdir='${prefix}/etc'
target_alias=''

## ----------- ##
## confdefs.h. ##
## ----------- ##

#define PACKAGE_NAME ""
#define PACKAGE_TARNAME ""
#define PACKAGE_VERSION ""
#define PACKAGE_STRING ""
#define PACKAGE_BUGREPORT ""
#define STDC_HEADERS 1
#define HAVE_SYS_TYPES_H 1
#define HAVE_SYS_STAT_H 1
#define HAVE_STDLIB_H 1
#define HAVE_STRING_H 1
#define HAVE_MEMORY_H 1
#define HAVE_STRINGS_H 1
#define HAVE_INTTYPES_H 1
#define HAVE_STDINT_H 1
#define HAVE_UNISTD_H 1

configure: exit 0
