#!/usr/bin/perl

use DBI;

$db = "anno";
$table_base = "bullet";
$T_threads = $table_base."_threads";
$T_messages = $table_base."_messages";

$dbh = DBI->connect("DBI:mysql:$db", "root", "");

$query = $dbh->prepare("SELECT thread_id, host FROM $T_threads");
$query->execute();
while (my ($tid, $host) = $query->fetchrow()) {
	$host{$tid} = $host;
	push @{$threads{$host}}, $tid;
}

foreach (sort keys %threads) {
	print "$_ -> ".(join ',', @{$threads{$_}})."\n";
}

# find out who actually sends packets on each pathid
$query = $dbh->prepare("SELECT pathid,thread_send FROM $T_messages");
$query->execute();
while (my ($pathid, $thread_send) = $query->fetchrow()) {
	$sends{$pathid}{$thread_send}++;
}

# every time a packet is received at thread T, pass it to any of T's
# hostmates who ever (should be later) send a packet on that same pathid
$query = $dbh->prepare("SELECT pathid,ts_recv,size,thread_recv FROM $T_messages");
$query->execute();
while (my ($pathid, $ts_recv, $size, $thread_recv) = $query->fetchrow()) {
	my $amt = 1;
	foreach my $tid (@{$threads{$host{$thread_recv}}}) {
		next if $tid == $thread_recv;
		next if !$sends{$pathid}{$tid};
		$Q = "INSERT INTO $T_messages VALUES ($pathid, 'fake', ".inc($ts_recv,$amt).",".inc($ts_recv,$amt+1).",$size,$thread_recv,$tid)";
		$amt += 2;
		push @Q, $Q;
	}
}

$query = $dbh->prepare("SELECT pathid,ts_send,size FROM $T_messages WHERE thread_send=1");
$query->execute();
while (my ($pathid, $ts_send, $size) = $query->fetchrow()) {
	my $amt = 1;
	foreach my $tid (@{$threads{$host{1}}}) {
		next if $tid == 1;
		next if !$sends{$pathid}{$tid};
		$Q = "INSERT INTO $T_messages VALUES ($pathid, 'fake1', ".inc($ts_send,$amt).",".inc($ts_send,$amt+1).",$size,1,$tid)";
		$amt += 2;
		push @Q, $Q;
	}
}

$|=1;
print "Inserting intra-node messages...";
foreach (@Q) {
	$query = $dbh->prepare("$_");
	$query->execute();
}
print " done.\n";

# Delete Ryan's "GARBAGE" catch-all
$query = $dbh->prepare("DELETE FROM bullet_paths WHERE pathblob LIKE 'GARBAGE%'");
$query->execute();

sub inc {
	if ($_[0] =~ /(\d+)(\d{7})/) {
		return "$1".(sprintf"%07d",($2+$_[1]));
	}
}
