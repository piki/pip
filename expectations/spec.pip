validator VAR1 {
	thread Foo(*, 1) {
		$h = send(Bar);
		recv($h);
		$x = task(*);
		$x = "Foo";
		task($x);
	}
	thread Bar(*, 1) {
		$h2 = recv(Foo);
		send($h2);
		$n = repeat between 1 and 3 {
			task(*);
		}
		$z = $n*$n;
		$z = 2;
		repeat $z*2 {
			notice(*);
		}
	}
}

fragment recognizer FR1 {
limit(REAL_TIME, 15s);
	{ notice("FOO"); }
	task("PARSE_REQUEST")
		limit(CPU_TIME, {0s, 2s});
	task("REVERSE_DNS_LOOKUP")
		limit(REAL_TIME, {10s+});
	notice("CACHE_MISS");
	notice(m/^FOO/);
	task("LINK") {
		task("SP_TREE");
	}
	xor {
		branch: notice("THIS");
		branch: notice("THAT");
	}
	repeat between 2 and 4 task("your mom");
	maybe task("your mom");
}

invalidator I2 {
	level(3);
	thread Client(*, 1) {
		task("outer") {
			task("inner");   // "inner" cannot be nested alone in "outer"
		}
	}
}

fragment invalidator FI3 {
	task(*) limit(REAL_TIME, {1s+});  // no tasks over one second
}

fragment recognizer FR4 { }

fragment recognizer FR5 {
	xor {
		branch: call(FR1);
		branch: call(FI3);
	}
}

recognizer R6 {
	thread Root(*, 1) { any(); }
	thread Mumble(*, {0, 99}) { any(); }
}

validator V7 {
	thread Client(*, 1) {
		send(Client,Mumble);
		task("foo");
		recv(Client);
	}
	thread Mumble(*, {2,4}) {
	}
}

validator V_DHT_recursive_shortcut {
	thread Client(*, 1) {
		limit(SIZE, 10kb);
		task(m/^DHT/);
		future F1 { recv(Client); }
		repeat between 1 and 5 {
			send(Client)
				limit(SIZE, 1kb)
				limit(LATENCY, 0.5s);
			task("DHT");
		}
		done(F1);
		recv(Client);
		task("DHT");
	}
}

validator V_DHT_iterative {
	thread Client(*, 1) {
		task("DHT");
		repeat between 1 and 5 {
			send(Client);
			task("DHT");
			recv(Client);
			task("DHT");
		}
	}
}

validator V_DHT_recursive {
	thread Client(*, 1) {
		task("DHT");
		send(Client);
		repeat between 1 and 5 {
			task("DHT");
			recv(Client);
		}
		task("DHT");
		recv(Client);
		task("DHT");
	}
}

validator V_DHT_Coral {
	thread Client(*, 1) {
		task("DHT");
		send(Client);
		task("DHT");
		recv(Client);
		repeat 2 {
			send(Client);
			task("DHT");
			send(Client);
			task("DHT");
			send(Client);
			task("DHT");
		}
		recv(Client);
		task("DHT");
		recv(Client);
		task("DHT")
		limit(CPU_TIME, 10s);
	}
}

fragment recognizer FR_Timer {
	notice("timer");
}

recognizer SR1 : R6 && V7;

validator SR2: SR1 || V_DHT_iterative;

assert( instances(FR1) in { 1, 5 } );
assert( instances(FR1) < 5 );
assert( instances(FR1) > 1 );
assert( instances(FR1) >= 4 );
assert( instances(FR1) <= 5 );
assert( instances(FR1) != 0 );
assert( 5. < 2.**3. );
assert( exp(2.) < ln(10000.) );
assert( log(1000000.) == 6. );
//during(any 0) assert( unique(FR1) == unique(I2) );
//during(any 5) assert( instances(E1) > 0 -> instances(I2) == 0 );
//during(1, 10) assert( unique($HERE) == 1 );
assert( average(CPU_TIME, FR1) < 5s );
assert( stddev(INVOL_CS, FR1) < 5ms );
//assert( max(REAL_TIME, "DHT") in { 0, 10 } );
//assert( min(REAL_TIME, "DHT") in { 0, 10 } );
