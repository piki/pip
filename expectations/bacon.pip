fragment recognizer SPSub {
	xor {
		branch:   // cache miss
			notice("cache miss");
			task("shortest path") limit(CPU_TIME, 1.0s);
		branch:   // cache hit
			notice("cache hit");
		branch:   // actor not found
	}
}

validator Link {
	limit(DEPTH, {=3});
	limit(MESSAGES, {=2});
	limit(THREADS, {=2});
	limit(HOSTS, {1,2});
	thread Client(*, 1) {
		task("link") {
			send(Server);
			recv(Server);
		}
	}
	thread Server(*, 1) {
		task("link") {
			recv(Client);
			repeat between 0 and 2 {
				task("fuzzy find") limit(CPU_TIME, 400ms);
			}
			call(SPSub);
			send(Client);
		}
	}
}

validator Center {
	limit(DEPTH, {=3});
	limit(MESSAGES, {=2});
	limit(THREADS, {=2});
	thread Client(*, 1) {
		task("center") {
			send(Server);
			recv(Server);
		}
	}
	thread Server(*, 1) {
		task("center") {
			recv(Client);
			repeat between 0 and 1 {
				task("fuzzy find") limit(CPU_TIME, 400ms);
			}
			call(SPSub);
			send(Client);
		}
	}
}

validator ShowCache {
	limit(DEPTH, {=3});
	limit(MESSAGES, {=2});
	limit(THREADS, {=2});
	thread Client(*, 1) {
		task("show cache") {
			send(Server);
			recv(Server);
		}
	}
	thread Server(*, 1) {
		task("show cache") {
			recv(Client);
			send(Client);
		}
	}
}

validator ByNumber {
	limit(DEPTH, {=3});
	limit(MESSAGES, {=2});
	limit(THREADS, {=2});
	thread Client(*, 1) {
		task("by number") {
			send(Server);
			recv(Server);
		}
	}
	thread Server(*, 1) {
		task("by number") {
			recv(Client);
			repeat between 0 and 1 {
				task("fuzzy find") limit(CPU_TIME, 400ms);
			}
			call(SPSub);
			send(Client);
		}
	}
}

validator Init {
	limit(DEPTH, {=1});
	limit(MESSAGES, {=0});
	limit(THREADS, {=1});
	thread Server(*, 1) {
//		task("reading database");
		task("jump tables");
	}
}

fragment recognizer CacheHit { notice("cache hit"); }
fragment recognizer CacheMiss { notice("cache miss"); }

assert(instances(Init) == 1 );
assert(instances(ShowCache) <= 20);
assert(average(CPU_TIME, Center) < 600ms);
assert(instances(CacheHit) / instances(CacheMiss) >= 0.8);
